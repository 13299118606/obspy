# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# see https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml

build_cloud: PC1577-AS
image: Windows

clone_depth: 50

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\misc\\appveyor\\run_with_env.cmd"
    CI_URL: "--ci-url https://ci.appveyor.com/project/%APPVEYOR_REPO_NAME%/build/1.0.%APPVEYOR_BUILD_NUMBER%-%APPVEYOR_REPO_BRANCH%"
    PR_URL: "--pr-url https://github.com/%APPVEYOR_REPO_NAME%/pull/%APPVEYOR_PULL_REQUEST_NUMBER%"
    PYPI_USERNAME:
      secure: rl2zkdPpMWKuqh3paOKNhA==
    PYPI_PASSWORD:
      secure: rToy5D17/4zLIaIBq9S4UQ==


  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "D:\\BUILD\\miniconda3"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      SKIP_NOTAG: "true"

    - PYTHON: "D:\\BUILD\\miniconda3"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"

    - PYTHON: "D:\\BUILD\\miniconda3"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"

    - PYTHON: "D:\\BUILD\\miniconda3"
      PYTHON_VERSION: "3.8"
      PYTHON_ARCH: "64"

install:
  # - ECHO "Filesystem root:"
  # - ps: "ls \"C:/\""

  # - ECHO "Installed SDKs:"
  # - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""
  - "SET ENV_NAME=%APPVEYOR_PULL_REQUEST_NUMBER%-%APPVEYOR_BUILD_NUMBER%-%PYTHON_VERSION%"
  # Prepend Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # Activate the base environment
  - "%PYTHON%\\Scripts\\activate.bat %PYTHON%"
  # Check that we have the expected version and architecture for Python
  - "python -c \"import sys; print(sys.version)\""
  - IF %PYTHON_VERSION% == "3.8" (
        conda create -q --yes -n %ENV_NAME% python=%PYTHON_VERSION% &&
        conda activate %ENV_NAME% &&
        conda install -q --yes "pip>10.0.1" numpy scipy matplotlib lxml sqlalchemy mock nose gdal decorator requests jsonschema pyshp cryptography proj4 pyimgur future geographiclib
      )
    ELSE (
        conda create -n %ENV_NAME% --clone py%PYTHON_VERSION% &&
        conda activate %ENV_NAME%
      )
  # somehow basemap/pyproj/proj4 can fail when PROJ_LIB is not set correctly
  # for whatever reason, see:
  #  - conda-forge/basemap-feedstock#36
  #  - conda-forge/basemap-feedstock#30
  #  - https://ci.appveyor.com/project/obspy/obspy/builds/19346925/job/prqqev70hy0qt786#L692
  #  This is really ugly and should ideally reverted at some later point, in
  #  case used paths / env var names change etc
  - "SET PROJ_LIB=%CONDA_PREFIX%\\Library\\share"

  # list package versions
  - "conda list"

# Not a .NET project, we build ObsPy in the install step instead
build: false

test_script:
  - "%CMD_IN_ENV% python setup.py develop"
  - "python -m obspy.scripts.runtests --no-flake8 -n appveyor-ci -r %CI_URL% %PR_URL%"


on_success:
  - ps: |
      If ($env:APPVEYOR_REPO_TAG -eq "true") {
          git fetch --all
          pip install twine
          python setup.py sdist bdist_wheel bdist_wininst bdist_egg
          Invoke-Expression "twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD --repository-url https://upload.pypi.org/legacy/ --skip-existing dist/*" 2>&1 | Out-Null
      }
  
# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

on_finish:
  - "conda deactivate"
  - "conda env remove -n %ENV_NAME%"
