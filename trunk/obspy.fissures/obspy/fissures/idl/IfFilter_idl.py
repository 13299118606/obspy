# Python stubs generated by omniidl from ../src/IfFilter.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"Fissures.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"Fissures.idl")

_0_Fissures.VERSION = "1.0"

# struct Orientation
_0_Fissures.Orientation = omniORB.newEmptyClass()
class Orientation (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Orientation:1.0"

    def __init__(self, azimuth, dip):
        self.azimuth = azimuth
        self.dip = dip

_0_Fissures.Orientation = Orientation
_0_Fissures._d_Orientation  = (omniORB.tcInternal.tv_struct, Orientation, Orientation._NP_RepositoryId, "Orientation", "azimuth", omniORB.tcInternal.tv_float, "dip", omniORB.tcInternal.tv_float)
_0_Fissures._tc_Orientation = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Orientation)
omniORB.registerType(Orientation._NP_RepositoryId, _0_Fissures._d_Orientation, _0_Fissures._tc_Orientation)
del Orientation

# struct Dimension
_0_Fissures.Dimension = omniORB.newEmptyClass()
class Dimension (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Dimension:1.0"

    def __init__(self, width, height):
        self.width = width
        self.height = height

_0_Fissures.Dimension = Dimension
_0_Fissures._d_Dimension  = (omniORB.tcInternal.tv_struct, Dimension, Dimension._NP_RepositoryId, "Dimension", "width", omniORB.tcInternal.tv_long, "height", omniORB.tcInternal.tv_long)
_0_Fissures._tc_Dimension = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Dimension)
omniORB.registerType(Dimension._NP_RepositoryId, _0_Fissures._d_Dimension, _0_Fissures._tc_Dimension)
del Dimension

# typedef ... DimensionSeq
class DimensionSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/DimensionSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.DimensionSeq = DimensionSeq
_0_Fissures._d_DimensionSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Dimension:1.0"], 0)
_0_Fissures._ad_DimensionSeq = (omniORB.tcInternal.tv_alias, DimensionSeq._NP_RepositoryId, "DimensionSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Dimension:1.0"], 0))
_0_Fissures._tc_DimensionSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_DimensionSeq)
omniORB.registerType(DimensionSeq._NP_RepositoryId, _0_Fissures._ad_DimensionSeq, _0_Fissures._tc_DimensionSeq)
del DimensionSeq

# enum UnitBase
_0_Fissures.METER = omniORB.EnumItem("METER", 0)
_0_Fissures.GRAM = omniORB.EnumItem("GRAM", 1)
_0_Fissures.SECOND = omniORB.EnumItem("SECOND", 2)
_0_Fissures.AMPERE = omniORB.EnumItem("AMPERE", 3)
_0_Fissures.KELVIN = omniORB.EnumItem("KELVIN", 4)
_0_Fissures.MOLE = omniORB.EnumItem("MOLE", 5)
_0_Fissures.CANDELA = omniORB.EnumItem("CANDELA", 6)
_0_Fissures.COUNT = omniORB.EnumItem("COUNT", 7)
_0_Fissures.COMPOSITE = omniORB.EnumItem("COMPOSITE", 8)
_0_Fissures.UnitBase = omniORB.Enum("IDL:iris.edu/Fissures/UnitBase:1.0", (_0_Fissures.METER, _0_Fissures.GRAM, _0_Fissures.SECOND, _0_Fissures.AMPERE, _0_Fissures.KELVIN, _0_Fissures.MOLE, _0_Fissures.CANDELA, _0_Fissures.COUNT, _0_Fissures.COMPOSITE,))

_0_Fissures._d_UnitBase  = (omniORB.tcInternal.tv_enum, _0_Fissures.UnitBase._NP_RepositoryId, "UnitBase", _0_Fissures.UnitBase._items)
_0_Fissures._tc_UnitBase = omniORB.tcInternal.createTypeCode(_0_Fissures._d_UnitBase)
omniORB.registerType(_0_Fissures.UnitBase._NP_RepositoryId, _0_Fissures._d_UnitBase, _0_Fissures._tc_UnitBase)

# valuetype Unit
_0_Fissures._d_Unit = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/Unit:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"] = _0_Fissures._d_Unit
_0_Fissures.Unit = omniORB.newEmptyClass()

class Unit (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Unit:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 6:
                raise TypeError("Unit() takes 6 arguments "
                                "(%d given)" % len(args))
            self.the_unit_base = args[0]
            self.elements = args[1]
            self.power = args[2]
            self.name = args[3]
            self.multi_factor = args[4]
            self.exponent = args[5]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Unit._NP_RepositoryId, Unit)

_0_Fissures.Unit = Unit
_0_Fissures._d_Unit  = (omniORB.tcInternal.tv_value, Unit, Unit._NP_RepositoryId, "Unit", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "the_unit_base", omniORB.typeMapping["IDL:iris.edu/Fissures/UnitBase:1.0"], _0_CORBA.PUBLIC_MEMBER, "elements", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], 0), _0_CORBA.PUBLIC_MEMBER, "power", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER, "name", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "multi_factor", omniORB.tcInternal.tv_double, _0_CORBA.PUBLIC_MEMBER, "exponent", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_Unit = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Unit)
omniORB.registerType(Unit._NP_RepositoryId, _0_Fissures._d_Unit, _0_Fissures._tc_Unit)
del Unit


# typedef ... UnitSeq
class UnitSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/UnitSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.UnitSeq = UnitSeq
_0_Fissures._d_UnitSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], 0)
_0_Fissures._ad_UnitSeq = (omniORB.tcInternal.tv_alias, UnitSeq._NP_RepositoryId, "UnitSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], 0))
_0_Fissures._tc_UnitSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_UnitSeq)
omniORB.registerType(UnitSeq._NP_RepositoryId, _0_Fissures._ad_UnitSeq, _0_Fissures._tc_UnitSeq)
del UnitSeq

# valuetype UnitRange
_0_Fissures._d_UnitRange = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/UnitRange:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/UnitRange:1.0"] = _0_Fissures._d_UnitRange
_0_Fissures.UnitRange = omniORB.newEmptyClass()

class UnitRange (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/UnitRange:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 3:
                raise TypeError("UnitRange() takes 3 arguments "
                                "(%d given)" % len(args))
            self.the_units = args[0]
            self.min_value = args[1]
            self.max_value = args[2]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(UnitRange._NP_RepositoryId, UnitRange)

_0_Fissures.UnitRange = UnitRange
_0_Fissures._d_UnitRange  = (omniORB.tcInternal.tv_value, UnitRange, UnitRange._NP_RepositoryId, "UnitRange", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "the_units", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], _0_CORBA.PUBLIC_MEMBER, "min_value", omniORB.tcInternal.tv_double, _0_CORBA.PUBLIC_MEMBER, "max_value", omniORB.tcInternal.tv_double, _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_UnitRange = omniORB.tcInternal.createTypeCode(_0_Fissures._d_UnitRange)
omniORB.registerType(UnitRange._NP_RepositoryId, _0_Fissures._d_UnitRange, _0_Fissures._tc_UnitRange)
del UnitRange


# valuetype Quantity
_0_Fissures._d_Quantity = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/Quantity:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"] = _0_Fissures._d_Quantity
_0_Fissures.Quantity = omniORB.newEmptyClass()

class Quantity (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Quantity:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 2:
                raise TypeError("Quantity() takes 2 arguments "
                                "(%d given)" % len(args))
            self.value = args[0]
            self.the_units = args[1]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Quantity._NP_RepositoryId, Quantity)

_0_Fissures.Quantity = Quantity
_0_Fissures._d_Quantity  = (omniORB.tcInternal.tv_value, Quantity, Quantity._NP_RepositoryId, "Quantity", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "value", omniORB.tcInternal.tv_double, _0_CORBA.PUBLIC_MEMBER, "the_units", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_Quantity = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Quantity)
omniORB.registerType(Quantity._NP_RepositoryId, _0_Fissures._d_Quantity, _0_Fissures._tc_Quantity)
del Quantity


# typedef ... Length
class Length:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Length:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.Length = Length
_0_Fissures._d_Length  = omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"]
_0_Fissures._ad_Length = (omniORB.tcInternal.tv_alias, Length._NP_RepositoryId, "Length", omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"])
_0_Fissures._tc_Length = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_Length)
omniORB.registerType(Length._NP_RepositoryId, _0_Fissures._ad_Length, _0_Fissures._tc_Length)
del Length

# typedef ... TimeInterval
class TimeInterval:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/TimeInterval:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.TimeInterval = TimeInterval
_0_Fissures._d_TimeInterval  = omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"]
_0_Fissures._ad_TimeInterval = (omniORB.tcInternal.tv_alias, TimeInterval._NP_RepositoryId, "TimeInterval", omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"])
_0_Fissures._tc_TimeInterval = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_TimeInterval)
omniORB.registerType(TimeInterval._NP_RepositoryId, _0_Fissures._ad_TimeInterval, _0_Fissures._tc_TimeInterval)
del TimeInterval

# typedef ... TimeIntervalSeq
class TimeIntervalSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/TimeIntervalSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.TimeIntervalSeq = TimeIntervalSeq
_0_Fissures._d_TimeIntervalSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], 0)
_0_Fissures._ad_TimeIntervalSeq = (omniORB.tcInternal.tv_alias, TimeIntervalSeq._NP_RepositoryId, "TimeIntervalSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], 0))
_0_Fissures._tc_TimeIntervalSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_TimeIntervalSeq)
omniORB.registerType(TimeIntervalSeq._NP_RepositoryId, _0_Fissures._ad_TimeIntervalSeq, _0_Fissures._tc_TimeIntervalSeq)
del TimeIntervalSeq

# enum LocationType
_0_Fissures.GEOGRAPHIC = omniORB.EnumItem("GEOGRAPHIC", 0)
_0_Fissures.GEOCENTRIC = omniORB.EnumItem("GEOCENTRIC", 1)
_0_Fissures.LocationType = omniORB.Enum("IDL:iris.edu/Fissures/LocationType:1.0", (_0_Fissures.GEOGRAPHIC, _0_Fissures.GEOCENTRIC,))

_0_Fissures._d_LocationType  = (omniORB.tcInternal.tv_enum, _0_Fissures.LocationType._NP_RepositoryId, "LocationType", _0_Fissures.LocationType._items)
_0_Fissures._tc_LocationType = omniORB.tcInternal.createTypeCode(_0_Fissures._d_LocationType)
omniORB.registerType(_0_Fissures.LocationType._NP_RepositoryId, _0_Fissures._d_LocationType, _0_Fissures._tc_LocationType)

# struct Location
_0_Fissures.Location = omniORB.newEmptyClass()
class Location (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Location:1.0"

    def __init__(self, latitude, longitude, elevation, depth, type):
        self.latitude = latitude
        self.longitude = longitude
        self.elevation = elevation
        self.depth = depth
        self.type = type

_0_Fissures.Location = Location
_0_Fissures._d_Location  = (omniORB.tcInternal.tv_struct, Location, Location._NP_RepositoryId, "Location", "latitude", omniORB.tcInternal.tv_float, "longitude", omniORB.tcInternal.tv_float, "elevation", omniORB.typeMapping["IDL:iris.edu/Fissures/Length:1.0"], "depth", omniORB.typeMapping["IDL:iris.edu/Fissures/Length:1.0"], "type", omniORB.typeMapping["IDL:iris.edu/Fissures/LocationType:1.0"])
_0_Fissures._tc_Location = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Location)
omniORB.registerType(Location._NP_RepositoryId, _0_Fissures._d_Location, _0_Fissures._tc_Location)
del Location

# typedef ... ISODateTime
class ISODateTime:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/ISODateTime:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.ISODateTime = ISODateTime
_0_Fissures._d_ISODateTime  = (omniORB.tcInternal.tv_string,0)
_0_Fissures._ad_ISODateTime = (omniORB.tcInternal.tv_alias, ISODateTime._NP_RepositoryId, "ISODateTime", (omniORB.tcInternal.tv_string,0))
_0_Fissures._tc_ISODateTime = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_ISODateTime)
omniORB.registerType(ISODateTime._NP_RepositoryId, _0_Fissures._ad_ISODateTime, _0_Fissures._tc_ISODateTime)
del ISODateTime

# struct Time
_0_Fissures.Time = omniORB.newEmptyClass()
class Time (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Time:1.0"

    def __init__(self, date_time, leap_seconds_version):
        self.date_time = date_time
        self.leap_seconds_version = leap_seconds_version

_0_Fissures.Time = Time
_0_Fissures._d_Time  = (omniORB.tcInternal.tv_struct, Time, Time._NP_RepositoryId, "Time", "date_time", omniORB.typeMapping["IDL:iris.edu/Fissures/ISODateTime:1.0"], "leap_seconds_version", omniORB.tcInternal.tv_long)
_0_Fissures._tc_Time = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Time)
omniORB.registerType(Time._NP_RepositoryId, _0_Fissures._d_Time, _0_Fissures._tc_Time)
del Time

# typedef ... TimeSeq
class TimeSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/TimeSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.TimeSeq = TimeSeq
_0_Fissures._d_TimeSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], 0)
_0_Fissures._ad_TimeSeq = (omniORB.tcInternal.tv_alias, TimeSeq._NP_RepositoryId, "TimeSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], 0))
_0_Fissures._tc_TimeSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_TimeSeq)
omniORB.registerType(TimeSeq._NP_RepositoryId, _0_Fissures._ad_TimeSeq, _0_Fissures._tc_TimeSeq)
del TimeSeq

# struct TimeRange
_0_Fissures.TimeRange = omniORB.newEmptyClass()
class TimeRange (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/TimeRange:1.0"

    def __init__(self, start_time, end_time):
        self.start_time = start_time
        self.end_time = end_time

_0_Fissures.TimeRange = TimeRange
_0_Fissures._d_TimeRange  = (omniORB.tcInternal.tv_struct, TimeRange, TimeRange._NP_RepositoryId, "TimeRange", "start_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], "end_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures._tc_TimeRange = omniORB.tcInternal.createTypeCode(_0_Fissures._d_TimeRange)
omniORB.registerType(TimeRange._NP_RepositoryId, _0_Fissures._d_TimeRange, _0_Fissures._tc_TimeRange)
del TimeRange

# typedef ... TimeRangeSeq
class TimeRangeSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/TimeRangeSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.TimeRangeSeq = TimeRangeSeq
_0_Fissures._d_TimeRangeSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], 0)
_0_Fissures._ad_TimeRangeSeq = (omniORB.tcInternal.tv_alias, TimeRangeSeq._NP_RepositoryId, "TimeRangeSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], 0))
_0_Fissures._tc_TimeRangeSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_TimeRangeSeq)
omniORB.registerType(TimeRangeSeq._NP_RepositoryId, _0_Fissures._ad_TimeRangeSeq, _0_Fissures._tc_TimeRangeSeq)
del TimeRangeSeq

# struct ComplexNumber
_0_Fissures.ComplexNumber = omniORB.newEmptyClass()
class ComplexNumber (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/ComplexNumber:1.0"

    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary

_0_Fissures.ComplexNumber = ComplexNumber
_0_Fissures._d_ComplexNumber  = (omniORB.tcInternal.tv_struct, ComplexNumber, ComplexNumber._NP_RepositoryId, "ComplexNumber", "real", omniORB.tcInternal.tv_float, "imaginary", omniORB.tcInternal.tv_float)
_0_Fissures._tc_ComplexNumber = omniORB.tcInternal.createTypeCode(_0_Fissures._d_ComplexNumber)
omniORB.registerType(ComplexNumber._NP_RepositoryId, _0_Fissures._d_ComplexNumber, _0_Fissures._tc_ComplexNumber)
del ComplexNumber

# typedef ... ComplexNumberSeq
class ComplexNumberSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/ComplexNumberSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.ComplexNumberSeq = ComplexNumberSeq
_0_Fissures._d_ComplexNumberSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/ComplexNumber:1.0"], 0)
_0_Fissures._ad_ComplexNumberSeq = (omniORB.tcInternal.tv_alias, ComplexNumberSeq._NP_RepositoryId, "ComplexNumberSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/ComplexNumber:1.0"], 0))
_0_Fissures._tc_ComplexNumberSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_ComplexNumberSeq)
omniORB.registerType(ComplexNumberSeq._NP_RepositoryId, _0_Fissures._ad_ComplexNumberSeq, _0_Fissures._tc_ComplexNumberSeq)
del ComplexNumberSeq
class Area (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Area:1.0"

    def __init__(self, *args, **kwargs):
        raise RuntimeError("Cannot construct objects of this type.")

_0_Fissures.Area = Area
_0_Fissures._d_Area  = (omniORB.tcInternal.tv_value, Area, Area._NP_RepositoryId, "Area", _0_CORBA.VM_ABSTRACT, None, _0_CORBA.tcInternal.tv_null, )
_0_Fissures._tc_Area = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Area)
omniORB.registerType(Area._NP_RepositoryId, _0_Fissures._d_Area, _0_Fissures._tc_Area)
del Area


# valuetype GlobalArea
_0_Fissures._d_GlobalArea = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/GlobalArea:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/GlobalArea:1.0"] = _0_Fissures._d_GlobalArea
_0_Fissures.GlobalArea = omniORB.newEmptyClass()

class GlobalArea (_0_Fissures.Area):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/GlobalArea:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 0:
                raise TypeError("GlobalArea() takes 0 arguments "
                                "(%d given)" % len(args))
            pass
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(GlobalArea._NP_RepositoryId, GlobalArea)

_0_Fissures.GlobalArea = GlobalArea
_0_Fissures._d_GlobalArea  = (omniORB.tcInternal.tv_value, GlobalArea, GlobalArea._NP_RepositoryId, "GlobalArea", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, )
_0_Fissures._tc_GlobalArea = omniORB.tcInternal.createTypeCode(_0_Fissures._d_GlobalArea)
omniORB.registerType(GlobalArea._NP_RepositoryId, _0_Fissures._d_GlobalArea, _0_Fissures._tc_GlobalArea)
del GlobalArea


# valuetype BoxArea
_0_Fissures._d_BoxArea = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/BoxArea:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/BoxArea:1.0"] = _0_Fissures._d_BoxArea
_0_Fissures.BoxArea = omniORB.newEmptyClass()

class BoxArea (_0_Fissures.Area):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/BoxArea:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 4:
                raise TypeError("BoxArea() takes 4 arguments "
                                "(%d given)" % len(args))
            self.min_latitude = args[0]
            self.max_latitude = args[1]
            self.min_longitude = args[2]
            self.max_longitude = args[3]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(BoxArea._NP_RepositoryId, BoxArea)

_0_Fissures.BoxArea = BoxArea
_0_Fissures._d_BoxArea  = (omniORB.tcInternal.tv_value, BoxArea, BoxArea._NP_RepositoryId, "BoxArea", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "min_latitude", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "max_latitude", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "min_longitude", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "max_longitude", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_BoxArea = omniORB.tcInternal.createTypeCode(_0_Fissures._d_BoxArea)
omniORB.registerType(BoxArea._NP_RepositoryId, _0_Fissures._d_BoxArea, _0_Fissures._tc_BoxArea)
del BoxArea


# valuetype PointDistanceArea
_0_Fissures._d_PointDistanceArea = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/PointDistanceArea:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/PointDistanceArea:1.0"] = _0_Fissures._d_PointDistanceArea
_0_Fissures.PointDistanceArea = omniORB.newEmptyClass()

class PointDistanceArea (_0_Fissures.Area):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/PointDistanceArea:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 4:
                raise TypeError("PointDistanceArea() takes 4 arguments "
                                "(%d given)" % len(args))
            self.latitude = args[0]
            self.longitude = args[1]
            self.min_distance = args[2]
            self.max_distance = args[3]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(PointDistanceArea._NP_RepositoryId, PointDistanceArea)

_0_Fissures.PointDistanceArea = PointDistanceArea
_0_Fissures._d_PointDistanceArea  = (omniORB.tcInternal.tv_value, PointDistanceArea, PointDistanceArea._NP_RepositoryId, "PointDistanceArea", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "latitude", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "longitude", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "min_distance", omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"], _0_CORBA.PUBLIC_MEMBER, "max_distance", omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_PointDistanceArea = omniORB.tcInternal.createTypeCode(_0_Fissures._d_PointDistanceArea)
omniORB.registerType(PointDistanceArea._NP_RepositoryId, _0_Fissures._d_PointDistanceArea, _0_Fissures._tc_PointDistanceArea)
del PointDistanceArea


# enum FlinnEngdahlType
_0_Fissures.SEISMIC_REGION = omniORB.EnumItem("SEISMIC_REGION", 0)
_0_Fissures.GEOGRAPHIC_REGION = omniORB.EnumItem("GEOGRAPHIC_REGION", 1)
_0_Fissures.FlinnEngdahlType = omniORB.Enum("IDL:iris.edu/Fissures/FlinnEngdahlType:1.0", (_0_Fissures.SEISMIC_REGION, _0_Fissures.GEOGRAPHIC_REGION,))

_0_Fissures._d_FlinnEngdahlType  = (omniORB.tcInternal.tv_enum, _0_Fissures.FlinnEngdahlType._NP_RepositoryId, "FlinnEngdahlType", _0_Fissures.FlinnEngdahlType._items)
_0_Fissures._tc_FlinnEngdahlType = omniORB.tcInternal.createTypeCode(_0_Fissures._d_FlinnEngdahlType)
omniORB.registerType(_0_Fissures.FlinnEngdahlType._NP_RepositoryId, _0_Fissures._d_FlinnEngdahlType, _0_Fissures._tc_FlinnEngdahlType)

# valuetype FlinnEngdahlRegion
_0_Fissures._d_FlinnEngdahlRegion = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/FlinnEngdahlRegion:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/FlinnEngdahlRegion:1.0"] = _0_Fissures._d_FlinnEngdahlRegion
_0_Fissures.FlinnEngdahlRegion = omniORB.newEmptyClass()

class FlinnEngdahlRegion (_0_Fissures.Area):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/FlinnEngdahlRegion:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 2:
                raise TypeError("FlinnEngdahlRegion() takes 2 arguments "
                                "(%d given)" % len(args))
            self.type = args[0]
            self.number = args[1]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(FlinnEngdahlRegion._NP_RepositoryId, FlinnEngdahlRegion)

_0_Fissures.FlinnEngdahlRegion = FlinnEngdahlRegion
_0_Fissures._d_FlinnEngdahlRegion  = (omniORB.tcInternal.tv_value, FlinnEngdahlRegion, FlinnEngdahlRegion._NP_RepositoryId, "FlinnEngdahlRegion", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "type", omniORB.typeMapping["IDL:iris.edu/Fissures/FlinnEngdahlType:1.0"], _0_CORBA.PUBLIC_MEMBER, "number", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_FlinnEngdahlRegion = omniORB.tcInternal.createTypeCode(_0_Fissures._d_FlinnEngdahlRegion)
omniORB.registerType(FlinnEngdahlRegion._NP_RepositoryId, _0_Fissures._d_FlinnEngdahlRegion, _0_Fissures._tc_FlinnEngdahlRegion)
del FlinnEngdahlRegion


# struct Plottable
_0_Fissures.Plottable = omniORB.newEmptyClass()
class Plottable (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Plottable:1.0"

    def __init__(self, x_coor, y_coor):
        self.x_coor = x_coor
        self.y_coor = y_coor

_0_Fissures.Plottable = Plottable
_0_Fissures._d_Plottable  = (omniORB.tcInternal.tv_struct, Plottable, Plottable._NP_RepositoryId, "Plottable", "x_coor", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0), "y_coor", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_Fissures._tc_Plottable = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Plottable)
omniORB.registerType(Plottable._NP_RepositoryId, _0_Fissures._d_Plottable, _0_Fissures._tc_Plottable)
del Plottable

# typedef ... PlottableSeq
class PlottableSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/PlottableSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.PlottableSeq = PlottableSeq
_0_Fissures._d_PlottableSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Plottable:1.0"], 0)
_0_Fissures._ad_PlottableSeq = (omniORB.tcInternal.tv_alias, PlottableSeq._NP_RepositoryId, "PlottableSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Plottable:1.0"], 0))
_0_Fissures._tc_PlottableSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_PlottableSeq)
omniORB.registerType(PlottableSeq._NP_RepositoryId, _0_Fissures._ad_PlottableSeq, _0_Fissures._tc_PlottableSeq)
del PlottableSeq

# valuetype Sampling
_0_Fissures._d_Sampling = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/Sampling:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"] = _0_Fissures._d_Sampling
_0_Fissures.Sampling = omniORB.newEmptyClass()

class Sampling (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Sampling:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 2:
                raise TypeError("Sampling() takes 2 arguments "
                                "(%d given)" % len(args))
            self.numPoints = args[0]
            self.interval = args[1]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Sampling._NP_RepositoryId, Sampling)

_0_Fissures.Sampling = Sampling
_0_Fissures._d_Sampling  = (omniORB.tcInternal.tv_value, Sampling, Sampling._NP_RepositoryId, "Sampling", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "numPoints", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER, "interval", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures._tc_Sampling = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Sampling)
omniORB.registerType(Sampling._NP_RepositoryId, _0_Fissures._d_Sampling, _0_Fissures._tc_Sampling)
del Sampling


# typedef ... SamplingSeq
class SamplingSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/SamplingSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.SamplingSeq = SamplingSeq
_0_Fissures._d_SamplingSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], 0)
_0_Fissures._ad_SamplingSeq = (omniORB.tcInternal.tv_alias, SamplingSeq._NP_RepositoryId, "SamplingSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], 0))
_0_Fissures._tc_SamplingSeq = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_SamplingSeq)
omniORB.registerType(SamplingSeq._NP_RepositoryId, _0_Fissures._ad_SamplingSeq, _0_Fissures._tc_SamplingSeq)
del SamplingSeq

# typedef ... ErrorCode
class ErrorCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/ErrorCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.ErrorCode = ErrorCode
_0_Fissures._d_ErrorCode  = omniORB.tcInternal.tv_long
_0_Fissures._ad_ErrorCode = (omniORB.tcInternal.tv_alias, ErrorCode._NP_RepositoryId, "ErrorCode", omniORB.tcInternal.tv_long)
_0_Fissures._tc_ErrorCode = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_ErrorCode)
omniORB.registerType(ErrorCode._NP_RepositoryId, _0_Fissures._ad_ErrorCode, _0_Fissures._tc_ErrorCode)
del ErrorCode
_0_Fissures.NOT_FOUND = 2
_0_Fissures.ILLEGAL_PARM = 3
_0_Fissures.ILLEGAL_ATTRIBUTE = 4

# struct Error
_0_Fissures.Error = omniORB.newEmptyClass()
class Error (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/Error:1.0"

    def __init__(self, error_code, error_description):
        self.error_code = error_code
        self.error_description = error_description

_0_Fissures.Error = Error
_0_Fissures._d_Error  = (omniORB.tcInternal.tv_struct, Error, Error._NP_RepositoryId, "Error", "error_code", omniORB.typeMapping["IDL:iris.edu/Fissures/ErrorCode:1.0"], "error_description", (omniORB.tcInternal.tv_string,0))
_0_Fissures._tc_Error = omniORB.tcInternal.createTypeCode(_0_Fissures._d_Error)
omniORB.registerType(Error._NP_RepositoryId, _0_Fissures._d_Error, _0_Fissures._tc_Error)
del Error

# exception FissuresException
_0_Fissures.FissuresException = omniORB.newEmptyClass()
class FissuresException (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/FissuresException:1.0"

    def __init__(self, the_error):
        CORBA.UserException.__init__(self, the_error)
        self.the_error = the_error

_0_Fissures.FissuresException = FissuresException
_0_Fissures._d_FissuresException  = (omniORB.tcInternal.tv_except, FissuresException, FissuresException._NP_RepositoryId, "FissuresException", "the_error", omniORB.typeMapping["IDL:iris.edu/Fissures/Error:1.0"])
_0_Fissures._tc_FissuresException = omniORB.tcInternal.createTypeCode(_0_Fissures._d_FissuresException)
omniORB.registerType(FissuresException._NP_RepositoryId, _0_Fissures._d_FissuresException, _0_Fissures._tc_FissuresException)
del FissuresException

# exception NotImplemented
_0_Fissures.NotImplemented = omniORB.newEmptyClass()
class NotImplemented (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/NotImplemented:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_Fissures.NotImplemented = NotImplemented
_0_Fissures._d_NotImplemented  = (omniORB.tcInternal.tv_except, NotImplemented, NotImplemented._NP_RepositoryId, "NotImplemented")
_0_Fissures._tc_NotImplemented = omniORB.tcInternal.createTypeCode(_0_Fissures._d_NotImplemented)
omniORB.registerType(NotImplemented._NP_RepositoryId, _0_Fissures._d_NotImplemented, _0_Fissures._tc_NotImplemented)
del NotImplemented

# abstract interface FissuresIterator
_0_Fissures._d_FissuresIterator = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/FissuresIterator:1.0", "FissuresIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/FissuresIterator:1.0"] = _0_Fissures._d_FissuresIterator
_0_Fissures.FissuresIterator = omniORB.newEmptyClass()
class FissuresIterator :
    _NP_RepositoryId = _0_Fissures._d_FissuresIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.FissuresIterator = FissuresIterator
_0_Fissures._tc_FissuresIterator = omniORB.tcInternal.createTypeCode(_0_Fissures._d_FissuresIterator)
omniORB.registerType(FissuresIterator._NP_RepositoryId, _0_Fissures._d_FissuresIterator, _0_Fissures._tc_FissuresIterator)

# FissuresIterator operations and attributes
FissuresIterator._d_how_many = ((), (omniORB.tcInternal.tv_long, ), None)
FissuresIterator._d_reset = ((), (), None)
FissuresIterator._d_destroy = ((), (), None)

# FissuresIterator object reference
class _objref_FissuresIterator (CORBA.Object):
    _NP_RepositoryId = FissuresIterator._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def how_many(self, *args):
        return _omnipy.invoke(self, "how_many", _0_Fissures.FissuresIterator._d_how_many, args)

    def reset(self, *args):
        return _omnipy.invoke(self, "reset", _0_Fissures.FissuresIterator._d_reset, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_Fissures.FissuresIterator._d_destroy, args)

    __methods__ = ["how_many", "reset", "destroy"] + CORBA.Object.__methods__

omniORB.registerObjref(FissuresIterator._NP_RepositoryId, _objref_FissuresIterator)
_0_Fissures._objref_FissuresIterator = _objref_FissuresIterator
del FissuresIterator, _objref_FissuresIterator

# FissuresIterator skeleton
__name__ = "obspy.fissures.idl.Fissures__POA"
class FissuresIterator (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.FissuresIterator._NP_RepositoryId


    _omni_op_d = {"how_many": _0_Fissures.FissuresIterator._d_how_many, "reset": _0_Fissures.FissuresIterator._d_reset, "destroy": _0_Fissures.FissuresIterator._d_destroy}

FissuresIterator._omni_skeleton = FissuresIterator
_0_Fissures__POA.FissuresIterator = FissuresIterator
omniORB.registerSkeleton(FissuresIterator._NP_RepositoryId, FissuresIterator)
del FissuresIterator
__name__ = "obspy.fissures.idl.Fissures"

# struct AuditInfo
_0_Fissures.AuditInfo = omniORB.newEmptyClass()
class AuditInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/AuditInfo:1.0"

    def __init__(self, party, description):
        self.party = party
        self.description = description

_0_Fissures.AuditInfo = AuditInfo
_0_Fissures._d_AuditInfo  = (omniORB.tcInternal.tv_struct, AuditInfo, AuditInfo._NP_RepositoryId, "AuditInfo", "party", (omniORB.tcInternal.tv_string,0), "description", (omniORB.tcInternal.tv_string,0))
_0_Fissures._tc_AuditInfo = omniORB.tcInternal.createTypeCode(_0_Fissures._d_AuditInfo)
omniORB.registerType(AuditInfo._NP_RepositoryId, _0_Fissures._d_AuditInfo, _0_Fissures._tc_AuditInfo)
del AuditInfo

# typedef ... AuditInfoOpt
class AuditInfoOpt:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/AuditInfoOpt:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.AuditInfoOpt = AuditInfoOpt
_0_Fissures._d_AuditInfoOpt  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfo:1.0"], 1)
_0_Fissures._ad_AuditInfoOpt = (omniORB.tcInternal.tv_alias, AuditInfoOpt._NP_RepositoryId, "AuditInfoOpt", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfo:1.0"], 1))
_0_Fissures._tc_AuditInfoOpt = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_AuditInfoOpt)
omniORB.registerType(AuditInfoOpt._NP_RepositoryId, _0_Fissures._ad_AuditInfoOpt, _0_Fissures._tc_AuditInfoOpt)
del AuditInfoOpt

# struct AuditElement
_0_Fissures.AuditElement = omniORB.newEmptyClass()
class AuditElement (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/AuditElement:1.0"

    def __init__(self, time_occurred, information):
        self.time_occurred = time_occurred
        self.information = information

_0_Fissures.AuditElement = AuditElement
_0_Fissures._d_AuditElement  = (omniORB.tcInternal.tv_struct, AuditElement, AuditElement._NP_RepositoryId, "AuditElement", "time_occurred", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], "information", omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfo:1.0"])
_0_Fissures._tc_AuditElement = omniORB.tcInternal.createTypeCode(_0_Fissures._d_AuditElement)
omniORB.registerType(AuditElement._NP_RepositoryId, _0_Fissures._d_AuditElement, _0_Fissures._tc_AuditElement)
del AuditElement

# typedef ... AuditTrail
class AuditTrail:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/AuditTrail:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.AuditTrail = AuditTrail
_0_Fissures._d_AuditTrail  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/AuditElement:1.0"], 0)
_0_Fissures._ad_AuditTrail = (omniORB.tcInternal.tv_alias, AuditTrail._NP_RepositoryId, "AuditTrail", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/AuditElement:1.0"], 0))
_0_Fissures._tc_AuditTrail = omniORB.tcInternal.createTypeCode(_0_Fissures._ad_AuditTrail)
omniORB.registerType(AuditTrail._NP_RepositoryId, _0_Fissures._ad_AuditTrail, _0_Fissures._tc_AuditTrail)
del AuditTrail

# abstract interface AuditSystemAccess
_0_Fissures._d_AuditSystemAccess = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/AuditSystemAccess:1.0", "AuditSystemAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/AuditSystemAccess:1.0"] = _0_Fissures._d_AuditSystemAccess
_0_Fissures.AuditSystemAccess = omniORB.newEmptyClass()
class AuditSystemAccess :
    _NP_RepositoryId = _0_Fissures._d_AuditSystemAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.AuditSystemAccess = AuditSystemAccess
_0_Fissures._tc_AuditSystemAccess = omniORB.tcInternal.createTypeCode(_0_Fissures._d_AuditSystemAccess)
omniORB.registerType(AuditSystemAccess._NP_RepositoryId, _0_Fissures._d_AuditSystemAccess, _0_Fissures._tc_AuditSystemAccess)

# AuditSystemAccess operations and attributes
AuditSystemAccess._d_get_audit_trail = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/AuditTrail:1.0"], ), {_0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented})

# AuditSystemAccess object reference
class _objref_AuditSystemAccess (CORBA.Object):
    _NP_RepositoryId = AuditSystemAccess._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def get_audit_trail(self, *args):
        return _omnipy.invoke(self, "get_audit_trail", _0_Fissures.AuditSystemAccess._d_get_audit_trail, args)

    __methods__ = ["get_audit_trail"] + CORBA.Object.__methods__

omniORB.registerObjref(AuditSystemAccess._NP_RepositoryId, _objref_AuditSystemAccess)
_0_Fissures._objref_AuditSystemAccess = _objref_AuditSystemAccess
del AuditSystemAccess, _objref_AuditSystemAccess

# AuditSystemAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA"
class AuditSystemAccess (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.AuditSystemAccess._NP_RepositoryId


    _omni_op_d = {"get_audit_trail": _0_Fissures.AuditSystemAccess._d_get_audit_trail}

AuditSystemAccess._omni_skeleton = AuditSystemAccess
_0_Fissures__POA.AuditSystemAccess = AuditSystemAccess
omniORB.registerSkeleton(AuditSystemAccess._NP_RepositoryId, AuditSystemAccess)
del AuditSystemAccess
__name__ = "obspy.fissures.idl.Fissures"

#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"IfTimeSeries.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"IfTimeSeries.idl")


#
# Start of module "Fissures.IfTimeSeries"
#
__name__ = "obspy.fissures.idl.Fissures.IfTimeSeries"
_0_Fissures.IfTimeSeries = omniORB.openModule("obspy.fissures.idl.Fissures.IfTimeSeries", r"IfTimeSeries.idl")
_0_Fissures__POA.IfTimeSeries = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfTimeSeries", r"IfTimeSeries.idl")

_0_Fissures.IfTimeSeries.VERSION = "1.0"
_0_Fissures.IfTimeSeries.ILLEGAL_CONVERSION = 7

# struct EncodedData
_0_Fissures.IfTimeSeries.EncodedData = omniORB.newEmptyClass()
class EncodedData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"

    def __init__(self, compression, values, num_points, byte_order):
        self.compression = compression
        self.values = values
        self.num_points = num_points
        self.byte_order = byte_order

_0_Fissures.IfTimeSeries.EncodedData = EncodedData
_0_Fissures.IfTimeSeries._d_EncodedData  = (omniORB.tcInternal.tv_struct, EncodedData, EncodedData._NP_RepositoryId, "EncodedData", "compression", omniORB.tcInternal.tv_short, "values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0), "num_points", omniORB.tcInternal.tv_long, "byte_order", omniORB.tcInternal.tv_boolean)
_0_Fissures.IfTimeSeries._tc_EncodedData = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_EncodedData)
omniORB.registerType(EncodedData._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_EncodedData, _0_Fissures.IfTimeSeries._tc_EncodedData)
del EncodedData

# struct ComplexNumber
_0_Fissures.IfTimeSeries.ComplexNumber = omniORB.newEmptyClass()
class ComplexNumber (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumber:1.0"

    def __init__(self, real_part, imaginary_part):
        self.real_part = real_part
        self.imaginary_part = imaginary_part

_0_Fissures.IfTimeSeries.ComplexNumber = ComplexNumber
_0_Fissures.IfTimeSeries._d_ComplexNumber  = (omniORB.tcInternal.tv_struct, ComplexNumber, ComplexNumber._NP_RepositoryId, "ComplexNumber", "real_part", omniORB.tcInternal.tv_float, "imaginary_part", omniORB.tcInternal.tv_float)
_0_Fissures.IfTimeSeries._tc_ComplexNumber = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_ComplexNumber)
omniORB.registerType(ComplexNumber._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_ComplexNumber, _0_Fissures.IfTimeSeries._tc_ComplexNumber)
del ComplexNumber

# typedef ... ComplexNumberSeq
class ComplexNumberSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumberSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.ComplexNumberSeq = ComplexNumberSeq
_0_Fissures.IfTimeSeries._d_ComplexNumberSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumber:1.0"], 0)
_0_Fissures.IfTimeSeries._ad_ComplexNumberSeq = (omniORB.tcInternal.tv_alias, ComplexNumberSeq._NP_RepositoryId, "ComplexNumberSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumber:1.0"], 0))
_0_Fissures.IfTimeSeries._tc_ComplexNumberSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_ComplexNumberSeq)
omniORB.registerType(ComplexNumberSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_ComplexNumberSeq, _0_Fissures.IfTimeSeries._tc_ComplexNumberSeq)
del ComplexNumberSeq

# enum TimeSeriesType
_0_Fissures.IfTimeSeries.TYPE_SHORT = omniORB.EnumItem("TYPE_SHORT", 0)
_0_Fissures.IfTimeSeries.TYPE_LONG = omniORB.EnumItem("TYPE_LONG", 1)
_0_Fissures.IfTimeSeries.TYPE_FLOAT = omniORB.EnumItem("TYPE_FLOAT", 2)
_0_Fissures.IfTimeSeries.TYPE_DOUBLE = omniORB.EnumItem("TYPE_DOUBLE", 3)
_0_Fissures.IfTimeSeries.TYPE_ENCODED = omniORB.EnumItem("TYPE_ENCODED", 4)
_0_Fissures.IfTimeSeries.TimeSeriesType = omniORB.Enum("IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesType:1.0", (_0_Fissures.IfTimeSeries.TYPE_SHORT, _0_Fissures.IfTimeSeries.TYPE_LONG, _0_Fissures.IfTimeSeries.TYPE_FLOAT, _0_Fissures.IfTimeSeries.TYPE_DOUBLE, _0_Fissures.IfTimeSeries.TYPE_ENCODED,))

_0_Fissures.IfTimeSeries._d_TimeSeriesType  = (omniORB.tcInternal.tv_enum, _0_Fissures.IfTimeSeries.TimeSeriesType._NP_RepositoryId, "TimeSeriesType", _0_Fissures.IfTimeSeries.TimeSeriesType._items)
_0_Fissures.IfTimeSeries._tc_TimeSeriesType = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesType)
omniORB.registerType(_0_Fissures.IfTimeSeries.TimeSeriesType._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesType, _0_Fissures.IfTimeSeries._tc_TimeSeriesType)

# union TimeSeriesDataSel
_0_Fissures.IfTimeSeries.TimeSeriesDataSel = omniORB.newEmptyClass()
class TimeSeriesDataSel (omniORB.Union):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"

_0_Fissures.IfTimeSeries.TimeSeriesDataSel = TimeSeriesDataSel

TimeSeriesDataSel._m_to_d = {"sht_values": _0_Fissures.IfTimeSeries.TYPE_SHORT, "int_values": _0_Fissures.IfTimeSeries.TYPE_LONG, "flt_values": _0_Fissures.IfTimeSeries.TYPE_FLOAT, "dbl_values": _0_Fissures.IfTimeSeries.TYPE_DOUBLE, "encoded_values": _0_Fissures.IfTimeSeries.TYPE_ENCODED}
TimeSeriesDataSel._d_to_m = {_0_Fissures.IfTimeSeries.TYPE_SHORT: "sht_values", _0_Fissures.IfTimeSeries.TYPE_LONG: "int_values", _0_Fissures.IfTimeSeries.TYPE_FLOAT: "flt_values", _0_Fissures.IfTimeSeries.TYPE_DOUBLE: "dbl_values", _0_Fissures.IfTimeSeries.TYPE_ENCODED: "encoded_values"}
TimeSeriesDataSel._def_m  = None
TimeSeriesDataSel._def_d  = None

_0_Fissures.IfTimeSeries._m_TimeSeriesDataSel  = ((_0_Fissures.IfTimeSeries.TYPE_SHORT, "sht_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0)), (_0_Fissures.IfTimeSeries.TYPE_LONG, "int_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)), (_0_Fissures.IfTimeSeries.TYPE_FLOAT, "flt_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0)), (_0_Fissures.IfTimeSeries.TYPE_DOUBLE, "dbl_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)), (_0_Fissures.IfTimeSeries.TYPE_ENCODED, "encoded_values", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], 0)),)
_0_Fissures.IfTimeSeries._d_TimeSeriesDataSel  = (omniORB.tcInternal.tv_union, TimeSeriesDataSel, TimeSeriesDataSel._NP_RepositoryId, "TimeSeriesDataSel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesType:1.0"], -1, _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel, None, {_0_Fissures.IfTimeSeries.TYPE_SHORT: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[0], _0_Fissures.IfTimeSeries.TYPE_LONG: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[1], _0_Fissures.IfTimeSeries.TYPE_FLOAT: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[2], _0_Fissures.IfTimeSeries.TYPE_DOUBLE: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[3], _0_Fissures.IfTimeSeries.TYPE_ENCODED: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[4]})
_0_Fissures.IfTimeSeries._tc_TimeSeriesDataSel = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesDataSel)
omniORB.registerType(TimeSeriesDataSel._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesDataSel, _0_Fissures.IfTimeSeries._tc_TimeSeriesDataSel)
del TimeSeriesDataSel

# typedef ... TimeSeriesDataSelSeq
class TimeSeriesDataSelSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSelSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.TimeSeriesDataSelSeq = TimeSeriesDataSelSeq
_0_Fissures.IfTimeSeries._d_TimeSeriesDataSelSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"], 0)
_0_Fissures.IfTimeSeries._ad_TimeSeriesDataSelSeq = (omniORB.tcInternal.tv_alias, TimeSeriesDataSelSeq._NP_RepositoryId, "TimeSeriesDataSelSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"], 0))
_0_Fissures.IfTimeSeries._tc_TimeSeriesDataSelSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_TimeSeriesDataSelSeq)
omniORB.registerType(TimeSeriesDataSelSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_TimeSeriesDataSelSeq, _0_Fissures.IfTimeSeries._tc_TimeSeriesDataSelSeq)
del TimeSeriesDataSelSeq

# typedef ... ShortSeq
class ShortSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.ShortSeq = ShortSeq
_0_Fissures.IfTimeSeries._d_ShortSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0)
_0_Fissures.IfTimeSeries._ad_ShortSeq = (omniORB.tcInternal.tv_alias, ShortSeq._NP_RepositoryId, "ShortSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0))
_0_Fissures.IfTimeSeries._tc_ShortSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_ShortSeq)
omniORB.registerType(ShortSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_ShortSeq, _0_Fissures.IfTimeSeries._tc_ShortSeq)
del ShortSeq

# typedef ... LongSeq
class LongSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.LongSeq = LongSeq
_0_Fissures.IfTimeSeries._d_LongSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)
_0_Fissures.IfTimeSeries._ad_LongSeq = (omniORB.tcInternal.tv_alias, LongSeq._NP_RepositoryId, "LongSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_Fissures.IfTimeSeries._tc_LongSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_LongSeq)
omniORB.registerType(LongSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_LongSeq, _0_Fissures.IfTimeSeries._tc_LongSeq)
del LongSeq

# typedef ... FloatSeq
class FloatSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.FloatSeq = FloatSeq
_0_Fissures.IfTimeSeries._d_FloatSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0)
_0_Fissures.IfTimeSeries._ad_FloatSeq = (omniORB.tcInternal.tv_alias, FloatSeq._NP_RepositoryId, "FloatSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0_Fissures.IfTimeSeries._tc_FloatSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_FloatSeq)
omniORB.registerType(FloatSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_FloatSeq, _0_Fissures.IfTimeSeries._tc_FloatSeq)
del FloatSeq

# typedef ... DoubleSeq
class DoubleSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.DoubleSeq = DoubleSeq
_0_Fissures.IfTimeSeries._d_DoubleSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_Fissures.IfTimeSeries._ad_DoubleSeq = (omniORB.tcInternal.tv_alias, DoubleSeq._NP_RepositoryId, "DoubleSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_Fissures.IfTimeSeries._tc_DoubleSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_DoubleSeq)
omniORB.registerType(DoubleSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_DoubleSeq, _0_Fissures.IfTimeSeries._tc_DoubleSeq)
del DoubleSeq

# typedef ... EncodedSeq
class EncodedSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.EncodedSeq = EncodedSeq
_0_Fissures.IfTimeSeries._d_EncodedSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], 0)
_0_Fissures.IfTimeSeries._ad_EncodedSeq = (omniORB.tcInternal.tv_alias, EncodedSeq._NP_RepositoryId, "EncodedSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], 0))
_0_Fissures.IfTimeSeries._tc_EncodedSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_EncodedSeq)
omniORB.registerType(EncodedSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_EncodedSeq, _0_Fissures.IfTimeSeries._tc_EncodedSeq)
del EncodedSeq

# exception SequenceOutOfOrder
_0_Fissures.IfTimeSeries.SequenceOutOfOrder = omniORB.newEmptyClass()
class SequenceOutOfOrder (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/SequenceOutOfOrder:1.0"

    def __init__(self, last_valid_seq_num):
        CORBA.UserException.__init__(self, last_valid_seq_num)
        self.last_valid_seq_num = last_valid_seq_num

_0_Fissures.IfTimeSeries.SequenceOutOfOrder = SequenceOutOfOrder
_0_Fissures.IfTimeSeries._d_SequenceOutOfOrder  = (omniORB.tcInternal.tv_except, SequenceOutOfOrder, SequenceOutOfOrder._NP_RepositoryId, "SequenceOutOfOrder", "last_valid_seq_num", omniORB.tcInternal.tv_long)
_0_Fissures.IfTimeSeries._tc_SequenceOutOfOrder = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_SequenceOutOfOrder)
omniORB.registerType(SequenceOutOfOrder._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder, _0_Fissures.IfTimeSeries._tc_SequenceOutOfOrder)
del SequenceOutOfOrder

# abstract interface TimeSeriesAccess
_0_Fissures.IfTimeSeries._d_TimeSeriesAccess = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAccess:1.0", "TimeSeriesAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAccess:1.0"] = _0_Fissures.IfTimeSeries._d_TimeSeriesAccess
_0_Fissures.IfTimeSeries.TimeSeriesAccess = omniORB.newEmptyClass()
class TimeSeriesAccess (_0_Fissures.AuditSystemAccess):
    _NP_RepositoryId = _0_Fissures.IfTimeSeries._d_TimeSeriesAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfTimeSeries.TimeSeriesAccess = TimeSeriesAccess
_0_Fissures.IfTimeSeries._tc_TimeSeriesAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesAccess)
omniORB.registerType(TimeSeriesAccess._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesAccess, _0_Fissures.IfTimeSeries._tc_TimeSeriesAccess)

# TimeSeriesAccess operations and attributes
TimeSeriesAccess._d_is_closed = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_long = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_float = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_double = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_short = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_encoded = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_long = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_float = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_double = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_short = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_get_as_longs = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_shorts = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_floats = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_doubles = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_encoded = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# TimeSeriesAccess object reference
class _objref_TimeSeriesAccess (_0_Fissures._objref_AuditSystemAccess):
    _NP_RepositoryId = TimeSeriesAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_AuditSystemAccess.__init__(self)

    def is_closed(self, *args):
        return _omnipy.invoke(self, "is_closed", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_closed, args)

    def is_long(self, *args):
        return _omnipy.invoke(self, "is_long", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_long, args)

    def is_float(self, *args):
        return _omnipy.invoke(self, "is_float", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_float, args)

    def is_double(self, *args):
        return _omnipy.invoke(self, "is_double", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_double, args)

    def is_short(self, *args):
        return _omnipy.invoke(self, "is_short", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_short, args)

    def is_encoded(self, *args):
        return _omnipy.invoke(self, "is_encoded", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_encoded, args)

    def can_convert_to_long(self, *args):
        return _omnipy.invoke(self, "can_convert_to_long", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_long, args)

    def can_convert_to_float(self, *args):
        return _omnipy.invoke(self, "can_convert_to_float", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_float, args)

    def can_convert_to_double(self, *args):
        return _omnipy.invoke(self, "can_convert_to_double", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_double, args)

    def can_convert_to_short(self, *args):
        return _omnipy.invoke(self, "can_convert_to_short", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_short, args)

    def get_as_longs(self, *args):
        return _omnipy.invoke(self, "get_as_longs", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_longs, args)

    def get_as_shorts(self, *args):
        return _omnipy.invoke(self, "get_as_shorts", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_shorts, args)

    def get_as_floats(self, *args):
        return _omnipy.invoke(self, "get_as_floats", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_floats, args)

    def get_as_doubles(self, *args):
        return _omnipy.invoke(self, "get_as_doubles", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_doubles, args)

    def get_as_encoded(self, *args):
        return _omnipy.invoke(self, "get_as_encoded", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_encoded, args)

    __methods__ = ["is_closed", "is_long", "is_float", "is_double", "is_short", "is_encoded", "can_convert_to_long", "can_convert_to_float", "can_convert_to_double", "can_convert_to_short", "get_as_longs", "get_as_shorts", "get_as_floats", "get_as_doubles", "get_as_encoded"] + _0_Fissures._objref_AuditSystemAccess.__methods__

omniORB.registerObjref(TimeSeriesAccess._NP_RepositoryId, _objref_TimeSeriesAccess)
_0_Fissures.IfTimeSeries._objref_TimeSeriesAccess = _objref_TimeSeriesAccess
del TimeSeriesAccess, _objref_TimeSeriesAccess

# TimeSeriesAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfTimeSeries"
class TimeSeriesAccess (_0_Fissures__POA.AuditSystemAccess):
    _NP_RepositoryId = _0_Fissures.IfTimeSeries.TimeSeriesAccess._NP_RepositoryId


    _omni_op_d = {"is_closed": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_closed, "is_long": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_long, "is_float": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_float, "is_double": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_double, "is_short": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_short, "is_encoded": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_encoded, "can_convert_to_long": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_long, "can_convert_to_float": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_float, "can_convert_to_double": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_double, "can_convert_to_short": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_short, "get_as_longs": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_longs, "get_as_shorts": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_shorts, "get_as_floats": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_floats, "get_as_doubles": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_doubles, "get_as_encoded": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_encoded}
    _omni_op_d.update(_0_Fissures__POA.AuditSystemAccess._omni_op_d)

TimeSeriesAccess._omni_skeleton = TimeSeriesAccess
_0_Fissures__POA.IfTimeSeries.TimeSeriesAccess = TimeSeriesAccess
omniORB.registerSkeleton(TimeSeriesAccess._NP_RepositoryId, TimeSeriesAccess)
del TimeSeriesAccess
__name__ = "obspy.fissures.idl.Fissures.IfTimeSeries"

# abstract interface TimeSeriesAdmin
_0_Fissures.IfTimeSeries._d_TimeSeriesAdmin = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAdmin:1.0", "TimeSeriesAdmin")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAdmin:1.0"] = _0_Fissures.IfTimeSeries._d_TimeSeriesAdmin
_0_Fissures.IfTimeSeries.TimeSeriesAdmin = omniORB.newEmptyClass()
class TimeSeriesAdmin :
    _NP_RepositoryId = _0_Fissures.IfTimeSeries._d_TimeSeriesAdmin[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfTimeSeries.TimeSeriesAdmin = TimeSeriesAdmin
_0_Fissures.IfTimeSeries._tc_TimeSeriesAdmin = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesAdmin)
omniORB.registerType(TimeSeriesAdmin._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesAdmin, _0_Fissures.IfTimeSeries._tc_TimeSeriesAdmin)

# TimeSeriesAdmin operations and attributes
TimeSeriesAdmin._d_close = ((), (), None)
TimeSeriesAdmin._d_append_longs = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_shorts = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_floats = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_doubles = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_encoded_seq = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_encoded = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})

# TimeSeriesAdmin object reference
class _objref_TimeSeriesAdmin (CORBA.Object):
    _NP_RepositoryId = TimeSeriesAdmin._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def close(self, *args):
        return _omnipy.invoke(self, "close", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_close, args)

    def append_longs(self, *args):
        return _omnipy.invoke(self, "append_longs", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_longs, args)

    def append_shorts(self, *args):
        return _omnipy.invoke(self, "append_shorts", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_shorts, args)

    def append_floats(self, *args):
        return _omnipy.invoke(self, "append_floats", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_floats, args)

    def append_doubles(self, *args):
        return _omnipy.invoke(self, "append_doubles", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_doubles, args)

    def append_encoded_seq(self, *args):
        return _omnipy.invoke(self, "append_encoded_seq", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded_seq, args)

    def append_encoded(self, *args):
        return _omnipy.invoke(self, "append_encoded", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded, args)

    __methods__ = ["close", "append_longs", "append_shorts", "append_floats", "append_doubles", "append_encoded_seq", "append_encoded"] + CORBA.Object.__methods__

omniORB.registerObjref(TimeSeriesAdmin._NP_RepositoryId, _objref_TimeSeriesAdmin)
_0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin = _objref_TimeSeriesAdmin
del TimeSeriesAdmin, _objref_TimeSeriesAdmin

# TimeSeriesAdmin skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfTimeSeries"
class TimeSeriesAdmin (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfTimeSeries.TimeSeriesAdmin._NP_RepositoryId


    _omni_op_d = {"close": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_close, "append_longs": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_longs, "append_shorts": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_shorts, "append_floats": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_floats, "append_doubles": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_doubles, "append_encoded_seq": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded_seq, "append_encoded": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded}

TimeSeriesAdmin._omni_skeleton = TimeSeriesAdmin
_0_Fissures__POA.IfTimeSeries.TimeSeriesAdmin = TimeSeriesAdmin
omniORB.registerSkeleton(TimeSeriesAdmin._NP_RepositoryId, TimeSeriesAdmin)
del TimeSeriesAdmin
__name__ = "obspy.fissures.idl.Fissures.IfTimeSeries"

#
# End of module "Fissures.IfTimeSeries"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"IfNetwork.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"IfNetwork.idl")


#
# Start of module "Fissures.IfNetwork"
#
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"
_0_Fissures.IfNetwork = omniORB.openModule("obspy.fissures.idl.Fissures.IfNetwork", r"IfNetwork.idl")
_0_Fissures__POA.IfNetwork = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfNetwork", r"IfNetwork.idl")

_0_Fissures.IfNetwork.VERSION = "1.0"

# interface ConcreteNetwork;
_0_Fissures.IfNetwork._d_ConcreteNetwork = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/ConcreteNetwork:1.0", "ConcreteNetwork")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ConcreteNetwork:1.0"] = _0_Fissures.IfNetwork._d_ConcreteNetwork

# interface VirtualNetwork;
_0_Fissures.IfNetwork._d_VirtualNetwork = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/VirtualNetwork:1.0", "VirtualNetwork")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/VirtualNetwork:1.0"] = _0_Fissures.IfNetwork._d_VirtualNetwork

# interface NetworkFinder;
_0_Fissures.IfNetwork._d_NetworkFinder = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkFinder:1.0", "NetworkFinder")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkFinder:1.0"] = _0_Fissures.IfNetwork._d_NetworkFinder

# interface NetworkFactory;
_0_Fissures.IfNetwork._d_NetworkFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkFactory:1.0", "NetworkFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkFactory:1.0"] = _0_Fissures.IfNetwork._d_NetworkFactory

# interface NetworkExplorer;
_0_Fissures.IfNetwork._d_NetworkExplorer = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0", "NetworkExplorer")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0"] = _0_Fissures.IfNetwork._d_NetworkExplorer

# abstract interface Network;
_0_Fissures.IfNetwork._d_Network = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfNetwork/Network:1.0", "Network")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Network:1.0"] = _0_Fissures.IfNetwork._d_Network

# typedef ... NetworkSeq
class NetworkSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NetworkSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.NetworkSeq = NetworkSeq
_0_Fissures.IfNetwork._d_NetworkSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Network:1.0"], 0)
_0_Fissures.IfNetwork._ad_NetworkSeq = (omniORB.tcInternal.tv_alias, NetworkSeq._NP_RepositoryId, "NetworkSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Network:1.0"], 0))
_0_Fissures.IfNetwork._tc_NetworkSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_NetworkSeq)
omniORB.registerType(NetworkSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_NetworkSeq, _0_Fissures.IfNetwork._tc_NetworkSeq)
del NetworkSeq

# abstract interface NetworkAccess;
_0_Fissures.IfNetwork._d_NetworkAccess = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0", "NetworkAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0"] = _0_Fissures.IfNetwork._d_NetworkAccess

# typedef ... NetworkAccessSeq
class NetworkAccessSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NetworkAccessSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.NetworkAccessSeq = NetworkAccessSeq
_0_Fissures.IfNetwork._d_NetworkAccessSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0"], 0)
_0_Fissures.IfNetwork._ad_NetworkAccessSeq = (omniORB.tcInternal.tv_alias, NetworkAccessSeq._NP_RepositoryId, "NetworkAccessSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0"], 0))
_0_Fissures.IfNetwork._tc_NetworkAccessSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_NetworkAccessSeq)
omniORB.registerType(NetworkAccessSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_NetworkAccessSeq, _0_Fissures.IfNetwork._tc_NetworkAccessSeq)
del NetworkAccessSeq

# typedef ... ClockType
class ClockType:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ClockType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.ClockType = ClockType
_0_Fissures.IfNetwork._d_ClockType  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfNetwork._ad_ClockType = (omniORB.tcInternal.tv_alias, ClockType._NP_RepositoryId, "ClockType", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfNetwork._tc_ClockType = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_ClockType)
omniORB.registerType(ClockType._NP_RepositoryId, _0_Fissures.IfNetwork._ad_ClockType, _0_Fissures.IfNetwork._tc_ClockType)
del ClockType

# typedef ... StationCode
class StationCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/StationCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.StationCode = StationCode
_0_Fissures.IfNetwork._d_StationCode  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfNetwork._ad_StationCode = (omniORB.tcInternal.tv_alias, StationCode._NP_RepositoryId, "StationCode", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfNetwork._tc_StationCode = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_StationCode)
omniORB.registerType(StationCode._NP_RepositoryId, _0_Fissures.IfNetwork._ad_StationCode, _0_Fissures.IfNetwork._tc_StationCode)
del StationCode

# typedef ... SiteCode
class SiteCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/SiteCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.SiteCode = SiteCode
_0_Fissures.IfNetwork._d_SiteCode  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfNetwork._ad_SiteCode = (omniORB.tcInternal.tv_alias, SiteCode._NP_RepositoryId, "SiteCode", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfNetwork._tc_SiteCode = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_SiteCode)
omniORB.registerType(SiteCode._NP_RepositoryId, _0_Fissures.IfNetwork._ad_SiteCode, _0_Fissures.IfNetwork._tc_SiteCode)
del SiteCode

# typedef ... ChannelCode
class ChannelCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.ChannelCode = ChannelCode
_0_Fissures.IfNetwork._d_ChannelCode  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfNetwork._ad_ChannelCode = (omniORB.tcInternal.tv_alias, ChannelCode._NP_RepositoryId, "ChannelCode", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfNetwork._tc_ChannelCode = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_ChannelCode)
omniORB.registerType(ChannelCode._NP_RepositoryId, _0_Fissures.IfNetwork._ad_ChannelCode, _0_Fissures.IfNetwork._tc_ChannelCode)
del ChannelCode

# typedef ... NetworkCode
class NetworkCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NetworkCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.NetworkCode = NetworkCode
_0_Fissures.IfNetwork._d_NetworkCode  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfNetwork._ad_NetworkCode = (omniORB.tcInternal.tv_alias, NetworkCode._NP_RepositoryId, "NetworkCode", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfNetwork._tc_NetworkCode = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_NetworkCode)
omniORB.registerType(NetworkCode._NP_RepositoryId, _0_Fissures.IfNetwork._ad_NetworkCode, _0_Fissures.IfNetwork._tc_NetworkCode)
del NetworkCode

# struct NetworkId
_0_Fissures.IfNetwork.NetworkId = omniORB.newEmptyClass()
class NetworkId (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NetworkId:1.0"

    def __init__(self, network_code, begin_time):
        self.network_code = network_code
        self.begin_time = begin_time

_0_Fissures.IfNetwork.NetworkId = NetworkId
_0_Fissures.IfNetwork._d_NetworkId  = (omniORB.tcInternal.tv_struct, NetworkId, NetworkId._NP_RepositoryId, "NetworkId", "network_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkCode:1.0"], "begin_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures.IfNetwork._tc_NetworkId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkId)
omniORB.registerType(NetworkId._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkId, _0_Fissures.IfNetwork._tc_NetworkId)
del NetworkId

# struct StationId
_0_Fissures.IfNetwork.StationId = omniORB.newEmptyClass()
class StationId (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"

    def __init__(self, network_id, station_code, begin_time):
        self.network_id = network_id
        self.station_code = station_code
        self.begin_time = begin_time

_0_Fissures.IfNetwork.StationId = StationId
_0_Fissures.IfNetwork._d_StationId  = (omniORB.tcInternal.tv_struct, StationId, StationId._NP_RepositoryId, "StationId", "network_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkId:1.0"], "station_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationCode:1.0"], "begin_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures.IfNetwork._tc_StationId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_StationId)
omniORB.registerType(StationId._NP_RepositoryId, _0_Fissures.IfNetwork._d_StationId, _0_Fissures.IfNetwork._tc_StationId)
del StationId

# typedef ... StationIdSeq
class StationIdSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/StationIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.StationIdSeq = StationIdSeq
_0_Fissures.IfNetwork._d_StationIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], 0)
_0_Fissures.IfNetwork._ad_StationIdSeq = (omniORB.tcInternal.tv_alias, StationIdSeq._NP_RepositoryId, "StationIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], 0))
_0_Fissures.IfNetwork._tc_StationIdSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_StationIdSeq)
omniORB.registerType(StationIdSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_StationIdSeq, _0_Fissures.IfNetwork._tc_StationIdSeq)
del StationIdSeq

# struct SiteId
_0_Fissures.IfNetwork.SiteId = omniORB.newEmptyClass()
class SiteId (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"

    def __init__(self, network_id, station_code, site_code, begin_time):
        self.network_id = network_id
        self.station_code = station_code
        self.site_code = site_code
        self.begin_time = begin_time

_0_Fissures.IfNetwork.SiteId = SiteId
_0_Fissures.IfNetwork._d_SiteId  = (omniORB.tcInternal.tv_struct, SiteId, SiteId._NP_RepositoryId, "SiteId", "network_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkId:1.0"], "station_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationCode:1.0"], "site_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteCode:1.0"], "begin_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures.IfNetwork._tc_SiteId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_SiteId)
omniORB.registerType(SiteId._NP_RepositoryId, _0_Fissures.IfNetwork._d_SiteId, _0_Fissures.IfNetwork._tc_SiteId)
del SiteId

# typedef ... SiteIdSeq
class SiteIdSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/SiteIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.SiteIdSeq = SiteIdSeq
_0_Fissures.IfNetwork._d_SiteIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"], 0)
_0_Fissures.IfNetwork._ad_SiteIdSeq = (omniORB.tcInternal.tv_alias, SiteIdSeq._NP_RepositoryId, "SiteIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"], 0))
_0_Fissures.IfNetwork._tc_SiteIdSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_SiteIdSeq)
omniORB.registerType(SiteIdSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_SiteIdSeq, _0_Fissures.IfNetwork._tc_SiteIdSeq)
del SiteIdSeq

# struct ChannelId
_0_Fissures.IfNetwork.ChannelId = omniORB.newEmptyClass()
class ChannelId (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"

    def __init__(self, network_id, station_code, site_code, channel_code, begin_time):
        self.network_id = network_id
        self.station_code = station_code
        self.site_code = site_code
        self.channel_code = channel_code
        self.begin_time = begin_time

_0_Fissures.IfNetwork.ChannelId = ChannelId
_0_Fissures.IfNetwork._d_ChannelId  = (omniORB.tcInternal.tv_struct, ChannelId, ChannelId._NP_RepositoryId, "ChannelId", "network_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkId:1.0"], "station_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationCode:1.0"], "site_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteCode:1.0"], "channel_code", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelCode:1.0"], "begin_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures.IfNetwork._tc_ChannelId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ChannelId)
omniORB.registerType(ChannelId._NP_RepositoryId, _0_Fissures.IfNetwork._d_ChannelId, _0_Fissures.IfNetwork._tc_ChannelId)
del ChannelId

# typedef ... ChannelIdSeq
class ChannelIdSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.ChannelIdSeq = ChannelIdSeq
_0_Fissures.IfNetwork._d_ChannelIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], 0)
_0_Fissures.IfNetwork._ad_ChannelIdSeq = (omniORB.tcInternal.tv_alias, ChannelIdSeq._NP_RepositoryId, "ChannelIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], 0))
_0_Fissures.IfNetwork._tc_ChannelIdSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_ChannelIdSeq)
omniORB.registerType(ChannelIdSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_ChannelIdSeq, _0_Fissures.IfNetwork._tc_ChannelIdSeq)
del ChannelIdSeq

# valuetype NetworkAttr
_0_Fissures.IfNetwork._d_NetworkAttr = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0"] = _0_Fissures.IfNetwork._d_NetworkAttr
_0_Fissures.IfNetwork.NetworkAttr = omniORB.newEmptyClass()

class NetworkAttr (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 5:
                raise TypeError("NetworkAttr() takes 5 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.name = args[1]
            self.description = args[2]
            self.owner = args[3]
            self.effective_time = args[4]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(NetworkAttr._NP_RepositoryId, NetworkAttr)

_0_Fissures.IfNetwork.NetworkAttr = NetworkAttr
_0_Fissures.IfNetwork._d_NetworkAttr  = (omniORB.tcInternal.tv_value, NetworkAttr, NetworkAttr._NP_RepositoryId, "NetworkAttr", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkId:1.0"], _0_CORBA.PRIVATE_MEMBER, "name", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "description", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "owner", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "effective_time", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_NetworkAttr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkAttr)
omniORB.registerType(NetworkAttr._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkAttr, _0_Fissures.IfNetwork._tc_NetworkAttr)
del NetworkAttr


# valuetype Station
_0_Fissures.IfNetwork._d_Station = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"] = _0_Fissures.IfNetwork._d_Station
_0_Fissures.IfNetwork.Station = omniORB.newEmptyClass()

class Station (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Station:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 8:
                raise TypeError("Station() takes 8 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.name = args[1]
            self.my_location = args[2]
            self.effective_time = args[3]
            self.operator = args[4]
            self.description = args[5]
            self.comment = args[6]
            self.my_network = args[7]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Station._NP_RepositoryId, Station)

_0_Fissures.IfNetwork.Station = Station
_0_Fissures.IfNetwork._d_Station  = (omniORB.tcInternal.tv_value, Station, Station._NP_RepositoryId, "Station", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], _0_CORBA.PRIVATE_MEMBER, "name", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "my_location", omniORB.typeMapping["IDL:iris.edu/Fissures/Location:1.0"], _0_CORBA.PUBLIC_MEMBER, "effective_time", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], _0_CORBA.PUBLIC_MEMBER, "operator", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "description", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "comment", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "my_network", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Station = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Station)
omniORB.registerType(Station._NP_RepositoryId, _0_Fissures.IfNetwork._d_Station, _0_Fissures.IfNetwork._tc_Station)
del Station


# typedef ... StationSeq
class StationSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/StationSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.StationSeq = StationSeq
_0_Fissures.IfNetwork._d_StationSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"], 0)
_0_Fissures.IfNetwork._ad_StationSeq = (omniORB.tcInternal.tv_alias, StationSeq._NP_RepositoryId, "StationSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"], 0))
_0_Fissures.IfNetwork._tc_StationSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_StationSeq)
omniORB.registerType(StationSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_StationSeq, _0_Fissures.IfNetwork._tc_StationSeq)
del StationSeq

# valuetype Site
_0_Fissures.IfNetwork._d_Site = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Site:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Site:1.0"] = _0_Fissures.IfNetwork._d_Site
_0_Fissures.IfNetwork.Site = omniORB.newEmptyClass()

class Site (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Site:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 5:
                raise TypeError("Site() takes 5 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.my_location = args[1]
            self.effective_time = args[2]
            self.my_station = args[3]
            self.comment = args[4]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Site._NP_RepositoryId, Site)

_0_Fissures.IfNetwork.Site = Site
_0_Fissures.IfNetwork._d_Site  = (omniORB.tcInternal.tv_value, Site, Site._NP_RepositoryId, "Site", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"], _0_CORBA.PRIVATE_MEMBER, "my_location", omniORB.typeMapping["IDL:iris.edu/Fissures/Location:1.0"], _0_CORBA.PUBLIC_MEMBER, "effective_time", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], _0_CORBA.PUBLIC_MEMBER, "my_station", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"], _0_CORBA.PUBLIC_MEMBER, "comment", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Site = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Site)
omniORB.registerType(Site._NP_RepositoryId, _0_Fissures.IfNetwork._d_Site, _0_Fissures.IfNetwork._tc_Site)
del Site


# valuetype Channel
_0_Fissures.IfNetwork._d_Channel = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"] = _0_Fissures.IfNetwork._d_Channel
_0_Fissures.IfNetwork.Channel = omniORB.newEmptyClass()

class Channel (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 6:
                raise TypeError("Channel() takes 6 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.name = args[1]
            self.an_orientation = args[2]
            self.sampling_info = args[3]
            self.effective_time = args[4]
            self.my_site = args[5]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Channel._NP_RepositoryId, Channel)

_0_Fissures.IfNetwork.Channel = Channel
_0_Fissures.IfNetwork._d_Channel  = (omniORB.tcInternal.tv_value, Channel, Channel._NP_RepositoryId, "Channel", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], _0_CORBA.PRIVATE_MEMBER, "name", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "an_orientation", omniORB.typeMapping["IDL:iris.edu/Fissures/Orientation:1.0"], _0_CORBA.PUBLIC_MEMBER, "sampling_info", omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], _0_CORBA.PUBLIC_MEMBER, "effective_time", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], _0_CORBA.PUBLIC_MEMBER, "my_site", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Site:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Channel = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Channel)
omniORB.registerType(Channel._NP_RepositoryId, _0_Fissures.IfNetwork._d_Channel, _0_Fissures.IfNetwork._tc_Channel)
del Channel


# typedef ... ChannelSeq
class ChannelSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.ChannelSeq = ChannelSeq
_0_Fissures.IfNetwork._d_ChannelSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"], 0)
_0_Fissures.IfNetwork._ad_ChannelSeq = (omniORB.tcInternal.tv_alias, ChannelSeq._NP_RepositoryId, "ChannelSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"], 0))
_0_Fissures.IfNetwork._tc_ChannelSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_ChannelSeq)
omniORB.registerType(ChannelSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_ChannelSeq, _0_Fissures.IfNetwork._tc_ChannelSeq)
del ChannelSeq

# typedef ... ChannelGroup
class ChannelGroup:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.ChannelGroup = ChannelGroup
_0_Fissures.IfNetwork._d_ChannelGroup  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], 3)
_0_Fissures.IfNetwork._ad_ChannelGroup = (omniORB.tcInternal.tv_alias, ChannelGroup._NP_RepositoryId, "ChannelGroup", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], 3))
_0_Fissures.IfNetwork._tc_ChannelGroup = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_ChannelGroup)
omniORB.registerType(ChannelGroup._NP_RepositoryId, _0_Fissures.IfNetwork._ad_ChannelGroup, _0_Fissures.IfNetwork._tc_ChannelGroup)
del ChannelGroup

# typedef ... ChannelGroupSeq
class ChannelGroupSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelGroupSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.ChannelGroupSeq = ChannelGroupSeq
_0_Fissures.IfNetwork._d_ChannelGroupSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"], 0)
_0_Fissures.IfNetwork._ad_ChannelGroupSeq = (omniORB.tcInternal.tv_alias, ChannelGroupSeq._NP_RepositoryId, "ChannelGroupSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"], 0))
_0_Fissures.IfNetwork._tc_ChannelGroupSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_ChannelGroupSeq)
omniORB.registerType(ChannelGroupSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_ChannelGroupSeq, _0_Fissures.IfNetwork._tc_ChannelGroupSeq)
del ChannelGroupSeq

# enum TransferType
_0_Fissures.IfNetwork.LAPLACE = omniORB.EnumItem("LAPLACE", 0)
_0_Fissures.IfNetwork.ANALOG = omniORB.EnumItem("ANALOG", 1)
_0_Fissures.IfNetwork.COMPOSITE = omniORB.EnumItem("COMPOSITE", 2)
_0_Fissures.IfNetwork.DIGITAL = omniORB.EnumItem("DIGITAL", 3)
_0_Fissures.IfNetwork.TransferType = omniORB.Enum("IDL:iris.edu/Fissures/IfNetwork/TransferType:1.0", (_0_Fissures.IfNetwork.LAPLACE, _0_Fissures.IfNetwork.ANALOG, _0_Fissures.IfNetwork.COMPOSITE, _0_Fissures.IfNetwork.DIGITAL,))

_0_Fissures.IfNetwork._d_TransferType  = (omniORB.tcInternal.tv_enum, _0_Fissures.IfNetwork.TransferType._NP_RepositoryId, "TransferType", _0_Fissures.IfNetwork.TransferType._items)
_0_Fissures.IfNetwork._tc_TransferType = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_TransferType)
omniORB.registerType(_0_Fissures.IfNetwork.TransferType._NP_RepositoryId, _0_Fissures.IfNetwork._d_TransferType, _0_Fissures.IfNetwork._tc_TransferType)

# enum FilterType
_0_Fissures.IfNetwork.COEFFICIENT = omniORB.EnumItem("COEFFICIENT", 0)
_0_Fissures.IfNetwork.POLEZERO = omniORB.EnumItem("POLEZERO", 1)
_0_Fissures.IfNetwork.LIST = omniORB.EnumItem("LIST", 2)
_0_Fissures.IfNetwork.FilterType = omniORB.Enum("IDL:iris.edu/Fissures/IfNetwork/FilterType:1.0", (_0_Fissures.IfNetwork.COEFFICIENT, _0_Fissures.IfNetwork.POLEZERO, _0_Fissures.IfNetwork.LIST,))

_0_Fissures.IfNetwork._d_FilterType  = (omniORB.tcInternal.tv_enum, _0_Fissures.IfNetwork.FilterType._NP_RepositoryId, "FilterType", _0_Fissures.IfNetwork.FilterType._items)
_0_Fissures.IfNetwork._tc_FilterType = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_FilterType)
omniORB.registerType(_0_Fissures.IfNetwork.FilterType._NP_RepositoryId, _0_Fissures.IfNetwork._d_FilterType, _0_Fissures.IfNetwork._tc_FilterType)

# struct ComplexNumberErrored
_0_Fissures.IfNetwork.ComplexNumberErrored = omniORB.newEmptyClass()
class ComplexNumberErrored (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ComplexNumberErrored:1.0"

    def __init__(self, real, real_error, imaginary, imaginary_error):
        self.real = real
        self.real_error = real_error
        self.imaginary = imaginary
        self.imaginary_error = imaginary_error

_0_Fissures.IfNetwork.ComplexNumberErrored = ComplexNumberErrored
_0_Fissures.IfNetwork._d_ComplexNumberErrored  = (omniORB.tcInternal.tv_struct, ComplexNumberErrored, ComplexNumberErrored._NP_RepositoryId, "ComplexNumberErrored", "real", omniORB.tcInternal.tv_float, "real_error", omniORB.tcInternal.tv_float, "imaginary", omniORB.tcInternal.tv_float, "imaginary_error", omniORB.tcInternal.tv_float)
_0_Fissures.IfNetwork._tc_ComplexNumberErrored = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ComplexNumberErrored)
omniORB.registerType(ComplexNumberErrored._NP_RepositoryId, _0_Fissures.IfNetwork._d_ComplexNumberErrored, _0_Fissures.IfNetwork._tc_ComplexNumberErrored)
del ComplexNumberErrored

# struct CoefficientErrored
_0_Fissures.IfNetwork.CoefficientErrored = omniORB.newEmptyClass()
class CoefficientErrored (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/CoefficientErrored:1.0"

    def __init__(self, value, error):
        self.value = value
        self.error = error

_0_Fissures.IfNetwork.CoefficientErrored = CoefficientErrored
_0_Fissures.IfNetwork._d_CoefficientErrored  = (omniORB.tcInternal.tv_struct, CoefficientErrored, CoefficientErrored._NP_RepositoryId, "CoefficientErrored", "value", omniORB.tcInternal.tv_float, "error", omniORB.tcInternal.tv_float)
_0_Fissures.IfNetwork._tc_CoefficientErrored = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_CoefficientErrored)
omniORB.registerType(CoefficientErrored._NP_RepositoryId, _0_Fissures.IfNetwork._d_CoefficientErrored, _0_Fissures.IfNetwork._tc_CoefficientErrored)
del CoefficientErrored

# struct CoefficientFilter
_0_Fissures.IfNetwork.CoefficientFilter = omniORB.newEmptyClass()
class CoefficientFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/CoefficientFilter:1.0"

    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator

_0_Fissures.IfNetwork.CoefficientFilter = CoefficientFilter
_0_Fissures.IfNetwork._d_CoefficientFilter  = (omniORB.tcInternal.tv_struct, CoefficientFilter, CoefficientFilter._NP_RepositoryId, "CoefficientFilter", "numerator", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/CoefficientErrored:1.0"], 0), "denominator", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/CoefficientErrored:1.0"], 0))
_0_Fissures.IfNetwork._tc_CoefficientFilter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_CoefficientFilter)
omniORB.registerType(CoefficientFilter._NP_RepositoryId, _0_Fissures.IfNetwork._d_CoefficientFilter, _0_Fissures.IfNetwork._tc_CoefficientFilter)
del CoefficientFilter

# struct PoleZeroFilter
_0_Fissures.IfNetwork.PoleZeroFilter = omniORB.newEmptyClass()
class PoleZeroFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/PoleZeroFilter:1.0"

    def __init__(self, poles, zeros):
        self.poles = poles
        self.zeros = zeros

_0_Fissures.IfNetwork.PoleZeroFilter = PoleZeroFilter
_0_Fissures.IfNetwork._d_PoleZeroFilter  = (omniORB.tcInternal.tv_struct, PoleZeroFilter, PoleZeroFilter._NP_RepositoryId, "PoleZeroFilter", "poles", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ComplexNumberErrored:1.0"], 0), "zeros", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ComplexNumberErrored:1.0"], 0))
_0_Fissures.IfNetwork._tc_PoleZeroFilter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_PoleZeroFilter)
omniORB.registerType(PoleZeroFilter._NP_RepositoryId, _0_Fissures.IfNetwork._d_PoleZeroFilter, _0_Fissures.IfNetwork._tc_PoleZeroFilter)
del PoleZeroFilter

# struct ListFilter
_0_Fissures.IfNetwork.ListFilter = omniORB.newEmptyClass()
class ListFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ListFilter:1.0"

    def __init__(self, frequency, frequency_unit, amplitude, amplitude_error, phase, phase_unit, phase_error):
        self.frequency = frequency
        self.frequency_unit = frequency_unit
        self.amplitude = amplitude
        self.amplitude_error = amplitude_error
        self.phase = phase
        self.phase_unit = phase_unit
        self.phase_error = phase_error

_0_Fissures.IfNetwork.ListFilter = ListFilter
_0_Fissures.IfNetwork._d_ListFilter  = (omniORB.tcInternal.tv_struct, ListFilter, ListFilter._NP_RepositoryId, "ListFilter", "frequency", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0), "frequency_unit", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], "amplitude", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0), "amplitude_error", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0), "phase", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0), "phase_unit", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], "phase_error", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0_Fissures.IfNetwork._tc_ListFilter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ListFilter)
omniORB.registerType(ListFilter._NP_RepositoryId, _0_Fissures.IfNetwork._d_ListFilter, _0_Fissures.IfNetwork._tc_ListFilter)
del ListFilter

# union Filter
_0_Fissures.IfNetwork.Filter = omniORB.newEmptyClass()
class Filter (omniORB.Union):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Filter:1.0"

_0_Fissures.IfNetwork.Filter = Filter

Filter._m_to_d = {"coeff_filter": _0_Fissures.IfNetwork.COEFFICIENT, "pole_zero_filter": _0_Fissures.IfNetwork.POLEZERO, "list_filter": _0_Fissures.IfNetwork.LIST}
Filter._d_to_m = {_0_Fissures.IfNetwork.COEFFICIENT: "coeff_filter", _0_Fissures.IfNetwork.POLEZERO: "pole_zero_filter", _0_Fissures.IfNetwork.LIST: "list_filter"}
Filter._def_m  = None
Filter._def_d  = None

_0_Fissures.IfNetwork._m_Filter  = ((_0_Fissures.IfNetwork.COEFFICIENT, "coeff_filter", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/CoefficientFilter:1.0"]), (_0_Fissures.IfNetwork.POLEZERO, "pole_zero_filter", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/PoleZeroFilter:1.0"]), (_0_Fissures.IfNetwork.LIST, "list_filter", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ListFilter:1.0"]),)
_0_Fissures.IfNetwork._d_Filter  = (omniORB.tcInternal.tv_union, Filter, Filter._NP_RepositoryId, "Filter", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/FilterType:1.0"], -1, _0_Fissures.IfNetwork._m_Filter, None, {_0_Fissures.IfNetwork.COEFFICIENT: _0_Fissures.IfNetwork._m_Filter[0], _0_Fissures.IfNetwork.POLEZERO: _0_Fissures.IfNetwork._m_Filter[1], _0_Fissures.IfNetwork.LIST: _0_Fissures.IfNetwork._m_Filter[2]})
_0_Fissures.IfNetwork._tc_Filter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Filter)
omniORB.registerType(Filter._NP_RepositoryId, _0_Fissures.IfNetwork._d_Filter, _0_Fissures.IfNetwork._tc_Filter)
del Filter

# typedef ... FilterSeq
class FilterSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/FilterSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.FilterSeq = FilterSeq
_0_Fissures.IfNetwork._d_FilterSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Filter:1.0"], 0)
_0_Fissures.IfNetwork._ad_FilterSeq = (omniORB.tcInternal.tv_alias, FilterSeq._NP_RepositoryId, "FilterSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Filter:1.0"], 0))
_0_Fissures.IfNetwork._tc_FilterSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_FilterSeq)
omniORB.registerType(FilterSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_FilterSeq, _0_Fissures.IfNetwork._tc_FilterSeq)
del FilterSeq

# struct Gain
_0_Fissures.IfNetwork.Gain = omniORB.newEmptyClass()
class Gain (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Gain:1.0"

    def __init__(self, gain_factor, frequency):
        self.gain_factor = gain_factor
        self.frequency = frequency

_0_Fissures.IfNetwork.Gain = Gain
_0_Fissures.IfNetwork._d_Gain  = (omniORB.tcInternal.tv_struct, Gain, Gain._NP_RepositoryId, "Gain", "gain_factor", omniORB.tcInternal.tv_float, "frequency", omniORB.tcInternal.tv_float)
_0_Fissures.IfNetwork._tc_Gain = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Gain)
omniORB.registerType(Gain._NP_RepositoryId, _0_Fissures.IfNetwork._d_Gain, _0_Fissures.IfNetwork._tc_Gain)
del Gain

# struct Decimation
_0_Fissures.IfNetwork.Decimation = omniORB.newEmptyClass()
class Decimation (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Decimation:1.0"

    def __init__(self, input_rate, factor, offset, estimated_delay, correction_applied):
        self.input_rate = input_rate
        self.factor = factor
        self.offset = offset
        self.estimated_delay = estimated_delay
        self.correction_applied = correction_applied

_0_Fissures.IfNetwork.Decimation = Decimation
_0_Fissures.IfNetwork._d_Decimation  = (omniORB.tcInternal.tv_struct, Decimation, Decimation._NP_RepositoryId, "Decimation", "input_rate", omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], "factor", omniORB.tcInternal.tv_long, "offset", omniORB.tcInternal.tv_long, "estimated_delay", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], "correction_applied", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"])
_0_Fissures.IfNetwork._tc_Decimation = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Decimation)
omniORB.registerType(Decimation._NP_RepositoryId, _0_Fissures.IfNetwork._d_Decimation, _0_Fissures.IfNetwork._tc_Decimation)
del Decimation

# typedef ... DecimationOpt
class DecimationOpt:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/DecimationOpt:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.DecimationOpt = DecimationOpt
_0_Fissures.IfNetwork._d_DecimationOpt  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Decimation:1.0"], 1)
_0_Fissures.IfNetwork._ad_DecimationOpt = (omniORB.tcInternal.tv_alias, DecimationOpt._NP_RepositoryId, "DecimationOpt", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Decimation:1.0"], 1))
_0_Fissures.IfNetwork._tc_DecimationOpt = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_DecimationOpt)
omniORB.registerType(DecimationOpt._NP_RepositoryId, _0_Fissures.IfNetwork._ad_DecimationOpt, _0_Fissures.IfNetwork._tc_DecimationOpt)
del DecimationOpt

# struct Normalization
_0_Fissures.IfNetwork.Normalization = omniORB.newEmptyClass()
class Normalization (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Normalization:1.0"

    def __init__(self, ao_normalization_factor, normalization_freq):
        self.ao_normalization_factor = ao_normalization_factor
        self.normalization_freq = normalization_freq

_0_Fissures.IfNetwork.Normalization = Normalization
_0_Fissures.IfNetwork._d_Normalization  = (omniORB.tcInternal.tv_struct, Normalization, Normalization._NP_RepositoryId, "Normalization", "ao_normalization_factor", omniORB.tcInternal.tv_float, "normalization_freq", omniORB.tcInternal.tv_float)
_0_Fissures.IfNetwork._tc_Normalization = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Normalization)
omniORB.registerType(Normalization._NP_RepositoryId, _0_Fissures.IfNetwork._d_Normalization, _0_Fissures.IfNetwork._tc_Normalization)
del Normalization

# typedef ... NormalizationOpt
class NormalizationOpt:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NormalizationOpt:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.NormalizationOpt = NormalizationOpt
_0_Fissures.IfNetwork._d_NormalizationOpt  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Normalization:1.0"], 1)
_0_Fissures.IfNetwork._ad_NormalizationOpt = (omniORB.tcInternal.tv_alias, NormalizationOpt._NP_RepositoryId, "NormalizationOpt", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Normalization:1.0"], 1))
_0_Fissures.IfNetwork._tc_NormalizationOpt = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_NormalizationOpt)
omniORB.registerType(NormalizationOpt._NP_RepositoryId, _0_Fissures.IfNetwork._ad_NormalizationOpt, _0_Fissures.IfNetwork._tc_NormalizationOpt)
del NormalizationOpt

# struct Stage
_0_Fissures.IfNetwork.Stage = omniORB.newEmptyClass()
class Stage (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Stage:1.0"

    def __init__(self, type, input_units, output_units, the_normalization, the_gain, the_decimation, filters):
        self.type = type
        self.input_units = input_units
        self.output_units = output_units
        self.the_normalization = the_normalization
        self.the_gain = the_gain
        self.the_decimation = the_decimation
        self.filters = filters

_0_Fissures.IfNetwork.Stage = Stage
_0_Fissures.IfNetwork._d_Stage  = (omniORB.tcInternal.tv_struct, Stage, Stage._NP_RepositoryId, "Stage", "type", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TransferType:1.0"], "input_units", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], "output_units", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], "the_normalization", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NormalizationOpt:1.0"], "the_gain", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Gain:1.0"], "the_decimation", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/DecimationOpt:1.0"], "filters", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/FilterSeq:1.0"])
_0_Fissures.IfNetwork._tc_Stage = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Stage)
omniORB.registerType(Stage._NP_RepositoryId, _0_Fissures.IfNetwork._d_Stage, _0_Fissures.IfNetwork._tc_Stage)
del Stage

# typedef ... StageSeq
class StageSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/StageSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.StageSeq = StageSeq
_0_Fissures.IfNetwork._d_StageSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Stage:1.0"], 0)
_0_Fissures.IfNetwork._ad_StageSeq = (omniORB.tcInternal.tv_alias, StageSeq._NP_RepositoryId, "StageSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Stage:1.0"], 0))
_0_Fissures.IfNetwork._tc_StageSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_StageSeq)
omniORB.registerType(StageSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_StageSeq, _0_Fissures.IfNetwork._tc_StageSeq)
del StageSeq

# struct Sensitivity
_0_Fissures.IfNetwork.Sensitivity = omniORB.newEmptyClass()
class Sensitivity (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Sensitivity:1.0"

    def __init__(self, sensitivity_factor, frequency):
        self.sensitivity_factor = sensitivity_factor
        self.frequency = frequency

_0_Fissures.IfNetwork.Sensitivity = Sensitivity
_0_Fissures.IfNetwork._d_Sensitivity  = (omniORB.tcInternal.tv_struct, Sensitivity, Sensitivity._NP_RepositoryId, "Sensitivity", "sensitivity_factor", omniORB.tcInternal.tv_float, "frequency", omniORB.tcInternal.tv_float)
_0_Fissures.IfNetwork._tc_Sensitivity = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Sensitivity)
omniORB.registerType(Sensitivity._NP_RepositoryId, _0_Fissures.IfNetwork._d_Sensitivity, _0_Fissures.IfNetwork._tc_Sensitivity)
del Sensitivity

# struct Response
_0_Fissures.IfNetwork.Response = omniORB.newEmptyClass()
class Response (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Response:1.0"

    def __init__(self, the_sensitivity, stages):
        self.the_sensitivity = the_sensitivity
        self.stages = stages

_0_Fissures.IfNetwork.Response = Response
_0_Fissures.IfNetwork._d_Response  = (omniORB.tcInternal.tv_struct, Response, Response._NP_RepositoryId, "Response", "the_sensitivity", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Sensitivity:1.0"], "stages", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StageSeq:1.0"])
_0_Fissures.IfNetwork._tc_Response = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Response)
omniORB.registerType(Response._NP_RepositoryId, _0_Fissures.IfNetwork._d_Response, _0_Fissures.IfNetwork._tc_Response)
del Response

# typedef ... HardwareId
class HardwareId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/HardwareId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.HardwareId = HardwareId
_0_Fissures.IfNetwork._d_HardwareId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfNetwork._ad_HardwareId = (omniORB.tcInternal.tv_alias, HardwareId._NP_RepositoryId, "HardwareId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfNetwork._tc_HardwareId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_HardwareId)
omniORB.registerType(HardwareId._NP_RepositoryId, _0_Fissures.IfNetwork._ad_HardwareId, _0_Fissures.IfNetwork._tc_HardwareId)
del HardwareId

# valuetype SeismicHardware
_0_Fissures.IfNetwork._d_SeismicHardware = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/SeismicHardware:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SeismicHardware:1.0"] = _0_Fissures.IfNetwork._d_SeismicHardware
_0_Fissures.IfNetwork.SeismicHardware = omniORB.newEmptyClass()

class SeismicHardware (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/SeismicHardware:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 4:
                raise TypeError("SeismicHardware() takes 4 arguments "
                                "(%d given)" % len(args))
            self.id_number = args[0]
            self.manufacturer = args[1]
            self.serial_number = args[2]
            self.model = args[3]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(SeismicHardware._NP_RepositoryId, SeismicHardware)

_0_Fissures.IfNetwork.SeismicHardware = SeismicHardware
_0_Fissures.IfNetwork._d_SeismicHardware  = (omniORB.tcInternal.tv_value, SeismicHardware, SeismicHardware._NP_RepositoryId, "SeismicHardware", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id_number", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER, "manufacturer", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "serial_number", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER, "model", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_SeismicHardware = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_SeismicHardware)
omniORB.registerType(SeismicHardware._NP_RepositoryId, _0_Fissures.IfNetwork._d_SeismicHardware, _0_Fissures.IfNetwork._tc_SeismicHardware)
del SeismicHardware


# valuetype Sensor
_0_Fissures.IfNetwork._d_Sensor = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Sensor:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Sensor:1.0"] = _0_Fissures.IfNetwork._d_Sensor
_0_Fissures.IfNetwork.Sensor = omniORB.newEmptyClass()

class Sensor (_0_Fissures.IfNetwork.SeismicHardware):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Sensor:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 6:
                raise TypeError("Sensor() takes 6 arguments "
                                "(%d given)" % len(args))
            self.id_number = args[0]
            self.manufacturer = args[1]
            self.serial_number = args[2]
            self.model = args[3]
            self.nominal_high_freq = args[4]
            self.nominal_low_freq = args[5]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Sensor._NP_RepositoryId, Sensor)

_0_Fissures.IfNetwork.Sensor = Sensor
_0_Fissures.IfNetwork._d_Sensor  = (omniORB.tcInternal.tv_value, Sensor, Sensor._NP_RepositoryId, "Sensor", _0_CORBA.VM_NONE, None, _0_Fissures.IfNetwork._d_SeismicHardware, "nominal_high_freq", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "nominal_low_freq", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Sensor = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Sensor)
omniORB.registerType(Sensor._NP_RepositoryId, _0_Fissures.IfNetwork._d_Sensor, _0_Fissures.IfNetwork._tc_Sensor)
del Sensor


# enum RecordingStyle
_0_Fissures.IfNetwork.CONTINUOUS = omniORB.EnumItem("CONTINUOUS", 0)
_0_Fissures.IfNetwork.TRIGGERED = omniORB.EnumItem("TRIGGERED", 1)
_0_Fissures.IfNetwork.OTHER = omniORB.EnumItem("OTHER", 2)
_0_Fissures.IfNetwork.UNKNOWN = omniORB.EnumItem("UNKNOWN", 3)
_0_Fissures.IfNetwork.RecordingStyle = omniORB.Enum("IDL:iris.edu/Fissures/IfNetwork/RecordingStyle:1.0", (_0_Fissures.IfNetwork.CONTINUOUS, _0_Fissures.IfNetwork.TRIGGERED, _0_Fissures.IfNetwork.OTHER, _0_Fissures.IfNetwork.UNKNOWN,))

_0_Fissures.IfNetwork._d_RecordingStyle  = (omniORB.tcInternal.tv_enum, _0_Fissures.IfNetwork.RecordingStyle._NP_RepositoryId, "RecordingStyle", _0_Fissures.IfNetwork.RecordingStyle._items)
_0_Fissures.IfNetwork._tc_RecordingStyle = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_RecordingStyle)
omniORB.registerType(_0_Fissures.IfNetwork.RecordingStyle._NP_RepositoryId, _0_Fissures.IfNetwork._d_RecordingStyle, _0_Fissures.IfNetwork._tc_RecordingStyle)

# valuetype DataAcqSys
_0_Fissures.IfNetwork._d_DataAcqSys = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/DataAcqSys:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/DataAcqSys:1.0"] = _0_Fissures.IfNetwork._d_DataAcqSys
_0_Fissures.IfNetwork.DataAcqSys = omniORB.newEmptyClass()

class DataAcqSys (_0_Fissures.IfNetwork.SeismicHardware):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/DataAcqSys:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 5:
                raise TypeError("DataAcqSys() takes 5 arguments "
                                "(%d given)" % len(args))
            self.id_number = args[0]
            self.manufacturer = args[1]
            self.serial_number = args[2]
            self.model = args[3]
            self.style = args[4]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(DataAcqSys._NP_RepositoryId, DataAcqSys)

_0_Fissures.IfNetwork.DataAcqSys = DataAcqSys
_0_Fissures.IfNetwork._d_DataAcqSys  = (omniORB.tcInternal.tv_value, DataAcqSys, DataAcqSys._NP_RepositoryId, "DataAcqSys", _0_CORBA.VM_NONE, None, _0_Fissures.IfNetwork._d_SeismicHardware, "style", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/RecordingStyle:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_DataAcqSys = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_DataAcqSys)
omniORB.registerType(DataAcqSys._NP_RepositoryId, _0_Fissures.IfNetwork._d_DataAcqSys, _0_Fissures.IfNetwork._tc_DataAcqSys)
del DataAcqSys


# valuetype Clock
_0_Fissures.IfNetwork._d_Clock = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Clock:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Clock:1.0"] = _0_Fissures.IfNetwork._d_Clock
_0_Fissures.IfNetwork.Clock = omniORB.newEmptyClass()

class Clock (_0_Fissures.IfNetwork.SeismicHardware):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Clock:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 5:
                raise TypeError("Clock() takes 5 arguments "
                                "(%d given)" % len(args))
            self.id_number = args[0]
            self.manufacturer = args[1]
            self.serial_number = args[2]
            self.model = args[3]
            self.type = args[4]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Clock._NP_RepositoryId, Clock)

_0_Fissures.IfNetwork.Clock = Clock
_0_Fissures.IfNetwork._d_Clock  = (omniORB.tcInternal.tv_value, Clock, Clock._NP_RepositoryId, "Clock", _0_CORBA.VM_NONE, None, _0_Fissures.IfNetwork._d_SeismicHardware, "type", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ClockType:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Clock = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Clock)
omniORB.registerType(Clock._NP_RepositoryId, _0_Fissures.IfNetwork._d_Clock, _0_Fissures.IfNetwork._tc_Clock)
del Clock


# valuetype TimeCorrection
_0_Fissures.IfNetwork._d_TimeCorrection = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/TimeCorrection:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TimeCorrection:1.0"] = _0_Fissures.IfNetwork._d_TimeCorrection
_0_Fissures.IfNetwork.TimeCorrection = omniORB.newEmptyClass()

class TimeCorrection (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/TimeCorrection:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 4:
                raise TypeError("TimeCorrection() takes 4 arguments "
                                "(%d given)" % len(args))
            self.effective_time = args[0]
            self.begin_offset = args[1]
            self.end_offset = args[2]
            self.who = args[3]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(TimeCorrection._NP_RepositoryId, TimeCorrection)

_0_Fissures.IfNetwork.TimeCorrection = TimeCorrection
_0_Fissures.IfNetwork._d_TimeCorrection  = (omniORB.tcInternal.tv_value, TimeCorrection, TimeCorrection._NP_RepositoryId, "TimeCorrection", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "effective_time", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], _0_CORBA.PUBLIC_MEMBER, "begin_offset", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], _0_CORBA.PUBLIC_MEMBER, "end_offset", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], _0_CORBA.PUBLIC_MEMBER, "who", (omniORB.tcInternal.tv_string,0), _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_TimeCorrection = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_TimeCorrection)
omniORB.registerType(TimeCorrection._NP_RepositoryId, _0_Fissures.IfNetwork._d_TimeCorrection, _0_Fissures.IfNetwork._tc_TimeCorrection)
del TimeCorrection


# valuetype Calibration
_0_Fissures.IfNetwork._d_Calibration = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Calibration:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Calibration:1.0"] = _0_Fissures.IfNetwork._d_Calibration
_0_Fissures.IfNetwork.Calibration = omniORB.newEmptyClass()

class Calibration (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Calibration:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 3:
                raise TypeError("Calibration() takes 3 arguments "
                                "(%d given)" % len(args))
            self.frequency = args[0]
            self.sensitivity = args[1]
            self.when = args[2]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Calibration._NP_RepositoryId, Calibration)

_0_Fissures.IfNetwork.Calibration = Calibration
_0_Fissures.IfNetwork._d_Calibration  = (omniORB.tcInternal.tv_value, Calibration, Calibration._NP_RepositoryId, "Calibration", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "frequency", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "sensitivity", omniORB.tcInternal.tv_float, _0_CORBA.PUBLIC_MEMBER, "when", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Calibration = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Calibration)
omniORB.registerType(Calibration._NP_RepositoryId, _0_Fissures.IfNetwork._d_Calibration, _0_Fissures.IfNetwork._tc_Calibration)
del Calibration


# typedef ... CalibrationSeq
class CalibrationSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/CalibrationSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.CalibrationSeq = CalibrationSeq
_0_Fissures.IfNetwork._d_CalibrationSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Calibration:1.0"], 0)
_0_Fissures.IfNetwork._ad_CalibrationSeq = (omniORB.tcInternal.tv_alias, CalibrationSeq._NP_RepositoryId, "CalibrationSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Calibration:1.0"], 0))
_0_Fissures.IfNetwork._tc_CalibrationSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_CalibrationSeq)
omniORB.registerType(CalibrationSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_CalibrationSeq, _0_Fissures.IfNetwork._tc_CalibrationSeq)
del CalibrationSeq

# typedef ... TimeCorrectionSeq
class TimeCorrectionSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/TimeCorrectionSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfNetwork.TimeCorrectionSeq = TimeCorrectionSeq
_0_Fissures.IfNetwork._d_TimeCorrectionSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TimeCorrection:1.0"], 0)
_0_Fissures.IfNetwork._ad_TimeCorrectionSeq = (omniORB.tcInternal.tv_alias, TimeCorrectionSeq._NP_RepositoryId, "TimeCorrectionSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TimeCorrection:1.0"], 0))
_0_Fissures.IfNetwork._tc_TimeCorrectionSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._ad_TimeCorrectionSeq)
omniORB.registerType(TimeCorrectionSeq._NP_RepositoryId, _0_Fissures.IfNetwork._ad_TimeCorrectionSeq, _0_Fissures.IfNetwork._tc_TimeCorrectionSeq)
del TimeCorrectionSeq

# valuetype Instrumentation
_0_Fissures.IfNetwork._d_Instrumentation = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/Instrumentation:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Instrumentation:1.0"] = _0_Fissures.IfNetwork._d_Instrumentation
_0_Fissures.IfNetwork.Instrumentation = omniORB.newEmptyClass()

class Instrumentation (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/Instrumentation:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 5:
                raise TypeError("Instrumentation() takes 5 arguments "
                                "(%d given)" % len(args))
            self.the_response = args[0]
            self.effective_time = args[1]
            self.the_clock = args[2]
            self.the_sensor = args[3]
            self.das = args[4]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(Instrumentation._NP_RepositoryId, Instrumentation)

_0_Fissures.IfNetwork.Instrumentation = Instrumentation
_0_Fissures.IfNetwork._d_Instrumentation  = (omniORB.tcInternal.tv_value, Instrumentation, Instrumentation._NP_RepositoryId, "Instrumentation", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "the_response", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Response:1.0"], _0_CORBA.PUBLIC_MEMBER, "effective_time", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"], _0_CORBA.PUBLIC_MEMBER, "the_clock", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Clock:1.0"], _0_CORBA.PUBLIC_MEMBER, "the_sensor", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Sensor:1.0"], _0_CORBA.PUBLIC_MEMBER, "das", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/DataAcqSys:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_Instrumentation = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Instrumentation)
omniORB.registerType(Instrumentation._NP_RepositoryId, _0_Fissures.IfNetwork._d_Instrumentation, _0_Fissures.IfNetwork._tc_Instrumentation)
del Instrumentation


# valuetype SamplingRange
_0_Fissures.IfNetwork._d_SamplingRange = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/SamplingRange:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SamplingRange:1.0"] = _0_Fissures.IfNetwork._d_SamplingRange
_0_Fissures.IfNetwork.SamplingRange = omniORB.newEmptyClass()

class SamplingRange (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/SamplingRange:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 2:
                raise TypeError("SamplingRange() takes 2 arguments "
                                "(%d given)" % len(args))
            self.min = args[0]
            self.max = args[1]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(SamplingRange._NP_RepositoryId, SamplingRange)

_0_Fissures.IfNetwork.SamplingRange = SamplingRange
_0_Fissures.IfNetwork._d_SamplingRange  = (omniORB.tcInternal.tv_value, SamplingRange, SamplingRange._NP_RepositoryId, "SamplingRange", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "min", omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], _0_CORBA.PUBLIC_MEMBER, "max", omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_SamplingRange = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_SamplingRange)
omniORB.registerType(SamplingRange._NP_RepositoryId, _0_Fissures.IfNetwork._d_SamplingRange, _0_Fissures.IfNetwork._tc_SamplingRange)
del SamplingRange


# valuetype OrientationRange
_0_Fissures.IfNetwork._d_OrientationRange = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfNetwork/OrientationRange:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/OrientationRange:1.0"] = _0_Fissures.IfNetwork._d_OrientationRange
_0_Fissures.IfNetwork.OrientationRange = omniORB.newEmptyClass()

class OrientationRange (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/OrientationRange:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 2:
                raise TypeError("OrientationRange() takes 2 arguments "
                                "(%d given)" % len(args))
            self.center = args[0]
            self.angular_distance = args[1]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(OrientationRange._NP_RepositoryId, OrientationRange)

_0_Fissures.IfNetwork.OrientationRange = OrientationRange
_0_Fissures.IfNetwork._d_OrientationRange  = (omniORB.tcInternal.tv_value, OrientationRange, OrientationRange._NP_RepositoryId, "OrientationRange", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "center", omniORB.typeMapping["IDL:iris.edu/Fissures/Orientation:1.0"], _0_CORBA.PUBLIC_MEMBER, "angular_distance", omniORB.typeMapping["IDL:iris.edu/Fissures/Quantity:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfNetwork._tc_OrientationRange = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_OrientationRange)
omniORB.registerType(OrientationRange._NP_RepositoryId, _0_Fissures.IfNetwork._d_OrientationRange, _0_Fissures.IfNetwork._tc_OrientationRange)
del OrientationRange


# exception StationNotFound
_0_Fissures.IfNetwork.StationNotFound = omniORB.newEmptyClass()
class StationNotFound (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/StationNotFound:1.0"

    def __init__(self, station):
        CORBA.UserException.__init__(self, station)
        self.station = station

_0_Fissures.IfNetwork.StationNotFound = StationNotFound
_0_Fissures.IfNetwork._d_StationNotFound  = (omniORB.tcInternal.tv_except, StationNotFound, StationNotFound._NP_RepositoryId, "StationNotFound", "station", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"])
_0_Fissures.IfNetwork._tc_StationNotFound = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_StationNotFound)
omniORB.registerType(StationNotFound._NP_RepositoryId, _0_Fissures.IfNetwork._d_StationNotFound, _0_Fissures.IfNetwork._tc_StationNotFound)
del StationNotFound

# exception SiteNotFound
_0_Fissures.IfNetwork.SiteNotFound = omniORB.newEmptyClass()
class SiteNotFound (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/SiteNotFound:1.0"

    def __init__(self, site):
        CORBA.UserException.__init__(self, site)
        self.site = site

_0_Fissures.IfNetwork.SiteNotFound = SiteNotFound
_0_Fissures.IfNetwork._d_SiteNotFound  = (omniORB.tcInternal.tv_except, SiteNotFound, SiteNotFound._NP_RepositoryId, "SiteNotFound", "site", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"])
_0_Fissures.IfNetwork._tc_SiteNotFound = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_SiteNotFound)
omniORB.registerType(SiteNotFound._NP_RepositoryId, _0_Fissures.IfNetwork._d_SiteNotFound, _0_Fissures.IfNetwork._tc_SiteNotFound)
del SiteNotFound

# exception DuplicateSiteId
_0_Fissures.IfNetwork.DuplicateSiteId = omniORB.newEmptyClass()
class DuplicateSiteId (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/DuplicateSiteId:1.0"

    def __init__(self, site):
        CORBA.UserException.__init__(self, site)
        self.site = site

_0_Fissures.IfNetwork.DuplicateSiteId = DuplicateSiteId
_0_Fissures.IfNetwork._d_DuplicateSiteId  = (omniORB.tcInternal.tv_except, DuplicateSiteId, DuplicateSiteId._NP_RepositoryId, "DuplicateSiteId", "site", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"])
_0_Fissures.IfNetwork._tc_DuplicateSiteId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_DuplicateSiteId)
omniORB.registerType(DuplicateSiteId._NP_RepositoryId, _0_Fissures.IfNetwork._d_DuplicateSiteId, _0_Fissures.IfNetwork._tc_DuplicateSiteId)
del DuplicateSiteId

# exception ChannelNotFound
_0_Fissures.IfNetwork.ChannelNotFound = omniORB.newEmptyClass()
class ChannelNotFound (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ChannelNotFound:1.0"

    def __init__(self, channel):
        CORBA.UserException.__init__(self, channel)
        self.channel = channel

_0_Fissures.IfNetwork.ChannelNotFound = ChannelNotFound
_0_Fissures.IfNetwork._d_ChannelNotFound  = (omniORB.tcInternal.tv_except, ChannelNotFound, ChannelNotFound._NP_RepositoryId, "ChannelNotFound", "channel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"])
_0_Fissures.IfNetwork._tc_ChannelNotFound = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ChannelNotFound)
omniORB.registerType(ChannelNotFound._NP_RepositoryId, _0_Fissures.IfNetwork._d_ChannelNotFound, _0_Fissures.IfNetwork._tc_ChannelNotFound)
del ChannelNotFound

# exception DuplicateChannelId
_0_Fissures.IfNetwork.DuplicateChannelId = omniORB.newEmptyClass()
class DuplicateChannelId (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/DuplicateChannelId:1.0"

    def __init__(self, channel):
        CORBA.UserException.__init__(self, channel)
        self.channel = channel

_0_Fissures.IfNetwork.DuplicateChannelId = DuplicateChannelId
_0_Fissures.IfNetwork._d_DuplicateChannelId  = (omniORB.tcInternal.tv_except, DuplicateChannelId, DuplicateChannelId._NP_RepositoryId, "DuplicateChannelId", "channel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"])
_0_Fissures.IfNetwork._tc_DuplicateChannelId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_DuplicateChannelId)
omniORB.registerType(DuplicateChannelId._NP_RepositoryId, _0_Fissures.IfNetwork._d_DuplicateChannelId, _0_Fissures.IfNetwork._tc_DuplicateChannelId)
del DuplicateChannelId

# exception DuplicateStationId
_0_Fissures.IfNetwork.DuplicateStationId = omniORB.newEmptyClass()
class DuplicateStationId (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/DuplicateStationId:1.0"

    def __init__(self, station):
        CORBA.UserException.__init__(self, station)
        self.station = station

_0_Fissures.IfNetwork.DuplicateStationId = DuplicateStationId
_0_Fissures.IfNetwork._d_DuplicateStationId  = (omniORB.tcInternal.tv_except, DuplicateStationId, DuplicateStationId._NP_RepositoryId, "DuplicateStationId", "station", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"])
_0_Fissures.IfNetwork._tc_DuplicateStationId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_DuplicateStationId)
omniORB.registerType(DuplicateStationId._NP_RepositoryId, _0_Fissures.IfNetwork._d_DuplicateStationId, _0_Fissures.IfNetwork._tc_DuplicateStationId)
del DuplicateStationId

# exception NetworkNotFound
_0_Fissures.IfNetwork.NetworkNotFound = omniORB.newEmptyClass()
class NetworkNotFound (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/NetworkNotFound:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_Fissures.IfNetwork.NetworkNotFound = NetworkNotFound
_0_Fissures.IfNetwork._d_NetworkNotFound  = (omniORB.tcInternal.tv_except, NetworkNotFound, NetworkNotFound._NP_RepositoryId, "NetworkNotFound")
_0_Fissures.IfNetwork._tc_NetworkNotFound = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkNotFound)
omniORB.registerType(NetworkNotFound._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkNotFound, _0_Fissures.IfNetwork._tc_NetworkNotFound)
del NetworkNotFound

# exception ConcreteNetworkNotAvailable
_0_Fissures.IfNetwork.ConcreteNetworkNotAvailable = omniORB.newEmptyClass()
class ConcreteNetworkNotAvailable (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfNetwork/ConcreteNetworkNotAvailable:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_Fissures.IfNetwork.ConcreteNetworkNotAvailable = ConcreteNetworkNotAvailable
_0_Fissures.IfNetwork._d_ConcreteNetworkNotAvailable  = (omniORB.tcInternal.tv_except, ConcreteNetworkNotAvailable, ConcreteNetworkNotAvailable._NP_RepositoryId, "ConcreteNetworkNotAvailable")
_0_Fissures.IfNetwork._tc_ConcreteNetworkNotAvailable = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ConcreteNetworkNotAvailable)
omniORB.registerType(ConcreteNetworkNotAvailable._NP_RepositoryId, _0_Fissures.IfNetwork._d_ConcreteNetworkNotAvailable, _0_Fissures.IfNetwork._tc_ConcreteNetworkNotAvailable)
del ConcreteNetworkNotAvailable

# interface ChannelIdIter
_0_Fissures.IfNetwork._d_ChannelIdIter = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/ChannelIdIter:1.0", "ChannelIdIter")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdIter:1.0"] = _0_Fissures.IfNetwork._d_ChannelIdIter
_0_Fissures.IfNetwork.ChannelIdIter = omniORB.newEmptyClass()
class ChannelIdIter :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_ChannelIdIter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.ChannelIdIter = ChannelIdIter
_0_Fissures.IfNetwork._tc_ChannelIdIter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ChannelIdIter)
omniORB.registerType(ChannelIdIter._NP_RepositoryId, _0_Fissures.IfNetwork._d_ChannelIdIter, _0_Fissures.IfNetwork._tc_ChannelIdIter)

# ChannelIdIter operations and attributes
ChannelIdIter._d_how_many_remain = ((), (omniORB.tcInternal.tv_long, ), None)
ChannelIdIter._d_next_n = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"]), None)
ChannelIdIter._d_destroy = ((), (), None)

# ChannelIdIter object reference
class _objref_ChannelIdIter (CORBA.Object):
    _NP_RepositoryId = ChannelIdIter._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def how_many_remain(self, *args):
        return _omnipy.invoke(self, "how_many_remain", _0_Fissures.IfNetwork.ChannelIdIter._d_how_many_remain, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_Fissures.IfNetwork.ChannelIdIter._d_next_n, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_Fissures.IfNetwork.ChannelIdIter._d_destroy, args)

    __methods__ = ["how_many_remain", "next_n", "destroy"] + CORBA.Object.__methods__

omniORB.registerObjref(ChannelIdIter._NP_RepositoryId, _objref_ChannelIdIter)
_0_Fissures.IfNetwork._objref_ChannelIdIter = _objref_ChannelIdIter
del ChannelIdIter, _objref_ChannelIdIter

# ChannelIdIter skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class ChannelIdIter (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.ChannelIdIter._NP_RepositoryId


    _omni_op_d = {"how_many_remain": _0_Fissures.IfNetwork.ChannelIdIter._d_how_many_remain, "next_n": _0_Fissures.IfNetwork.ChannelIdIter._d_next_n, "destroy": _0_Fissures.IfNetwork.ChannelIdIter._d_destroy}

ChannelIdIter._omni_skeleton = ChannelIdIter
_0_Fissures__POA.IfNetwork.ChannelIdIter = ChannelIdIter
omniORB.registerSkeleton(ChannelIdIter._NP_RepositoryId, ChannelIdIter)
del ChannelIdIter
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface ChannelGroupIter
_0_Fissures.IfNetwork._d_ChannelGroupIter = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/ChannelGroupIter:1.0", "ChannelGroupIter")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupIter:1.0"] = _0_Fissures.IfNetwork._d_ChannelGroupIter
_0_Fissures.IfNetwork.ChannelGroupIter = omniORB.newEmptyClass()
class ChannelGroupIter :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_ChannelGroupIter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.ChannelGroupIter = ChannelGroupIter
_0_Fissures.IfNetwork._tc_ChannelGroupIter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ChannelGroupIter)
omniORB.registerType(ChannelGroupIter._NP_RepositoryId, _0_Fissures.IfNetwork._d_ChannelGroupIter, _0_Fissures.IfNetwork._tc_ChannelGroupIter)

# ChannelGroupIter operations and attributes
ChannelGroupIter._d_how_many_remain = ((), (omniORB.tcInternal.tv_long, ), None)
ChannelGroupIter._d_next_n = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupSeq:1.0"]), None)
ChannelGroupIter._d_destroy = ((), (), None)

# ChannelGroupIter object reference
class _objref_ChannelGroupIter (CORBA.Object):
    _NP_RepositoryId = ChannelGroupIter._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def how_many_remain(self, *args):
        return _omnipy.invoke(self, "how_many_remain", _0_Fissures.IfNetwork.ChannelGroupIter._d_how_many_remain, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_Fissures.IfNetwork.ChannelGroupIter._d_next_n, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_Fissures.IfNetwork.ChannelGroupIter._d_destroy, args)

    __methods__ = ["how_many_remain", "next_n", "destroy"] + CORBA.Object.__methods__

omniORB.registerObjref(ChannelGroupIter._NP_RepositoryId, _objref_ChannelGroupIter)
_0_Fissures.IfNetwork._objref_ChannelGroupIter = _objref_ChannelGroupIter
del ChannelGroupIter, _objref_ChannelGroupIter

# ChannelGroupIter skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class ChannelGroupIter (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.ChannelGroupIter._NP_RepositoryId


    _omni_op_d = {"how_many_remain": _0_Fissures.IfNetwork.ChannelGroupIter._d_how_many_remain, "next_n": _0_Fissures.IfNetwork.ChannelGroupIter._d_next_n, "destroy": _0_Fissures.IfNetwork.ChannelGroupIter._d_destroy}

ChannelGroupIter._omni_skeleton = ChannelGroupIter
_0_Fissures__POA.IfNetwork.ChannelGroupIter = ChannelGroupIter
omniORB.registerSkeleton(ChannelGroupIter._NP_RepositoryId, ChannelGroupIter)
del ChannelGroupIter
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface NetworkDC
_0_Fissures.IfNetwork._d_NetworkDC = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkDC:1.0", "NetworkDC")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkDC:1.0"] = _0_Fissures.IfNetwork._d_NetworkDC
_0_Fissures.IfNetwork.NetworkDC = omniORB.newEmptyClass()
class NetworkDC :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_NetworkDC[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.NetworkDC = NetworkDC
_0_Fissures.IfNetwork._tc_NetworkDC = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkDC)
omniORB.registerType(NetworkDC._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkDC, _0_Fissures.IfNetwork._tc_NetworkDC)

# NetworkDC operations and attributes
NetworkDC._d__get_a_explorer = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0"],),None)
NetworkDC._d__get_a_finder = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkFinder:1.0"],),None)

# NetworkDC object reference
class _objref_NetworkDC (CORBA.Object):
    _NP_RepositoryId = NetworkDC._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_a_explorer(self, *args):
        return _omnipy.invoke(self, "_get_a_explorer", _0_Fissures.IfNetwork.NetworkDC._d__get_a_explorer, args)

    def _get_a_finder(self, *args):
        return _omnipy.invoke(self, "_get_a_finder", _0_Fissures.IfNetwork.NetworkDC._d__get_a_finder, args)

    __methods__ = ["_get_a_explorer", "_get_a_finder"] + CORBA.Object.__methods__

omniORB.registerObjref(NetworkDC._NP_RepositoryId, _objref_NetworkDC)
_0_Fissures.IfNetwork._objref_NetworkDC = _objref_NetworkDC
del NetworkDC, _objref_NetworkDC

# NetworkDC skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class NetworkDC (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.NetworkDC._NP_RepositoryId


    _omni_op_d = {"_get_a_explorer": _0_Fissures.IfNetwork.NetworkDC._d__get_a_explorer, "_get_a_finder": _0_Fissures.IfNetwork.NetworkDC._d__get_a_finder}

NetworkDC._omni_skeleton = NetworkDC
_0_Fissures__POA.IfNetwork.NetworkDC = NetworkDC
omniORB.registerSkeleton(NetworkDC._NP_RepositoryId, NetworkDC)
del NetworkDC
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface NetworkMgr
_0_Fissures.IfNetwork._d_NetworkMgr = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkMgr:1.0", "NetworkMgr")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkMgr:1.0"] = _0_Fissures.IfNetwork._d_NetworkMgr
_0_Fissures.IfNetwork.NetworkMgr = omniORB.newEmptyClass()
class NetworkMgr (_0_Fissures.IfNetwork.NetworkDC):
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_NetworkMgr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.NetworkMgr = NetworkMgr
_0_Fissures.IfNetwork._tc_NetworkMgr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkMgr)
omniORB.registerType(NetworkMgr._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkMgr, _0_Fissures.IfNetwork._tc_NetworkMgr)

# NetworkMgr operations and attributes
NetworkMgr._d__get_a_factory = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkFactory:1.0"],),None)

# NetworkMgr object reference
class _objref_NetworkMgr (_0_Fissures.IfNetwork._objref_NetworkDC):
    _NP_RepositoryId = NetworkMgr._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfNetwork._objref_NetworkDC.__init__(self)

    def _get_a_factory(self, *args):
        return _omnipy.invoke(self, "_get_a_factory", _0_Fissures.IfNetwork.NetworkMgr._d__get_a_factory, args)

    __methods__ = ["_get_a_factory"] + _0_Fissures.IfNetwork._objref_NetworkDC.__methods__

omniORB.registerObjref(NetworkMgr._NP_RepositoryId, _objref_NetworkMgr)
_0_Fissures.IfNetwork._objref_NetworkMgr = _objref_NetworkMgr
del NetworkMgr, _objref_NetworkMgr

# NetworkMgr skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class NetworkMgr (_0_Fissures__POA.IfNetwork.NetworkDC):
    _NP_RepositoryId = _0_Fissures.IfNetwork.NetworkMgr._NP_RepositoryId


    _omni_op_d = {"_get_a_factory": _0_Fissures.IfNetwork.NetworkMgr._d__get_a_factory}
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.NetworkDC._omni_op_d)

NetworkMgr._omni_skeleton = NetworkMgr
_0_Fissures__POA.IfNetwork.NetworkMgr = NetworkMgr
omniORB.registerSkeleton(NetworkMgr._NP_RepositoryId, NetworkMgr)
del NetworkMgr
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface NetworkExplorer
_0_Fissures.IfNetwork._d_NetworkExplorer = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0", "NetworkExplorer")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkExplorer:1.0"] = _0_Fissures.IfNetwork._d_NetworkExplorer
_0_Fissures.IfNetwork.NetworkExplorer = omniORB.newEmptyClass()
class NetworkExplorer :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_NetworkExplorer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.NetworkExplorer = NetworkExplorer
_0_Fissures.IfNetwork._tc_NetworkExplorer = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkExplorer)
omniORB.registerType(NetworkExplorer._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkExplorer, _0_Fissures.IfNetwork._tc_NetworkExplorer)

# NetworkExplorer operations and attributes
NetworkExplorer._d_locate_channels = ((omniORB.typeMapping["IDL:iris.edu/Fissures/Area:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SamplingRange:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/OrientationRange:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdIter:1.0"]), None, None, 1)
NetworkExplorer._d_locate_by_sampling = ((omniORB.typeMapping["IDL:iris.edu/Fissures/Area:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SamplingRange:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupIter:1.0"]), None, None, 1)
NetworkExplorer._d_locate_all = ((omniORB.typeMapping["IDL:iris.edu/Fissures/Area:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupIter:1.0"]), None, None, 1)
NetworkExplorer._d_retrieve_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
NetworkExplorer._d_retrieve_grouping = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound})

# NetworkExplorer object reference
class _objref_NetworkExplorer (CORBA.Object):
    _NP_RepositoryId = NetworkExplorer._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def locate_channels(self, *args):
        return _omnipy.invoke(self, "locate_channels", _0_Fissures.IfNetwork.NetworkExplorer._d_locate_channels, args)

    def locate_by_sampling(self, *args):
        return _omnipy.invoke(self, "locate_by_sampling", _0_Fissures.IfNetwork.NetworkExplorer._d_locate_by_sampling, args)

    def locate_all(self, *args):
        return _omnipy.invoke(self, "locate_all", _0_Fissures.IfNetwork.NetworkExplorer._d_locate_all, args)

    def retrieve_channel(self, *args):
        return _omnipy.invoke(self, "retrieve_channel", _0_Fissures.IfNetwork.NetworkExplorer._d_retrieve_channel, args)

    def retrieve_grouping(self, *args):
        return _omnipy.invoke(self, "retrieve_grouping", _0_Fissures.IfNetwork.NetworkExplorer._d_retrieve_grouping, args)

    __methods__ = ["locate_channels", "locate_by_sampling", "locate_all", "retrieve_channel", "retrieve_grouping"] + CORBA.Object.__methods__

omniORB.registerObjref(NetworkExplorer._NP_RepositoryId, _objref_NetworkExplorer)
_0_Fissures.IfNetwork._objref_NetworkExplorer = _objref_NetworkExplorer
del NetworkExplorer, _objref_NetworkExplorer

# NetworkExplorer skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class NetworkExplorer (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.NetworkExplorer._NP_RepositoryId


    _omni_op_d = {"locate_channels": _0_Fissures.IfNetwork.NetworkExplorer._d_locate_channels, "locate_by_sampling": _0_Fissures.IfNetwork.NetworkExplorer._d_locate_by_sampling, "locate_all": _0_Fissures.IfNetwork.NetworkExplorer._d_locate_all, "retrieve_channel": _0_Fissures.IfNetwork.NetworkExplorer._d_retrieve_channel, "retrieve_grouping": _0_Fissures.IfNetwork.NetworkExplorer._d_retrieve_grouping}

NetworkExplorer._omni_skeleton = NetworkExplorer
_0_Fissures__POA.IfNetwork.NetworkExplorer = NetworkExplorer
omniORB.registerSkeleton(NetworkExplorer._NP_RepositoryId, NetworkExplorer)
del NetworkExplorer
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface NetworkFinder
_0_Fissures.IfNetwork._d_NetworkFinder = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkFinder:1.0", "NetworkFinder")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkFinder:1.0"] = _0_Fissures.IfNetwork._d_NetworkFinder
_0_Fissures.IfNetwork.NetworkFinder = omniORB.newEmptyClass()
class NetworkFinder :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_NetworkFinder[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.NetworkFinder = NetworkFinder
_0_Fissures.IfNetwork._tc_NetworkFinder = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkFinder)
omniORB.registerType(NetworkFinder._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkFinder, _0_Fissures.IfNetwork._tc_NetworkFinder)

# NetworkFinder operations and attributes
NetworkFinder._d_retrieve_by_id = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0"], ), {_0_Fissures.IfNetwork.NetworkNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_NetworkNotFound})
NetworkFinder._d_retrieve_by_code = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkCode:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccessSeq:1.0"], ), {_0_Fissures.IfNetwork.NetworkNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_NetworkNotFound})
NetworkFinder._d_retrieve_by_name = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccessSeq:1.0"], ), {_0_Fissures.IfNetwork.NetworkNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_NetworkNotFound})
NetworkFinder._d_retrieve_all = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccessSeq:1.0"], ), None)

# NetworkFinder object reference
class _objref_NetworkFinder (CORBA.Object):
    _NP_RepositoryId = NetworkFinder._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def retrieve_by_id(self, *args):
        return _omnipy.invoke(self, "retrieve_by_id", _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_by_id, args)

    def retrieve_by_code(self, *args):
        return _omnipy.invoke(self, "retrieve_by_code", _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_by_code, args)

    def retrieve_by_name(self, *args):
        return _omnipy.invoke(self, "retrieve_by_name", _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_by_name, args)

    def retrieve_all(self, *args):
        return _omnipy.invoke(self, "retrieve_all", _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_all, args)

    __methods__ = ["retrieve_by_id", "retrieve_by_code", "retrieve_by_name", "retrieve_all"] + CORBA.Object.__methods__

omniORB.registerObjref(NetworkFinder._NP_RepositoryId, _objref_NetworkFinder)
_0_Fissures.IfNetwork._objref_NetworkFinder = _objref_NetworkFinder
del NetworkFinder, _objref_NetworkFinder

# NetworkFinder skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class NetworkFinder (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.NetworkFinder._NP_RepositoryId


    _omni_op_d = {"retrieve_by_id": _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_by_id, "retrieve_by_code": _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_by_code, "retrieve_by_name": _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_by_name, "retrieve_all": _0_Fissures.IfNetwork.NetworkFinder._d_retrieve_all}

NetworkFinder._omni_skeleton = NetworkFinder
_0_Fissures__POA.IfNetwork.NetworkFinder = NetworkFinder
omniORB.registerSkeleton(NetworkFinder._NP_RepositoryId, NetworkFinder)
del NetworkFinder
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface NetworkFactory
_0_Fissures.IfNetwork._d_NetworkFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/NetworkFactory:1.0", "NetworkFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkFactory:1.0"] = _0_Fissures.IfNetwork._d_NetworkFactory
_0_Fissures.IfNetwork.NetworkFactory = omniORB.newEmptyClass()
class NetworkFactory :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_NetworkFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.NetworkFactory = NetworkFactory
_0_Fissures.IfNetwork._tc_NetworkFactory = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkFactory)
omniORB.registerType(NetworkFactory._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkFactory, _0_Fissures.IfNetwork._tc_NetworkFactory)

# NetworkFactory operations and attributes
NetworkFactory._d_create = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Network:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
NetworkFactory._d_create_virtual = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Network:1.0"], ), None)

# NetworkFactory object reference
class _objref_NetworkFactory (CORBA.Object):
    _NP_RepositoryId = NetworkFactory._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def create(self, *args):
        return _omnipy.invoke(self, "create", _0_Fissures.IfNetwork.NetworkFactory._d_create, args)

    def create_virtual(self, *args):
        return _omnipy.invoke(self, "create_virtual", _0_Fissures.IfNetwork.NetworkFactory._d_create_virtual, args)

    __methods__ = ["create", "create_virtual"] + CORBA.Object.__methods__

omniORB.registerObjref(NetworkFactory._NP_RepositoryId, _objref_NetworkFactory)
_0_Fissures.IfNetwork._objref_NetworkFactory = _objref_NetworkFactory
del NetworkFactory, _objref_NetworkFactory

# NetworkFactory skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class NetworkFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.NetworkFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_Fissures.IfNetwork.NetworkFactory._d_create, "create_virtual": _0_Fissures.IfNetwork.NetworkFactory._d_create_virtual}

NetworkFactory._omni_skeleton = NetworkFactory
_0_Fissures__POA.IfNetwork.NetworkFactory = NetworkFactory
omniORB.registerSkeleton(NetworkFactory._NP_RepositoryId, NetworkFactory)
del NetworkFactory
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# abstract interface NetworkAccess
_0_Fissures.IfNetwork._d_NetworkAccess = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0", "NetworkAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAccess:1.0"] = _0_Fissures.IfNetwork._d_NetworkAccess
_0_Fissures.IfNetwork.NetworkAccess = omniORB.newEmptyClass()
class NetworkAccess (_0_Fissures.AuditSystemAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_NetworkAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.NetworkAccess = NetworkAccess
_0_Fissures.IfNetwork._tc_NetworkAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_NetworkAccess)
omniORB.registerType(NetworkAccess._NP_RepositoryId, _0_Fissures.IfNetwork._d_NetworkAccess, _0_Fissures.IfNetwork._tc_NetworkAccess)

# NetworkAccess operations and attributes
NetworkAccess._d_get_attributes = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/NetworkAttr:1.0"], ), None, None, 1)
NetworkAccess._d_retrieve_stations = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationSeq:1.0"], ), None, None, 1)
NetworkAccess._d_retrieve_for_station = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelSeq:1.0"], ), None, None, 1)
NetworkAccess._d_retrieve_grouping = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound})
NetworkAccess._d_retrieve_groupings = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroupSeq:1.0"], ), None)
NetworkAccess._d_retrieve_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
NetworkAccess._d_retrieve_channels_by_code = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationCode:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteCode:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelCode:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelSeq:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
NetworkAccess._d_locate_channels = ((omniORB.typeMapping["IDL:iris.edu/Fissures/Area:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SamplingRange:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/OrientationRange:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelSeq:1.0"], ), None, None, 1)
NetworkAccess._d_retrieve_instrumentation = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Instrumentation:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
NetworkAccess._d_retrieve_calibrations = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/CalibrationSeq:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound, _0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented}, None, 1)
NetworkAccess._d_retrieve_time_corrections = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/TimeRange:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TimeCorrectionSeq:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound, _0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented}, None, 1)
NetworkAccess._d_retrieve_all_channels = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdIter:1.0"]), None)
NetworkAccess._d_get_audit_trail_for_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/AuditTrail:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound, _0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented})

# NetworkAccess object reference
class _objref_NetworkAccess (_0_Fissures._objref_AuditSystemAccess):
    _NP_RepositoryId = NetworkAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_AuditSystemAccess.__init__(self)

    def get_attributes(self, *args):
        return _omnipy.invoke(self, "get_attributes", _0_Fissures.IfNetwork.NetworkAccess._d_get_attributes, args)

    def retrieve_stations(self, *args):
        return _omnipy.invoke(self, "retrieve_stations", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_stations, args)

    def retrieve_for_station(self, *args):
        return _omnipy.invoke(self, "retrieve_for_station", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_for_station, args)

    def retrieve_grouping(self, *args):
        return _omnipy.invoke(self, "retrieve_grouping", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_grouping, args)

    def retrieve_groupings(self, *args):
        return _omnipy.invoke(self, "retrieve_groupings", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_groupings, args)

    def retrieve_channel(self, *args):
        return _omnipy.invoke(self, "retrieve_channel", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_channel, args)

    def retrieve_channels_by_code(self, *args):
        return _omnipy.invoke(self, "retrieve_channels_by_code", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_channels_by_code, args)

    def locate_channels(self, *args):
        return _omnipy.invoke(self, "locate_channels", _0_Fissures.IfNetwork.NetworkAccess._d_locate_channels, args)

    def retrieve_instrumentation(self, *args):
        return _omnipy.invoke(self, "retrieve_instrumentation", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_instrumentation, args)

    def retrieve_calibrations(self, *args):
        return _omnipy.invoke(self, "retrieve_calibrations", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_calibrations, args)

    def retrieve_time_corrections(self, *args):
        return _omnipy.invoke(self, "retrieve_time_corrections", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_time_corrections, args)

    def retrieve_all_channels(self, *args):
        return _omnipy.invoke(self, "retrieve_all_channels", _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_all_channels, args)

    def get_audit_trail_for_channel(self, *args):
        return _omnipy.invoke(self, "get_audit_trail_for_channel", _0_Fissures.IfNetwork.NetworkAccess._d_get_audit_trail_for_channel, args)

    __methods__ = ["get_attributes", "retrieve_stations", "retrieve_for_station", "retrieve_grouping", "retrieve_groupings", "retrieve_channel", "retrieve_channels_by_code", "locate_channels", "retrieve_instrumentation", "retrieve_calibrations", "retrieve_time_corrections", "retrieve_all_channels", "get_audit_trail_for_channel"] + _0_Fissures._objref_AuditSystemAccess.__methods__

omniORB.registerObjref(NetworkAccess._NP_RepositoryId, _objref_NetworkAccess)
_0_Fissures.IfNetwork._objref_NetworkAccess = _objref_NetworkAccess
del NetworkAccess, _objref_NetworkAccess

# NetworkAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class NetworkAccess (_0_Fissures__POA.AuditSystemAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork.NetworkAccess._NP_RepositoryId


    _omni_op_d = {"get_attributes": _0_Fissures.IfNetwork.NetworkAccess._d_get_attributes, "retrieve_stations": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_stations, "retrieve_for_station": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_for_station, "retrieve_grouping": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_grouping, "retrieve_groupings": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_groupings, "retrieve_channel": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_channel, "retrieve_channels_by_code": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_channels_by_code, "locate_channels": _0_Fissures.IfNetwork.NetworkAccess._d_locate_channels, "retrieve_instrumentation": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_instrumentation, "retrieve_calibrations": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_calibrations, "retrieve_time_corrections": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_time_corrections, "retrieve_all_channels": _0_Fissures.IfNetwork.NetworkAccess._d_retrieve_all_channels, "get_audit_trail_for_channel": _0_Fissures.IfNetwork.NetworkAccess._d_get_audit_trail_for_channel}
    _omni_op_d.update(_0_Fissures__POA.AuditSystemAccess._omni_op_d)

NetworkAccess._omni_skeleton = NetworkAccess
_0_Fissures__POA.IfNetwork.NetworkAccess = NetworkAccess
omniORB.registerSkeleton(NetworkAccess._NP_RepositoryId, NetworkAccess)
del NetworkAccess
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface ConcreteNetworkAccess
_0_Fissures.IfNetwork._d_ConcreteNetworkAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/ConcreteNetworkAccess:1.0", "ConcreteNetworkAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ConcreteNetworkAccess:1.0"] = _0_Fissures.IfNetwork._d_ConcreteNetworkAccess
_0_Fissures.IfNetwork.ConcreteNetworkAccess = omniORB.newEmptyClass()
class ConcreteNetworkAccess (_0_Fissures.IfNetwork.NetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_ConcreteNetworkAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.ConcreteNetworkAccess = ConcreteNetworkAccess
_0_Fissures.IfNetwork._tc_ConcreteNetworkAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ConcreteNetworkAccess)
omniORB.registerType(ConcreteNetworkAccess._NP_RepositoryId, _0_Fissures.IfNetwork._d_ConcreteNetworkAccess, _0_Fissures.IfNetwork._tc_ConcreteNetworkAccess)

# ConcreteNetworkAccess operations and attributes
ConcreteNetworkAccess._d__get_a_writeable = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ConcreteNetwork:1.0"],),None)
ConcreteNetworkAccess._d_get_audit_trail_for_station = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/AuditTrail:1.0"], ), {_0_Fissures.IfNetwork.StationNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_StationNotFound, _0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented})
ConcreteNetworkAccess._d_get_audit_trail_for_site = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/AuditTrail:1.0"], ), {_0_Fissures.IfNetwork.SiteNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_SiteNotFound, _0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented})

# ConcreteNetworkAccess object reference
class _objref_ConcreteNetworkAccess (_0_Fissures.IfNetwork._objref_NetworkAccess):
    _NP_RepositoryId = ConcreteNetworkAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfNetwork._objref_NetworkAccess.__init__(self)

    def _get_a_writeable(self, *args):
        return _omnipy.invoke(self, "_get_a_writeable", _0_Fissures.IfNetwork.ConcreteNetworkAccess._d__get_a_writeable, args)

    def get_audit_trail_for_station(self, *args):
        return _omnipy.invoke(self, "get_audit_trail_for_station", _0_Fissures.IfNetwork.ConcreteNetworkAccess._d_get_audit_trail_for_station, args)

    def get_audit_trail_for_site(self, *args):
        return _omnipy.invoke(self, "get_audit_trail_for_site", _0_Fissures.IfNetwork.ConcreteNetworkAccess._d_get_audit_trail_for_site, args)

    __methods__ = ["_get_a_writeable", "get_audit_trail_for_station", "get_audit_trail_for_site"] + _0_Fissures.IfNetwork._objref_NetworkAccess.__methods__

omniORB.registerObjref(ConcreteNetworkAccess._NP_RepositoryId, _objref_ConcreteNetworkAccess)
_0_Fissures.IfNetwork._objref_ConcreteNetworkAccess = _objref_ConcreteNetworkAccess
del ConcreteNetworkAccess, _objref_ConcreteNetworkAccess

# ConcreteNetworkAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class ConcreteNetworkAccess (_0_Fissures__POA.IfNetwork.NetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork.ConcreteNetworkAccess._NP_RepositoryId


    _omni_op_d = {"_get_a_writeable": _0_Fissures.IfNetwork.ConcreteNetworkAccess._d__get_a_writeable, "get_audit_trail_for_station": _0_Fissures.IfNetwork.ConcreteNetworkAccess._d_get_audit_trail_for_station, "get_audit_trail_for_site": _0_Fissures.IfNetwork.ConcreteNetworkAccess._d_get_audit_trail_for_site}
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.NetworkAccess._omni_op_d)

ConcreteNetworkAccess._omni_skeleton = ConcreteNetworkAccess
_0_Fissures__POA.IfNetwork.ConcreteNetworkAccess = ConcreteNetworkAccess
omniORB.registerSkeleton(ConcreteNetworkAccess._NP_RepositoryId, ConcreteNetworkAccess)
del ConcreteNetworkAccess
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface VirtualNetworkAccess
_0_Fissures.IfNetwork._d_VirtualNetworkAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/VirtualNetworkAccess:1.0", "VirtualNetworkAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/VirtualNetworkAccess:1.0"] = _0_Fissures.IfNetwork._d_VirtualNetworkAccess
_0_Fissures.IfNetwork.VirtualNetworkAccess = omniORB.newEmptyClass()
class VirtualNetworkAccess (_0_Fissures.IfNetwork.NetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_VirtualNetworkAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.VirtualNetworkAccess = VirtualNetworkAccess
_0_Fissures.IfNetwork._tc_VirtualNetworkAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_VirtualNetworkAccess)
omniORB.registerType(VirtualNetworkAccess._NP_RepositoryId, _0_Fissures.IfNetwork._d_VirtualNetworkAccess, _0_Fissures.IfNetwork._tc_VirtualNetworkAccess)

# VirtualNetworkAccess operations and attributes
VirtualNetworkAccess._d__get_a_writeable = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/VirtualNetwork:1.0"],),None)
VirtualNetworkAccess._d_get_network_for_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ConcreteNetworkAccess:1.0"], ), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound, _0_Fissures.IfNetwork.ConcreteNetworkNotAvailable._NP_RepositoryId: _0_Fissures.IfNetwork._d_ConcreteNetworkNotAvailable})

# VirtualNetworkAccess object reference
class _objref_VirtualNetworkAccess (_0_Fissures.IfNetwork._objref_NetworkAccess):
    _NP_RepositoryId = VirtualNetworkAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfNetwork._objref_NetworkAccess.__init__(self)

    def _get_a_writeable(self, *args):
        return _omnipy.invoke(self, "_get_a_writeable", _0_Fissures.IfNetwork.VirtualNetworkAccess._d__get_a_writeable, args)

    def get_network_for_channel(self, *args):
        return _omnipy.invoke(self, "get_network_for_channel", _0_Fissures.IfNetwork.VirtualNetworkAccess._d_get_network_for_channel, args)

    __methods__ = ["_get_a_writeable", "get_network_for_channel"] + _0_Fissures.IfNetwork._objref_NetworkAccess.__methods__

omniORB.registerObjref(VirtualNetworkAccess._NP_RepositoryId, _objref_VirtualNetworkAccess)
_0_Fissures.IfNetwork._objref_VirtualNetworkAccess = _objref_VirtualNetworkAccess
del VirtualNetworkAccess, _objref_VirtualNetworkAccess

# VirtualNetworkAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class VirtualNetworkAccess (_0_Fissures__POA.IfNetwork.NetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork.VirtualNetworkAccess._NP_RepositoryId


    _omni_op_d = {"_get_a_writeable": _0_Fissures.IfNetwork.VirtualNetworkAccess._d__get_a_writeable, "get_network_for_channel": _0_Fissures.IfNetwork.VirtualNetworkAccess._d_get_network_for_channel}
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.NetworkAccess._omni_op_d)

VirtualNetworkAccess._omni_skeleton = VirtualNetworkAccess
_0_Fissures__POA.IfNetwork.VirtualNetworkAccess = VirtualNetworkAccess
omniORB.registerSkeleton(VirtualNetworkAccess._NP_RepositoryId, VirtualNetworkAccess)
del VirtualNetworkAccess
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# abstract interface Network
_0_Fissures.IfNetwork._d_Network = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfNetwork/Network:1.0", "Network")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Network:1.0"] = _0_Fissures.IfNetwork._d_Network
_0_Fissures.IfNetwork.Network = omniORB.newEmptyClass()
class Network :
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_Network[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.Network = Network
_0_Fissures.IfNetwork._tc_Network = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_Network)
omniORB.registerType(Network._NP_RepositoryId, _0_Fissures.IfNetwork._d_Network, _0_Fissures.IfNetwork._tc_Network)

# Network object reference
class _objref_Network (CORBA.Object):
    _NP_RepositoryId = Network._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    __methods__ = [] + CORBA.Object.__methods__

omniORB.registerObjref(Network._NP_RepositoryId, _objref_Network)
_0_Fissures.IfNetwork._objref_Network = _objref_Network
del Network, _objref_Network

# Network skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class Network (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfNetwork.Network._NP_RepositoryId


    _omni_op_d = {}

Network._omni_skeleton = Network
_0_Fissures__POA.IfNetwork.Network = Network
omniORB.registerSkeleton(Network._NP_RepositoryId, Network)
del Network
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface ConcreteNetwork
_0_Fissures.IfNetwork._d_ConcreteNetwork = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/ConcreteNetwork:1.0", "ConcreteNetwork")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ConcreteNetwork:1.0"] = _0_Fissures.IfNetwork._d_ConcreteNetwork
_0_Fissures.IfNetwork.ConcreteNetwork = omniORB.newEmptyClass()
class ConcreteNetwork (_0_Fissures.IfNetwork.Network, _0_Fissures.IfNetwork.ConcreteNetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_ConcreteNetwork[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.ConcreteNetwork = ConcreteNetwork
_0_Fissures.IfNetwork._tc_ConcreteNetwork = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_ConcreteNetwork)
omniORB.registerType(ConcreteNetwork._NP_RepositoryId, _0_Fissures.IfNetwork._d_ConcreteNetwork, _0_Fissures.IfNetwork._tc_ConcreteNetwork)

# ConcreteNetwork operations and attributes
ConcreteNetwork._d_deactivate = ((), (), None)
ConcreteNetwork._d_add_station = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.DuplicateStationId._NP_RepositoryId: _0_Fissures.IfNetwork._d_DuplicateStationId}, None, 1)
ConcreteNetwork._d_update_station = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Station:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.StationNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_StationNotFound}, None, 1)
ConcreteNetwork._d_deactivate_station = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.StationNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_StationNotFound})
ConcreteNetwork._d_delete_station = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/StationId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.StationNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_StationNotFound})
ConcreteNetwork._d_add_site = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Site:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.StationNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_StationNotFound, _0_Fissures.IfNetwork.DuplicateSiteId._NP_RepositoryId: _0_Fissures.IfNetwork._d_DuplicateSiteId}, None, 1)
ConcreteNetwork._d_udpate_site = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Site:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.SiteNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_SiteNotFound}, None, 1)
ConcreteNetwork._d_deactivate_site = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.SiteNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_SiteNotFound})
ConcreteNetwork._d_delete_site = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/SiteId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.SiteNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_SiteNotFound})
ConcreteNetwork._d_add_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Response:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/CalibrationSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Clock:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Sensor:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/DataAcqSys:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TimeCorrectionSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.SiteNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_SiteNotFound, _0_Fissures.IfNetwork.DuplicateChannelId._NP_RepositoryId: _0_Fissures.IfNetwork._d_DuplicateChannelId}, None, 1)
ConcreteNetwork._d_update_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Channel:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
ConcreteNetwork._d_deactivate_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound})
ConcreteNetwork._d_delete_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound})
ConcreteNetwork._d_update_clock = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Clock:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
ConcreteNetwork._d_update_sensor = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Sensor:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
ConcreteNetwork._d_update_response = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Response:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
ConcreteNetwork._d_update_das = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/DataAcqSys:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
ConcreteNetwork._d_add_calibration = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/Calibration:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)
ConcreteNetwork._d_add_time_correction = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/TimeCorrection:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound}, None, 1)

# ConcreteNetwork object reference
class _objref_ConcreteNetwork (_0_Fissures.IfNetwork._objref_Network, _0_Fissures.IfNetwork._objref_ConcreteNetworkAccess):
    _NP_RepositoryId = ConcreteNetwork._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfNetwork._objref_Network.__init__(self)
        _0_Fissures.IfNetwork._objref_ConcreteNetworkAccess.__init__(self)

    def deactivate(self, *args):
        return _omnipy.invoke(self, "deactivate", _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate, args)

    def add_station(self, *args):
        return _omnipy.invoke(self, "add_station", _0_Fissures.IfNetwork.ConcreteNetwork._d_add_station, args)

    def update_station(self, *args):
        return _omnipy.invoke(self, "update_station", _0_Fissures.IfNetwork.ConcreteNetwork._d_update_station, args)

    def deactivate_station(self, *args):
        return _omnipy.invoke(self, "deactivate_station", _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate_station, args)

    def delete_station(self, *args):
        return _omnipy.invoke(self, "delete_station", _0_Fissures.IfNetwork.ConcreteNetwork._d_delete_station, args)

    def add_site(self, *args):
        return _omnipy.invoke(self, "add_site", _0_Fissures.IfNetwork.ConcreteNetwork._d_add_site, args)

    def udpate_site(self, *args):
        return _omnipy.invoke(self, "udpate_site", _0_Fissures.IfNetwork.ConcreteNetwork._d_udpate_site, args)

    def deactivate_site(self, *args):
        return _omnipy.invoke(self, "deactivate_site", _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate_site, args)

    def delete_site(self, *args):
        return _omnipy.invoke(self, "delete_site", _0_Fissures.IfNetwork.ConcreteNetwork._d_delete_site, args)

    def add_channel(self, *args):
        return _omnipy.invoke(self, "add_channel", _0_Fissures.IfNetwork.ConcreteNetwork._d_add_channel, args)

    def update_channel(self, *args):
        return _omnipy.invoke(self, "update_channel", _0_Fissures.IfNetwork.ConcreteNetwork._d_update_channel, args)

    def deactivate_channel(self, *args):
        return _omnipy.invoke(self, "deactivate_channel", _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate_channel, args)

    def delete_channel(self, *args):
        return _omnipy.invoke(self, "delete_channel", _0_Fissures.IfNetwork.ConcreteNetwork._d_delete_channel, args)

    def update_clock(self, *args):
        return _omnipy.invoke(self, "update_clock", _0_Fissures.IfNetwork.ConcreteNetwork._d_update_clock, args)

    def update_sensor(self, *args):
        return _omnipy.invoke(self, "update_sensor", _0_Fissures.IfNetwork.ConcreteNetwork._d_update_sensor, args)

    def update_response(self, *args):
        return _omnipy.invoke(self, "update_response", _0_Fissures.IfNetwork.ConcreteNetwork._d_update_response, args)

    def update_das(self, *args):
        return _omnipy.invoke(self, "update_das", _0_Fissures.IfNetwork.ConcreteNetwork._d_update_das, args)

    def add_calibration(self, *args):
        return _omnipy.invoke(self, "add_calibration", _0_Fissures.IfNetwork.ConcreteNetwork._d_add_calibration, args)

    def add_time_correction(self, *args):
        return _omnipy.invoke(self, "add_time_correction", _0_Fissures.IfNetwork.ConcreteNetwork._d_add_time_correction, args)

    __methods__ = ["deactivate", "add_station", "update_station", "deactivate_station", "delete_station", "add_site", "udpate_site", "deactivate_site", "delete_site", "add_channel", "update_channel", "deactivate_channel", "delete_channel", "update_clock", "update_sensor", "update_response", "update_das", "add_calibration", "add_time_correction"] + _0_Fissures.IfNetwork._objref_Network.__methods__ + _0_Fissures.IfNetwork._objref_ConcreteNetworkAccess.__methods__

omniORB.registerObjref(ConcreteNetwork._NP_RepositoryId, _objref_ConcreteNetwork)
_0_Fissures.IfNetwork._objref_ConcreteNetwork = _objref_ConcreteNetwork
del ConcreteNetwork, _objref_ConcreteNetwork

# ConcreteNetwork skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class ConcreteNetwork (_0_Fissures__POA.IfNetwork.Network, _0_Fissures__POA.IfNetwork.ConcreteNetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork.ConcreteNetwork._NP_RepositoryId


    _omni_op_d = {"deactivate": _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate, "add_station": _0_Fissures.IfNetwork.ConcreteNetwork._d_add_station, "update_station": _0_Fissures.IfNetwork.ConcreteNetwork._d_update_station, "deactivate_station": _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate_station, "delete_station": _0_Fissures.IfNetwork.ConcreteNetwork._d_delete_station, "add_site": _0_Fissures.IfNetwork.ConcreteNetwork._d_add_site, "udpate_site": _0_Fissures.IfNetwork.ConcreteNetwork._d_udpate_site, "deactivate_site": _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate_site, "delete_site": _0_Fissures.IfNetwork.ConcreteNetwork._d_delete_site, "add_channel": _0_Fissures.IfNetwork.ConcreteNetwork._d_add_channel, "update_channel": _0_Fissures.IfNetwork.ConcreteNetwork._d_update_channel, "deactivate_channel": _0_Fissures.IfNetwork.ConcreteNetwork._d_deactivate_channel, "delete_channel": _0_Fissures.IfNetwork.ConcreteNetwork._d_delete_channel, "update_clock": _0_Fissures.IfNetwork.ConcreteNetwork._d_update_clock, "update_sensor": _0_Fissures.IfNetwork.ConcreteNetwork._d_update_sensor, "update_response": _0_Fissures.IfNetwork.ConcreteNetwork._d_update_response, "update_das": _0_Fissures.IfNetwork.ConcreteNetwork._d_update_das, "add_calibration": _0_Fissures.IfNetwork.ConcreteNetwork._d_add_calibration, "add_time_correction": _0_Fissures.IfNetwork.ConcreteNetwork._d_add_time_correction}
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.Network._omni_op_d)
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.ConcreteNetworkAccess._omni_op_d)

ConcreteNetwork._omni_skeleton = ConcreteNetwork
_0_Fissures__POA.IfNetwork.ConcreteNetwork = ConcreteNetwork
omniORB.registerSkeleton(ConcreteNetwork._NP_RepositoryId, ConcreteNetwork)
del ConcreteNetwork
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

# interface VirtualNetwork
_0_Fissures.IfNetwork._d_VirtualNetwork = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfNetwork/VirtualNetwork:1.0", "VirtualNetwork")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/VirtualNetwork:1.0"] = _0_Fissures.IfNetwork._d_VirtualNetwork
_0_Fissures.IfNetwork.VirtualNetwork = omniORB.newEmptyClass()
class VirtualNetwork (_0_Fissures.IfNetwork.Network, _0_Fissures.IfNetwork.VirtualNetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork._d_VirtualNetwork[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfNetwork.VirtualNetwork = VirtualNetwork
_0_Fissures.IfNetwork._tc_VirtualNetwork = omniORB.tcInternal.createTypeCode(_0_Fissures.IfNetwork._d_VirtualNetwork)
omniORB.registerType(VirtualNetwork._NP_RepositoryId, _0_Fissures.IfNetwork._d_VirtualNetwork, _0_Fissures.IfNetwork._tc_VirtualNetwork)

# VirtualNetwork operations and attributes
VirtualNetwork._d_add_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.DuplicateChannelId._NP_RepositoryId: _0_Fissures.IfNetwork._d_DuplicateChannelId})
VirtualNetwork._d_remove_channel = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfNetwork.ChannelNotFound._NP_RepositoryId: _0_Fissures.IfNetwork._d_ChannelNotFound})

# VirtualNetwork object reference
class _objref_VirtualNetwork (_0_Fissures.IfNetwork._objref_Network, _0_Fissures.IfNetwork._objref_VirtualNetworkAccess):
    _NP_RepositoryId = VirtualNetwork._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfNetwork._objref_Network.__init__(self)
        _0_Fissures.IfNetwork._objref_VirtualNetworkAccess.__init__(self)

    def add_channel(self, *args):
        return _omnipy.invoke(self, "add_channel", _0_Fissures.IfNetwork.VirtualNetwork._d_add_channel, args)

    def remove_channel(self, *args):
        return _omnipy.invoke(self, "remove_channel", _0_Fissures.IfNetwork.VirtualNetwork._d_remove_channel, args)

    __methods__ = ["add_channel", "remove_channel"] + _0_Fissures.IfNetwork._objref_Network.__methods__ + _0_Fissures.IfNetwork._objref_VirtualNetworkAccess.__methods__

omniORB.registerObjref(VirtualNetwork._NP_RepositoryId, _objref_VirtualNetwork)
_0_Fissures.IfNetwork._objref_VirtualNetwork = _objref_VirtualNetwork
del VirtualNetwork, _objref_VirtualNetwork

# VirtualNetwork skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfNetwork"
class VirtualNetwork (_0_Fissures__POA.IfNetwork.Network, _0_Fissures__POA.IfNetwork.VirtualNetworkAccess):
    _NP_RepositoryId = _0_Fissures.IfNetwork.VirtualNetwork._NP_RepositoryId


    _omni_op_d = {"add_channel": _0_Fissures.IfNetwork.VirtualNetwork._d_add_channel, "remove_channel": _0_Fissures.IfNetwork.VirtualNetwork._d_remove_channel}
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.Network._omni_op_d)
    _omni_op_d.update(_0_Fissures__POA.IfNetwork.VirtualNetworkAccess._omni_op_d)

VirtualNetwork._omni_skeleton = VirtualNetwork
_0_Fissures__POA.IfNetwork.VirtualNetwork = VirtualNetwork
omniORB.registerSkeleton(VirtualNetwork._NP_RepositoryId, VirtualNetwork)
del VirtualNetwork
__name__ = "obspy.fissures.idl.Fissures.IfNetwork"

#
# End of module "Fissures.IfNetwork"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"IfParameterMgr.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"IfParameterMgr.idl")


#
# Start of module "Fissures.IfParameterMgr"
#
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"
_0_Fissures.IfParameterMgr = omniORB.openModule("obspy.fissures.idl.Fissures.IfParameterMgr", r"IfParameterMgr.idl")
_0_Fissures__POA.IfParameterMgr = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfParameterMgr", r"IfParameterMgr.idl")

_0_Fissures.IfParameterMgr.VERSION = "1.0"

# typedef ... ParameterId
class ParameterId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParameterId = ParameterId
_0_Fissures.IfParameterMgr._d_ParameterId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfParameterMgr._ad_ParameterId = (omniORB.tcInternal.tv_alias, ParameterId._NP_RepositoryId, "ParameterId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfParameterMgr._tc_ParameterId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParameterId)
omniORB.registerType(ParameterId._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParameterId, _0_Fissures.IfParameterMgr._tc_ParameterId)
del ParameterId

# typedef ... ParameterName
class ParameterName:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParameterName = ParameterName
_0_Fissures.IfParameterMgr._d_ParameterName  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfParameterMgr._ad_ParameterName = (omniORB.tcInternal.tv_alias, ParameterName._NP_RepositoryId, "ParameterName", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfParameterMgr._tc_ParameterName = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParameterName)
omniORB.registerType(ParameterName._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParameterName, _0_Fissures.IfParameterMgr._tc_ParameterName)
del ParameterName

# typedef ... ParameterNameSeq
class ParameterNameSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParameterNameSeq = ParameterNameSeq
_0_Fissures.IfParameterMgr._d_ParameterNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], 0)
_0_Fissures.IfParameterMgr._ad_ParameterNameSeq = (omniORB.tcInternal.tv_alias, ParameterNameSeq._NP_RepositoryId, "ParameterNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], 0))
_0_Fissures.IfParameterMgr._tc_ParameterNameSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParameterNameSeq)
omniORB.registerType(ParameterNameSeq._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParameterNameSeq, _0_Fissures.IfParameterMgr._tc_ParameterNameSeq)
del ParameterNameSeq

# typedef ... ParmSetName
class ParmSetName:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParmSetName = ParmSetName
_0_Fissures.IfParameterMgr._d_ParmSetName  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfParameterMgr._ad_ParmSetName = (omniORB.tcInternal.tv_alias, ParmSetName._NP_RepositoryId, "ParmSetName", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfParameterMgr._tc_ParmSetName = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParmSetName)
omniORB.registerType(ParmSetName._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParmSetName, _0_Fissures.IfParameterMgr._tc_ParmSetName)
del ParmSetName

# typedef ... ParmSetNameSeq
class ParmSetNameSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParmSetNameSeq = ParmSetNameSeq
_0_Fissures.IfParameterMgr._d_ParmSetNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetName:1.0"], 0)
_0_Fissures.IfParameterMgr._ad_ParmSetNameSeq = (omniORB.tcInternal.tv_alias, ParmSetNameSeq._NP_RepositoryId, "ParmSetNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetName:1.0"], 0))
_0_Fissures.IfParameterMgr._tc_ParmSetNameSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParmSetNameSeq)
omniORB.registerType(ParmSetNameSeq._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParmSetNameSeq, _0_Fissures.IfParameterMgr._tc_ParmSetNameSeq)
del ParmSetNameSeq

# struct ParameterRef
_0_Fissures.IfParameterMgr.ParameterRef = omniORB.newEmptyClass()
class ParameterRef (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParameterRef:1.0"

    def __init__(self, a_id, creator):
        self.a_id = a_id
        self.creator = creator

_0_Fissures.IfParameterMgr.ParameterRef = ParameterRef
_0_Fissures.IfParameterMgr._d_ParameterRef  = (omniORB.tcInternal.tv_struct, ParameterRef, ParameterRef._NP_RepositoryId, "ParameterRef", "a_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], "creator", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfParameterMgr._tc_ParameterRef = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterRef)
omniORB.registerType(ParameterRef._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterRef, _0_Fissures.IfParameterMgr._tc_ParameterRef)
del ParameterRef

# struct Parm
_0_Fissures.IfParameterMgr.Parm = omniORB.newEmptyClass()
class Parm (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"

    def __init__(self, parm_name, parm_value):
        self.parm_name = parm_name
        self.parm_value = parm_value

_0_Fissures.IfParameterMgr.Parm = Parm
_0_Fissures.IfParameterMgr._d_Parm  = (omniORB.tcInternal.tv_struct, Parm, Parm._NP_RepositoryId, "Parm", "parm_name", omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], "parm_value", omniORB.tcInternal.tv_any)
_0_Fissures.IfParameterMgr._tc_Parm = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_Parm)
omniORB.registerType(Parm._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_Parm, _0_Fissures.IfParameterMgr._tc_Parm)
del Parm

# typedef ... ParmSeq
class ParmSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParmSeq = ParmSeq
_0_Fissures.IfParameterMgr._d_ParmSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"], 0)
_0_Fissures.IfParameterMgr._ad_ParmSeq = (omniORB.tcInternal.tv_alias, ParmSeq._NP_RepositoryId, "ParmSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"], 0))
_0_Fissures.IfParameterMgr._tc_ParmSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParmSeq)
omniORB.registerType(ParmSeq._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParmSeq, _0_Fissures.IfParameterMgr._tc_ParmSeq)
del ParmSeq

# struct ParmDef
_0_Fissures.IfParameterMgr.ParmDef = omniORB.newEmptyClass()
class ParmDef (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"

    def __init__(self, parm_name, description, creator):
        self.parm_name = parm_name
        self.description = description
        self.creator = creator

_0_Fissures.IfParameterMgr.ParmDef = ParmDef
_0_Fissures.IfParameterMgr._d_ParmDef  = (omniORB.tcInternal.tv_struct, ParmDef, ParmDef._NP_RepositoryId, "ParmDef", "parm_name", omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], "description", (omniORB.tcInternal.tv_string,0), "creator", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfParameterMgr._tc_ParmDef = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmDef)
omniORB.registerType(ParmDef._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmDef, _0_Fissures.IfParameterMgr._tc_ParmDef)
del ParmDef

# typedef ... ParmDefSeq
class ParmDefSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmDefSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParmDefSeq = ParmDefSeq
_0_Fissures.IfParameterMgr._d_ParmDefSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], 0)
_0_Fissures.IfParameterMgr._ad_ParmDefSeq = (omniORB.tcInternal.tv_alias, ParmDefSeq._NP_RepositoryId, "ParmDefSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], 0))
_0_Fissures.IfParameterMgr._tc_ParmDefSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParmDefSeq)
omniORB.registerType(ParmDefSeq._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParmDefSeq, _0_Fissures.IfParameterMgr._tc_ParmDefSeq)
del ParmDefSeq

# struct ParmSetAttr
_0_Fissures.IfParameterMgr.ParmSetAttr = omniORB.newEmptyClass()
class ParmSetAttr (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAttr:1.0"

    def __init__(self, name, description, creator):
        self.name = name
        self.description = description
        self.creator = creator

_0_Fissures.IfParameterMgr.ParmSetAttr = ParmSetAttr
_0_Fissures.IfParameterMgr._d_ParmSetAttr  = (omniORB.tcInternal.tv_struct, ParmSetAttr, ParmSetAttr._NP_RepositoryId, "ParmSetAttr", "name", omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetName:1.0"], "description", (omniORB.tcInternal.tv_string,0), "creator", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfParameterMgr._tc_ParmSetAttr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmSetAttr)
omniORB.registerType(ParmSetAttr._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmSetAttr, _0_Fissures.IfParameterMgr._tc_ParmSetAttr)
del ParmSetAttr

# interface ParameterComponent;
_0_Fissures.IfParameterMgr._d_ParameterComponent = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterComponent:1.0", "ParameterComponent")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterComponent:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterComponent

# interface ParmSetFactory;
_0_Fissures.IfParameterMgr._d_ParmSetFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFactory:1.0", "ParmSetFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFactory:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetFactory

# interface ParmSetFinder;
_0_Fissures.IfParameterMgr._d_ParmSetFinder = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFinder:1.0", "ParmSetFinder")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFinder:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetFinder

# interface ParmSetAccess;
_0_Fissures.IfParameterMgr._d_ParmSetAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAccess:1.0", "ParmSetAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAccess:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetAccess

# interface ParmSet;
_0_Fissures.IfParameterMgr._d_ParmSet = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0", "ParmSet")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSet

# interface ParameterMgr;
_0_Fissures.IfParameterMgr._d_ParameterMgr = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgr:1.0", "ParameterMgr")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgr:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterMgr

# interface ParameterMgrAccess;
_0_Fissures.IfParameterMgr._d_ParameterMgrAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgrAccess:1.0", "ParameterMgrAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgrAccess:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterMgrAccess

# interface ParameterIterator;
_0_Fissures.IfParameterMgr._d_ParameterIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterIterator:1.0", "ParameterIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterIterator

# interface ParameterDefIterator;
_0_Fissures.IfParameterMgr._d_ParameterDefIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterDefIterator:1.0", "ParameterDefIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterDefIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterDefIterator

# interface ParameterNameIterator;
_0_Fissures.IfParameterMgr._d_ParameterNameIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameIterator:1.0", "ParameterNameIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterNameIterator

# interface ParmSetIterator;
_0_Fissures.IfParameterMgr._d_ParmSetIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetIterator:1.0", "ParmSetIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetIterator

# typedef ... ParmSetSeq
class ParmSetSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfParameterMgr.ParmSetSeq = ParmSetSeq
_0_Fissures.IfParameterMgr._d_ParmSetSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0"], 0)
_0_Fissures.IfParameterMgr._ad_ParmSetSeq = (omniORB.tcInternal.tv_alias, ParmSetSeq._NP_RepositoryId, "ParmSetSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0"], 0))
_0_Fissures.IfParameterMgr._tc_ParmSetSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._ad_ParmSetSeq)
omniORB.registerType(ParmSetSeq._NP_RepositoryId, _0_Fissures.IfParameterMgr._ad_ParmSetSeq, _0_Fissures.IfParameterMgr._tc_ParmSetSeq)
del ParmSetSeq

# interface ParameterComponent
_0_Fissures.IfParameterMgr._d_ParameterComponent = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterComponent:1.0", "ParameterComponent")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterComponent:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterComponent
_0_Fissures.IfParameterMgr.ParameterComponent = omniORB.newEmptyClass()
class ParameterComponent :
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterComponent = ParameterComponent
_0_Fissures.IfParameterMgr._tc_ParameterComponent = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterComponent)
omniORB.registerType(ParameterComponent._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterComponent, _0_Fissures.IfParameterMgr._tc_ParameterComponent)

# ParameterComponent operations and attributes
ParameterComponent._d__get_a_parmset_finder = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFinder:1.0"],),None)
ParameterComponent._d__get_a_parm__mgr = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgrAccess:1.0"],),None)

# ParameterComponent object reference
class _objref_ParameterComponent (CORBA.Object):
    _NP_RepositoryId = ParameterComponent._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_a_parmset_finder(self, *args):
        return _omnipy.invoke(self, "_get_a_parmset_finder", _0_Fissures.IfParameterMgr.ParameterComponent._d__get_a_parmset_finder, args)

    def _get_a_parm__mgr(self, *args):
        return _omnipy.invoke(self, "_get_a_parm__mgr", _0_Fissures.IfParameterMgr.ParameterComponent._d__get_a_parm__mgr, args)

    __methods__ = ["_get_a_parmset_finder", "_get_a_parm__mgr"] + CORBA.Object.__methods__

omniORB.registerObjref(ParameterComponent._NP_RepositoryId, _objref_ParameterComponent)
_0_Fissures.IfParameterMgr._objref_ParameterComponent = _objref_ParameterComponent
del ParameterComponent, _objref_ParameterComponent

# ParameterComponent skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterComponent (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterComponent._NP_RepositoryId


    _omni_op_d = {"_get_a_parmset_finder": _0_Fissures.IfParameterMgr.ParameterComponent._d__get_a_parmset_finder, "_get_a_parm__mgr": _0_Fissures.IfParameterMgr.ParameterComponent._d__get_a_parm__mgr}

ParameterComponent._omni_skeleton = ParameterComponent
_0_Fissures__POA.IfParameterMgr.ParameterComponent = ParameterComponent
omniORB.registerSkeleton(ParameterComponent._NP_RepositoryId, ParameterComponent)
del ParameterComponent
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParmSetFinder
_0_Fissures.IfParameterMgr._d_ParmSetFinder = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFinder:1.0", "ParmSetFinder")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFinder:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetFinder
_0_Fissures.IfParameterMgr.ParmSetFinder = omniORB.newEmptyClass()
class ParmSetFinder (_0_Fissures.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParmSetFinder[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParmSetFinder = ParmSetFinder
_0_Fissures.IfParameterMgr._tc_ParmSetFinder = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmSetFinder)
omniORB.registerType(ParmSetFinder._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmSetFinder, _0_Fissures.IfParameterMgr._tc_ParmSetFinder)

# ParmSetFinder operations and attributes
ParmSetFinder._d__get_a_factory = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFactory:1.0"],),None)
ParmSetFinder._d_get_parm_set_by_name = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetName:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAccess:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParmSetFinder._d_get_parm_sets_by_creator = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetIterator:1.0"]), None)
ParmSetFinder._d_find_defined_parm_names = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameIterator:1.0"]), None)
ParmSetFinder._d_find_all_parm_defs = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDefSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterDefIterator:1.0"]), None)
ParmSetFinder._d_find_all_parm_def_by_creator = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDefSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterDefIterator:1.0"]), None)
ParmSetFinder._d_find_parm_def = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# ParmSetFinder object reference
class _objref_ParmSetFinder (_0_Fissures.IfParameterMgr._objref_ParameterComponent):
    _NP_RepositoryId = ParmSetFinder._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParameterComponent.__init__(self)

    def _get_a_factory(self, *args):
        return _omnipy.invoke(self, "_get_a_factory", _0_Fissures.IfParameterMgr.ParmSetFinder._d__get_a_factory, args)

    def get_parm_set_by_name(self, *args):
        return _omnipy.invoke(self, "get_parm_set_by_name", _0_Fissures.IfParameterMgr.ParmSetFinder._d_get_parm_set_by_name, args)

    def get_parm_sets_by_creator(self, *args):
        return _omnipy.invoke(self, "get_parm_sets_by_creator", _0_Fissures.IfParameterMgr.ParmSetFinder._d_get_parm_sets_by_creator, args)

    def find_defined_parm_names(self, *args):
        return _omnipy.invoke(self, "find_defined_parm_names", _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_defined_parm_names, args)

    def find_all_parm_defs(self, *args):
        return _omnipy.invoke(self, "find_all_parm_defs", _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_all_parm_defs, args)

    def find_all_parm_def_by_creator(self, *args):
        return _omnipy.invoke(self, "find_all_parm_def_by_creator", _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_all_parm_def_by_creator, args)

    def find_parm_def(self, *args):
        return _omnipy.invoke(self, "find_parm_def", _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_parm_def, args)

    __methods__ = ["_get_a_factory", "get_parm_set_by_name", "get_parm_sets_by_creator", "find_defined_parm_names", "find_all_parm_defs", "find_all_parm_def_by_creator", "find_parm_def"] + _0_Fissures.IfParameterMgr._objref_ParameterComponent.__methods__

omniORB.registerObjref(ParmSetFinder._NP_RepositoryId, _objref_ParmSetFinder)
_0_Fissures.IfParameterMgr._objref_ParmSetFinder = _objref_ParmSetFinder
del ParmSetFinder, _objref_ParmSetFinder

# ParmSetFinder skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParmSetFinder (_0_Fissures__POA.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParmSetFinder._NP_RepositoryId


    _omni_op_d = {"_get_a_factory": _0_Fissures.IfParameterMgr.ParmSetFinder._d__get_a_factory, "get_parm_set_by_name": _0_Fissures.IfParameterMgr.ParmSetFinder._d_get_parm_set_by_name, "get_parm_sets_by_creator": _0_Fissures.IfParameterMgr.ParmSetFinder._d_get_parm_sets_by_creator, "find_defined_parm_names": _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_defined_parm_names, "find_all_parm_defs": _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_all_parm_defs, "find_all_parm_def_by_creator": _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_all_parm_def_by_creator, "find_parm_def": _0_Fissures.IfParameterMgr.ParmSetFinder._d_find_parm_def}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParameterComponent._omni_op_d)

ParmSetFinder._omni_skeleton = ParmSetFinder
_0_Fissures__POA.IfParameterMgr.ParmSetFinder = ParmSetFinder
omniORB.registerSkeleton(ParmSetFinder._NP_RepositoryId, ParmSetFinder)
del ParmSetFinder
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParmSetFactory
_0_Fissures.IfParameterMgr._d_ParmSetFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFactory:1.0", "ParmSetFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetFactory:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetFactory
_0_Fissures.IfParameterMgr.ParmSetFactory = omniORB.newEmptyClass()
class ParmSetFactory (_0_Fissures.IfParameterMgr.ParmSetFinder):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParmSetFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParmSetFactory = ParmSetFactory
_0_Fissures.IfParameterMgr._tc_ParmSetFactory = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmSetFactory)
omniORB.registerType(ParmSetFactory._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmSetFactory, _0_Fissures.IfParameterMgr._tc_ParmSetFactory)

# ParmSetFactory operations and attributes
ParmSetFactory._d_create = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAttr:1.0"], ), (), None)
ParmSetFactory._d_destroy = ((), (), None)
ParmSetFactory._d_create_parameter_def = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], ), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# ParmSetFactory object reference
class _objref_ParmSetFactory (_0_Fissures.IfParameterMgr._objref_ParmSetFinder):
    _NP_RepositoryId = ParmSetFactory._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParmSetFinder.__init__(self)

    def create(self, *args):
        return _omnipy.invoke(self, "create", _0_Fissures.IfParameterMgr.ParmSetFactory._d_create, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_Fissures.IfParameterMgr.ParmSetFactory._d_destroy, args)

    def create_parameter_def(self, *args):
        return _omnipy.invoke(self, "create_parameter_def", _0_Fissures.IfParameterMgr.ParmSetFactory._d_create_parameter_def, args)

    __methods__ = ["create", "destroy", "create_parameter_def"] + _0_Fissures.IfParameterMgr._objref_ParmSetFinder.__methods__

omniORB.registerObjref(ParmSetFactory._NP_RepositoryId, _objref_ParmSetFactory)
_0_Fissures.IfParameterMgr._objref_ParmSetFactory = _objref_ParmSetFactory
del ParmSetFactory, _objref_ParmSetFactory

# ParmSetFactory skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParmSetFactory (_0_Fissures__POA.IfParameterMgr.ParmSetFinder):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParmSetFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_Fissures.IfParameterMgr.ParmSetFactory._d_create, "destroy": _0_Fissures.IfParameterMgr.ParmSetFactory._d_destroy, "create_parameter_def": _0_Fissures.IfParameterMgr.ParmSetFactory._d_create_parameter_def}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParmSetFinder._omni_op_d)

ParmSetFactory._omni_skeleton = ParmSetFactory
_0_Fissures__POA.IfParameterMgr.ParmSetFactory = ParmSetFactory
omniORB.registerSkeleton(ParmSetFactory._NP_RepositoryId, ParmSetFactory)
del ParmSetFactory
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParmSetAccess
_0_Fissures.IfParameterMgr._d_ParmSetAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAccess:1.0", "ParmSetAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAccess:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetAccess
_0_Fissures.IfParameterMgr.ParmSetAccess = omniORB.newEmptyClass()
class ParmSetAccess (_0_Fissures.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParmSetAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParmSetAccess = ParmSetAccess
_0_Fissures.IfParameterMgr._tc_ParmSetAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmSetAccess)
omniORB.registerType(ParmSetAccess._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmSetAccess, _0_Fissures.IfParameterMgr._tc_ParmSetAccess)

# ParmSetAccess operations and attributes
ParmSetAccess._d__get_a_writable = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0"],),None)
ParmSetAccess._d_get_attributes = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetAttr:1.0"], ), None)
ParmSetAccess._d_get_all_parm_defs = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDefSeq:1.0"], ), None)
ParmSetAccess._d_get_parm_def = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParmSetAccess._d_get_parm_defs = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDefSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# ParmSetAccess object reference
class _objref_ParmSetAccess (_0_Fissures.IfParameterMgr._objref_ParameterComponent):
    _NP_RepositoryId = ParmSetAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParameterComponent.__init__(self)

    def _get_a_writable(self, *args):
        return _omnipy.invoke(self, "_get_a_writable", _0_Fissures.IfParameterMgr.ParmSetAccess._d__get_a_writable, args)

    def get_attributes(self, *args):
        return _omnipy.invoke(self, "get_attributes", _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_attributes, args)

    def get_all_parm_defs(self, *args):
        return _omnipy.invoke(self, "get_all_parm_defs", _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_all_parm_defs, args)

    def get_parm_def(self, *args):
        return _omnipy.invoke(self, "get_parm_def", _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_parm_def, args)

    def get_parm_defs(self, *args):
        return _omnipy.invoke(self, "get_parm_defs", _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_parm_defs, args)

    __methods__ = ["_get_a_writable", "get_attributes", "get_all_parm_defs", "get_parm_def", "get_parm_defs"] + _0_Fissures.IfParameterMgr._objref_ParameterComponent.__methods__

omniORB.registerObjref(ParmSetAccess._NP_RepositoryId, _objref_ParmSetAccess)
_0_Fissures.IfParameterMgr._objref_ParmSetAccess = _objref_ParmSetAccess
del ParmSetAccess, _objref_ParmSetAccess

# ParmSetAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParmSetAccess (_0_Fissures__POA.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParmSetAccess._NP_RepositoryId


    _omni_op_d = {"_get_a_writable": _0_Fissures.IfParameterMgr.ParmSetAccess._d__get_a_writable, "get_attributes": _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_attributes, "get_all_parm_defs": _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_all_parm_defs, "get_parm_def": _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_parm_def, "get_parm_defs": _0_Fissures.IfParameterMgr.ParmSetAccess._d_get_parm_defs}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParameterComponent._omni_op_d)

ParmSetAccess._omni_skeleton = ParmSetAccess
_0_Fissures__POA.IfParameterMgr.ParmSetAccess = ParmSetAccess
omniORB.registerSkeleton(ParmSetAccess._NP_RepositoryId, ParmSetAccess)
del ParmSetAccess
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParmSet
_0_Fissures.IfParameterMgr._d_ParmSet = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0", "ParmSet")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSet
_0_Fissures.IfParameterMgr.ParmSet = omniORB.newEmptyClass()
class ParmSet (_0_Fissures.IfParameterMgr.ParmSetAccess):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParmSet[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParmSet = ParmSet
_0_Fissures.IfParameterMgr._tc_ParmSet = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmSet)
omniORB.registerType(ParmSet._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmSet, _0_Fissures.IfParameterMgr._tc_ParmSet)

# ParmSet operations and attributes
ParmSet._d_update_name = (((omniORB.tcInternal.tv_string,0), ), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParmSet._d_update_description = (((omniORB.tcInternal.tv_string,0), ), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParmSet._d_add_new_parm_def = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], ), (), None)
ParmSet._d_add_existing_parm_def = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], ), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParmSet._d_delete_parm_def = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"], ), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# ParmSet object reference
class _objref_ParmSet (_0_Fissures.IfParameterMgr._objref_ParmSetAccess):
    _NP_RepositoryId = ParmSet._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParmSetAccess.__init__(self)

    def update_name(self, *args):
        return _omnipy.invoke(self, "update_name", _0_Fissures.IfParameterMgr.ParmSet._d_update_name, args)

    def update_description(self, *args):
        return _omnipy.invoke(self, "update_description", _0_Fissures.IfParameterMgr.ParmSet._d_update_description, args)

    def add_new_parm_def(self, *args):
        return _omnipy.invoke(self, "add_new_parm_def", _0_Fissures.IfParameterMgr.ParmSet._d_add_new_parm_def, args)

    def add_existing_parm_def(self, *args):
        return _omnipy.invoke(self, "add_existing_parm_def", _0_Fissures.IfParameterMgr.ParmSet._d_add_existing_parm_def, args)

    def delete_parm_def(self, *args):
        return _omnipy.invoke(self, "delete_parm_def", _0_Fissures.IfParameterMgr.ParmSet._d_delete_parm_def, args)

    __methods__ = ["update_name", "update_description", "add_new_parm_def", "add_existing_parm_def", "delete_parm_def"] + _0_Fissures.IfParameterMgr._objref_ParmSetAccess.__methods__

omniORB.registerObjref(ParmSet._NP_RepositoryId, _objref_ParmSet)
_0_Fissures.IfParameterMgr._objref_ParmSet = _objref_ParmSet
del ParmSet, _objref_ParmSet

# ParmSet skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParmSet (_0_Fissures__POA.IfParameterMgr.ParmSetAccess):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParmSet._NP_RepositoryId


    _omni_op_d = {"update_name": _0_Fissures.IfParameterMgr.ParmSet._d_update_name, "update_description": _0_Fissures.IfParameterMgr.ParmSet._d_update_description, "add_new_parm_def": _0_Fissures.IfParameterMgr.ParmSet._d_add_new_parm_def, "add_existing_parm_def": _0_Fissures.IfParameterMgr.ParmSet._d_add_existing_parm_def, "delete_parm_def": _0_Fissures.IfParameterMgr.ParmSet._d_delete_parm_def}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParmSetAccess._omni_op_d)

ParmSet._omni_skeleton = ParmSet
_0_Fissures__POA.IfParameterMgr.ParmSet = ParmSet
omniORB.registerSkeleton(ParmSet._NP_RepositoryId, ParmSet)
del ParmSet
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParameterFactory
_0_Fissures.IfParameterMgr._d_ParameterFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterFactory:1.0", "ParameterFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterFactory:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterFactory
_0_Fissures.IfParameterMgr.ParameterFactory = omniORB.newEmptyClass()
class ParameterFactory (_0_Fissures.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterFactory = ParameterFactory
_0_Fissures.IfParameterMgr._tc_ParameterFactory = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterFactory)
omniORB.registerType(ParameterFactory._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterFactory, _0_Fissures.IfParameterMgr._tc_ParameterFactory)

# ParameterFactory operations and attributes
ParameterFactory._d_generate_id = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], ), None)

# ParameterFactory object reference
class _objref_ParameterFactory (_0_Fissures.IfParameterMgr._objref_ParameterComponent):
    _NP_RepositoryId = ParameterFactory._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParameterComponent.__init__(self)

    def generate_id(self, *args):
        return _omnipy.invoke(self, "generate_id", _0_Fissures.IfParameterMgr.ParameterFactory._d_generate_id, args)

    __methods__ = ["generate_id"] + _0_Fissures.IfParameterMgr._objref_ParameterComponent.__methods__

omniORB.registerObjref(ParameterFactory._NP_RepositoryId, _objref_ParameterFactory)
_0_Fissures.IfParameterMgr._objref_ParameterFactory = _objref_ParameterFactory
del ParameterFactory, _objref_ParameterFactory

# ParameterFactory skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterFactory (_0_Fissures__POA.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterFactory._NP_RepositoryId


    _omni_op_d = {"generate_id": _0_Fissures.IfParameterMgr.ParameterFactory._d_generate_id}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParameterComponent._omni_op_d)

ParameterFactory._omni_skeleton = ParameterFactory
_0_Fissures__POA.IfParameterMgr.ParameterFactory = ParameterFactory
omniORB.registerSkeleton(ParameterFactory._NP_RepositoryId, ParameterFactory)
del ParameterFactory
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParameterMgrAccess
_0_Fissures.IfParameterMgr._d_ParameterMgrAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgrAccess:1.0", "ParameterMgrAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgrAccess:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterMgrAccess
_0_Fissures.IfParameterMgr.ParameterMgrAccess = omniORB.newEmptyClass()
class ParameterMgrAccess (_0_Fissures.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterMgrAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterMgrAccess = ParameterMgrAccess
_0_Fissures.IfParameterMgr._tc_ParameterMgrAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterMgrAccess)
omniORB.registerType(ParameterMgrAccess._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterMgrAccess, _0_Fissures.IfParameterMgr._tc_ParameterMgrAccess)

# ParameterMgrAccess operations and attributes
ParameterMgrAccess._d__get_a_writeable = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgr:1.0"],),None)
ParameterMgrAccess._d_get_parm = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"]), (omniORB.tcInternal.tv_any, ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgrAccess._d_get_parm_names = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameIterator:1.0"]), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgrAccess._d_get_parms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameSeq:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgrAccess._d_get_all_parms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterIterator:1.0"]), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgrAccess._d_get_parm_set = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetName:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# ParameterMgrAccess object reference
class _objref_ParameterMgrAccess (_0_Fissures.IfParameterMgr._objref_ParameterComponent):
    _NP_RepositoryId = ParameterMgrAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParameterComponent.__init__(self)

    def _get_a_writeable(self, *args):
        return _omnipy.invoke(self, "_get_a_writeable", _0_Fissures.IfParameterMgr.ParameterMgrAccess._d__get_a_writeable, args)

    def get_parm(self, *args):
        return _omnipy.invoke(self, "get_parm", _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parm, args)

    def get_parm_names(self, *args):
        return _omnipy.invoke(self, "get_parm_names", _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parm_names, args)

    def get_parms(self, *args):
        return _omnipy.invoke(self, "get_parms", _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parms, args)

    def get_all_parms(self, *args):
        return _omnipy.invoke(self, "get_all_parms", _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_all_parms, args)

    def get_parm_set(self, *args):
        return _omnipy.invoke(self, "get_parm_set", _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parm_set, args)

    __methods__ = ["_get_a_writeable", "get_parm", "get_parm_names", "get_parms", "get_all_parms", "get_parm_set"] + _0_Fissures.IfParameterMgr._objref_ParameterComponent.__methods__

omniORB.registerObjref(ParameterMgrAccess._NP_RepositoryId, _objref_ParameterMgrAccess)
_0_Fissures.IfParameterMgr._objref_ParameterMgrAccess = _objref_ParameterMgrAccess
del ParameterMgrAccess, _objref_ParameterMgrAccess

# ParameterMgrAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterMgrAccess (_0_Fissures__POA.IfParameterMgr.ParameterComponent):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterMgrAccess._NP_RepositoryId


    _omni_op_d = {"_get_a_writeable": _0_Fissures.IfParameterMgr.ParameterMgrAccess._d__get_a_writeable, "get_parm": _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parm, "get_parm_names": _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parm_names, "get_parms": _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parms, "get_all_parms": _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_all_parms, "get_parm_set": _0_Fissures.IfParameterMgr.ParameterMgrAccess._d_get_parm_set}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParameterComponent._omni_op_d)

ParameterMgrAccess._omni_skeleton = ParameterMgrAccess
_0_Fissures__POA.IfParameterMgr.ParameterMgrAccess = ParameterMgrAccess
omniORB.registerSkeleton(ParameterMgrAccess._NP_RepositoryId, ParameterMgrAccess)
del ParameterMgrAccess
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParameterMgr
_0_Fissures.IfParameterMgr._d_ParameterMgr = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgr:1.0", "ParameterMgr")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterMgr:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterMgr
_0_Fissures.IfParameterMgr.ParameterMgr = omniORB.newEmptyClass()
class ParameterMgr (_0_Fissures.IfParameterMgr.ParameterMgrAccess):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterMgr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterMgr = ParameterMgr
_0_Fissures.IfParameterMgr._tc_ParameterMgr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterMgr)
omniORB.registerType(ParameterMgr._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterMgr, _0_Fissures.IfParameterMgr._tc_ParameterMgr)

# ParameterMgr operations and attributes
ParameterMgr._d__get_a_factory = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterFactory:1.0"],),None)
ParameterMgr._d_add_parm = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgr._d_add_parms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgr._d_create_parm = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"], omniORB.tcInternal.tv_any), (), None)
ParameterMgr._d_update_parm = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgr._d_update_parms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgr._d_delete_parm_ = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
ParameterMgr._d_delete_parms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# ParameterMgr object reference
class _objref_ParameterMgr (_0_Fissures.IfParameterMgr._objref_ParameterMgrAccess):
    _NP_RepositoryId = ParameterMgr._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfParameterMgr._objref_ParameterMgrAccess.__init__(self)

    def _get_a_factory(self, *args):
        return _omnipy.invoke(self, "_get_a_factory", _0_Fissures.IfParameterMgr.ParameterMgr._d__get_a_factory, args)

    def add_parm(self, *args):
        return _omnipy.invoke(self, "add_parm", _0_Fissures.IfParameterMgr.ParameterMgr._d_add_parm, args)

    def add_parms(self, *args):
        return _omnipy.invoke(self, "add_parms", _0_Fissures.IfParameterMgr.ParameterMgr._d_add_parms, args)

    def create_parm(self, *args):
        return _omnipy.invoke(self, "create_parm", _0_Fissures.IfParameterMgr.ParameterMgr._d_create_parm, args)

    def update_parm(self, *args):
        return _omnipy.invoke(self, "update_parm", _0_Fissures.IfParameterMgr.ParameterMgr._d_update_parm, args)

    def update_parms(self, *args):
        return _omnipy.invoke(self, "update_parms", _0_Fissures.IfParameterMgr.ParameterMgr._d_update_parms, args)

    def delete_parm_(self, *args):
        return _omnipy.invoke(self, "delete_parm_", _0_Fissures.IfParameterMgr.ParameterMgr._d_delete_parm_, args)

    def delete_parms(self, *args):
        return _omnipy.invoke(self, "delete_parms", _0_Fissures.IfParameterMgr.ParameterMgr._d_delete_parms, args)

    __methods__ = ["_get_a_factory", "add_parm", "add_parms", "create_parm", "update_parm", "update_parms", "delete_parm_", "delete_parms"] + _0_Fissures.IfParameterMgr._objref_ParameterMgrAccess.__methods__

omniORB.registerObjref(ParameterMgr._NP_RepositoryId, _objref_ParameterMgr)
_0_Fissures.IfParameterMgr._objref_ParameterMgr = _objref_ParameterMgr
del ParameterMgr, _objref_ParameterMgr

# ParameterMgr skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterMgr (_0_Fissures__POA.IfParameterMgr.ParameterMgrAccess):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterMgr._NP_RepositoryId


    _omni_op_d = {"_get_a_factory": _0_Fissures.IfParameterMgr.ParameterMgr._d__get_a_factory, "add_parm": _0_Fissures.IfParameterMgr.ParameterMgr._d_add_parm, "add_parms": _0_Fissures.IfParameterMgr.ParameterMgr._d_add_parms, "create_parm": _0_Fissures.IfParameterMgr.ParameterMgr._d_create_parm, "update_parm": _0_Fissures.IfParameterMgr.ParameterMgr._d_update_parm, "update_parms": _0_Fissures.IfParameterMgr.ParameterMgr._d_update_parms, "delete_parm_": _0_Fissures.IfParameterMgr.ParameterMgr._d_delete_parm_, "delete_parms": _0_Fissures.IfParameterMgr.ParameterMgr._d_delete_parms}
    _omni_op_d.update(_0_Fissures__POA.IfParameterMgr.ParameterMgrAccess._omni_op_d)

ParameterMgr._omni_skeleton = ParameterMgr
_0_Fissures__POA.IfParameterMgr.ParameterMgr = ParameterMgr
omniORB.registerSkeleton(ParameterMgr._NP_RepositoryId, ParameterMgr)
del ParameterMgr
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParameterIterator
_0_Fissures.IfParameterMgr._d_ParameterIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterIterator:1.0", "ParameterIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterIterator
_0_Fissures.IfParameterMgr.ParameterIterator = omniORB.newEmptyClass()
class ParameterIterator (_0_Fissures.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterIterator = ParameterIterator
_0_Fissures.IfParameterMgr._tc_ParameterIterator = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterIterator)
omniORB.registerType(ParameterIterator._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterIterator, _0_Fissures.IfParameterMgr._tc_ParameterIterator)

# ParameterIterator operations and attributes
ParameterIterator._d_next_one = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/Parm:1.0"]), None)
ParameterIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSeq:1.0"]), None)

# ParameterIterator object reference
class _objref_ParameterIterator (_0_Fissures._objref_FissuresIterator):
    _NP_RepositoryId = ParameterIterator._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_FissuresIterator.__init__(self)

    def next_one(self, *args):
        return _omnipy.invoke(self, "next_one", _0_Fissures.IfParameterMgr.ParameterIterator._d_next_one, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_Fissures.IfParameterMgr.ParameterIterator._d_next_n, args)

    __methods__ = ["next_one", "next_n"] + _0_Fissures._objref_FissuresIterator.__methods__

omniORB.registerObjref(ParameterIterator._NP_RepositoryId, _objref_ParameterIterator)
_0_Fissures.IfParameterMgr._objref_ParameterIterator = _objref_ParameterIterator
del ParameterIterator, _objref_ParameterIterator

# ParameterIterator skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterIterator (_0_Fissures__POA.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterIterator._NP_RepositoryId


    _omni_op_d = {"next_one": _0_Fissures.IfParameterMgr.ParameterIterator._d_next_one, "next_n": _0_Fissures.IfParameterMgr.ParameterIterator._d_next_n}
    _omni_op_d.update(_0_Fissures__POA.FissuresIterator._omni_op_d)

ParameterIterator._omni_skeleton = ParameterIterator
_0_Fissures__POA.IfParameterMgr.ParameterIterator = ParameterIterator
omniORB.registerSkeleton(ParameterIterator._NP_RepositoryId, ParameterIterator)
del ParameterIterator
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParameterDefIterator
_0_Fissures.IfParameterMgr._d_ParameterDefIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterDefIterator:1.0", "ParameterDefIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterDefIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterDefIterator
_0_Fissures.IfParameterMgr.ParameterDefIterator = omniORB.newEmptyClass()
class ParameterDefIterator (_0_Fissures.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterDefIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterDefIterator = ParameterDefIterator
_0_Fissures.IfParameterMgr._tc_ParameterDefIterator = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterDefIterator)
omniORB.registerType(ParameterDefIterator._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterDefIterator, _0_Fissures.IfParameterMgr._tc_ParameterDefIterator)

# ParameterDefIterator operations and attributes
ParameterDefIterator._d_next_one = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDef:1.0"]), None)
ParameterDefIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmDefSeq:1.0"]), None)

# ParameterDefIterator object reference
class _objref_ParameterDefIterator (_0_Fissures._objref_FissuresIterator):
    _NP_RepositoryId = ParameterDefIterator._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_FissuresIterator.__init__(self)

    def next_one(self, *args):
        return _omnipy.invoke(self, "next_one", _0_Fissures.IfParameterMgr.ParameterDefIterator._d_next_one, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_Fissures.IfParameterMgr.ParameterDefIterator._d_next_n, args)

    __methods__ = ["next_one", "next_n"] + _0_Fissures._objref_FissuresIterator.__methods__

omniORB.registerObjref(ParameterDefIterator._NP_RepositoryId, _objref_ParameterDefIterator)
_0_Fissures.IfParameterMgr._objref_ParameterDefIterator = _objref_ParameterDefIterator
del ParameterDefIterator, _objref_ParameterDefIterator

# ParameterDefIterator skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterDefIterator (_0_Fissures__POA.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterDefIterator._NP_RepositoryId


    _omni_op_d = {"next_one": _0_Fissures.IfParameterMgr.ParameterDefIterator._d_next_one, "next_n": _0_Fissures.IfParameterMgr.ParameterDefIterator._d_next_n}
    _omni_op_d.update(_0_Fissures__POA.FissuresIterator._omni_op_d)

ParameterDefIterator._omni_skeleton = ParameterDefIterator
_0_Fissures__POA.IfParameterMgr.ParameterDefIterator = ParameterDefIterator
omniORB.registerSkeleton(ParameterDefIterator._NP_RepositoryId, ParameterDefIterator)
del ParameterDefIterator
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParameterNameIterator
_0_Fissures.IfParameterMgr._d_ParameterNameIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameIterator:1.0", "ParameterNameIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParameterNameIterator
_0_Fissures.IfParameterMgr.ParameterNameIterator = omniORB.newEmptyClass()
class ParameterNameIterator (_0_Fissures.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParameterNameIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParameterNameIterator = ParameterNameIterator
_0_Fissures.IfParameterMgr._tc_ParameterNameIterator = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParameterNameIterator)
omniORB.registerType(ParameterNameIterator._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParameterNameIterator, _0_Fissures.IfParameterMgr._tc_ParameterNameIterator)

# ParameterNameIterator operations and attributes
ParameterNameIterator._d_next_one = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterName:1.0"]), None)
ParameterNameIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterNameSeq:1.0"]), None)

# ParameterNameIterator object reference
class _objref_ParameterNameIterator (_0_Fissures._objref_FissuresIterator):
    _NP_RepositoryId = ParameterNameIterator._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_FissuresIterator.__init__(self)

    def next_one(self, *args):
        return _omnipy.invoke(self, "next_one", _0_Fissures.IfParameterMgr.ParameterNameIterator._d_next_one, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_Fissures.IfParameterMgr.ParameterNameIterator._d_next_n, args)

    __methods__ = ["next_one", "next_n"] + _0_Fissures._objref_FissuresIterator.__methods__

omniORB.registerObjref(ParameterNameIterator._NP_RepositoryId, _objref_ParameterNameIterator)
_0_Fissures.IfParameterMgr._objref_ParameterNameIterator = _objref_ParameterNameIterator
del ParameterNameIterator, _objref_ParameterNameIterator

# ParameterNameIterator skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParameterNameIterator (_0_Fissures__POA.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParameterNameIterator._NP_RepositoryId


    _omni_op_d = {"next_one": _0_Fissures.IfParameterMgr.ParameterNameIterator._d_next_one, "next_n": _0_Fissures.IfParameterMgr.ParameterNameIterator._d_next_n}
    _omni_op_d.update(_0_Fissures__POA.FissuresIterator._omni_op_d)

ParameterNameIterator._omni_skeleton = ParameterNameIterator
_0_Fissures__POA.IfParameterMgr.ParameterNameIterator = ParameterNameIterator
omniORB.registerSkeleton(ParameterNameIterator._NP_RepositoryId, ParameterNameIterator)
del ParameterNameIterator
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

# interface ParmSetIterator
_0_Fissures.IfParameterMgr._d_ParmSetIterator = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfParameterMgr/ParmSetIterator:1.0", "ParmSetIterator")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetIterator:1.0"] = _0_Fissures.IfParameterMgr._d_ParmSetIterator
_0_Fissures.IfParameterMgr.ParmSetIterator = omniORB.newEmptyClass()
class ParmSetIterator (_0_Fissures.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr._d_ParmSetIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfParameterMgr.ParmSetIterator = ParmSetIterator
_0_Fissures.IfParameterMgr._tc_ParmSetIterator = omniORB.tcInternal.createTypeCode(_0_Fissures.IfParameterMgr._d_ParmSetIterator)
omniORB.registerType(ParmSetIterator._NP_RepositoryId, _0_Fissures.IfParameterMgr._d_ParmSetIterator, _0_Fissures.IfParameterMgr._tc_ParmSetIterator)

# ParmSetIterator operations and attributes
ParmSetIterator._d_next_one = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSet:1.0"]), None)
ParmSetIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParmSetSeq:1.0"]), None)

# ParmSetIterator object reference
class _objref_ParmSetIterator (_0_Fissures._objref_FissuresIterator):
    _NP_RepositoryId = ParmSetIterator._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_FissuresIterator.__init__(self)

    def next_one(self, *args):
        return _omnipy.invoke(self, "next_one", _0_Fissures.IfParameterMgr.ParmSetIterator._d_next_one, args)

    def next_n(self, *args):
        return _omnipy.invoke(self, "next_n", _0_Fissures.IfParameterMgr.ParmSetIterator._d_next_n, args)

    __methods__ = ["next_one", "next_n"] + _0_Fissures._objref_FissuresIterator.__methods__

omniORB.registerObjref(ParmSetIterator._NP_RepositoryId, _objref_ParmSetIterator)
_0_Fissures.IfParameterMgr._objref_ParmSetIterator = _objref_ParmSetIterator
del ParmSetIterator, _objref_ParmSetIterator

# ParmSetIterator skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfParameterMgr"
class ParmSetIterator (_0_Fissures__POA.FissuresIterator):
    _NP_RepositoryId = _0_Fissures.IfParameterMgr.ParmSetIterator._NP_RepositoryId


    _omni_op_d = {"next_one": _0_Fissures.IfParameterMgr.ParmSetIterator._d_next_one, "next_n": _0_Fissures.IfParameterMgr.ParmSetIterator._d_next_n}
    _omni_op_d.update(_0_Fissures__POA.FissuresIterator._omni_op_d)

ParmSetIterator._omni_skeleton = ParmSetIterator
_0_Fissures__POA.IfParameterMgr.ParmSetIterator = ParmSetIterator
omniORB.registerSkeleton(ParmSetIterator._NP_RepositoryId, ParmSetIterator)
del ParmSetIterator
__name__ = "obspy.fissures.idl.Fissures.IfParameterMgr"

#
# End of module "Fissures.IfParameterMgr"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"IfSeismogramDC.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"IfSeismogramDC.idl")


#
# Start of module "Fissures.IfSeismogramDC"
#
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramDC"
_0_Fissures.IfSeismogramDC = omniORB.openModule("obspy.fissures.idl.Fissures.IfSeismogramDC", r"IfSeismogramDC.idl")
_0_Fissures__POA.IfSeismogramDC = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfSeismogramDC", r"IfSeismogramDC.idl")

_0_Fissures.IfSeismogramDC.VERSION = "1.0"

# typedef ... TimeSeriesDataSel
class TimeSeriesDataSel (_0_Fissures.IfTimeSeries.TimeSeriesDataSel):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/TimeSeriesDataSel:1.0"

_0_Fissures.IfSeismogramDC.TimeSeriesDataSel = TimeSeriesDataSel
_0_Fissures.IfSeismogramDC._d_TimeSeriesDataSel  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"]
_0_Fissures.IfSeismogramDC._ad_TimeSeriesDataSel = (omniORB.tcInternal.tv_alias, TimeSeriesDataSel._NP_RepositoryId, "TimeSeriesDataSel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"])
_0_Fissures.IfSeismogramDC._tc_TimeSeriesDataSel = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_TimeSeriesDataSel)
omniORB.registerType(TimeSeriesDataSel._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_TimeSeriesDataSel, _0_Fissures.IfSeismogramDC._tc_TimeSeriesDataSel)
del TimeSeriesDataSel

# typedef ... LongSeq
class LongSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/LongSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.LongSeq = LongSeq
_0_Fissures.IfSeismogramDC._d_LongSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"]
_0_Fissures.IfSeismogramDC._ad_LongSeq = (omniORB.tcInternal.tv_alias, LongSeq._NP_RepositoryId, "LongSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_LongSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_LongSeq)
omniORB.registerType(LongSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_LongSeq, _0_Fissures.IfSeismogramDC._tc_LongSeq)
del LongSeq

# typedef ... ShortSeq
class ShortSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ShortSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.ShortSeq = ShortSeq
_0_Fissures.IfSeismogramDC._d_ShortSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"]
_0_Fissures.IfSeismogramDC._ad_ShortSeq = (omniORB.tcInternal.tv_alias, ShortSeq._NP_RepositoryId, "ShortSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_ShortSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ShortSeq)
omniORB.registerType(ShortSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ShortSeq, _0_Fissures.IfSeismogramDC._tc_ShortSeq)
del ShortSeq

# typedef ... FloatSeq
class FloatSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/FloatSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.FloatSeq = FloatSeq
_0_Fissures.IfSeismogramDC._d_FloatSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"]
_0_Fissures.IfSeismogramDC._ad_FloatSeq = (omniORB.tcInternal.tv_alias, FloatSeq._NP_RepositoryId, "FloatSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_FloatSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_FloatSeq)
omniORB.registerType(FloatSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_FloatSeq, _0_Fissures.IfSeismogramDC._tc_FloatSeq)
del FloatSeq

# typedef ... DoubleSeq
class DoubleSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/DoubleSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.DoubleSeq = DoubleSeq
_0_Fissures.IfSeismogramDC._d_DoubleSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"]
_0_Fissures.IfSeismogramDC._ad_DoubleSeq = (omniORB.tcInternal.tv_alias, DoubleSeq._NP_RepositoryId, "DoubleSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_DoubleSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_DoubleSeq)
omniORB.registerType(DoubleSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_DoubleSeq, _0_Fissures.IfSeismogramDC._tc_DoubleSeq)
del DoubleSeq

# typedef ... EncodedSeq
class EncodedSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/EncodedSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.EncodedSeq = EncodedSeq
_0_Fissures.IfSeismogramDC._d_EncodedSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"]
_0_Fissures.IfSeismogramDC._ad_EncodedSeq = (omniORB.tcInternal.tv_alias, EncodedSeq._NP_RepositoryId, "EncodedSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_EncodedSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_EncodedSeq)
omniORB.registerType(EncodedSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_EncodedSeq, _0_Fissures.IfSeismogramDC._tc_EncodedSeq)
del EncodedSeq

# typedef ... ChannelId
class ChannelId (_0_Fissures.IfNetwork.ChannelId):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ChannelId:1.0"

_0_Fissures.IfSeismogramDC.ChannelId = ChannelId
_0_Fissures.IfSeismogramDC._d_ChannelId  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"]
_0_Fissures.IfSeismogramDC._ad_ChannelId = (omniORB.tcInternal.tv_alias, ChannelId._NP_RepositoryId, "ChannelId", omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelId:1.0"])
_0_Fissures.IfSeismogramDC._tc_ChannelId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ChannelId)
omniORB.registerType(ChannelId._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ChannelId, _0_Fissures.IfSeismogramDC._tc_ChannelId)
del ChannelId

# typedef ... ChannelGroup
class ChannelGroup:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ChannelGroup:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.ChannelGroup = ChannelGroup
_0_Fissures.IfSeismogramDC._d_ChannelGroup  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"]
_0_Fissures.IfSeismogramDC._ad_ChannelGroup = (omniORB.tcInternal.tv_alias, ChannelGroup._NP_RepositoryId, "ChannelGroup", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelGroup:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_ChannelGroup = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ChannelGroup)
omniORB.registerType(ChannelGroup._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ChannelGroup, _0_Fissures.IfSeismogramDC._tc_ChannelGroup)
del ChannelGroup

# typedef ... ChannelIdSeq
class ChannelIdSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ChannelIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.ChannelIdSeq = ChannelIdSeq
_0_Fissures.IfSeismogramDC._d_ChannelIdSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"]
_0_Fissures.IfSeismogramDC._ad_ChannelIdSeq = (omniORB.tcInternal.tv_alias, ChannelIdSeq._NP_RepositoryId, "ChannelIdSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_ChannelIdSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ChannelIdSeq)
omniORB.registerType(ChannelIdSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ChannelIdSeq, _0_Fissures.IfSeismogramDC._tc_ChannelIdSeq)
del ChannelIdSeq

# typedef ... ParameterRef
class ParameterRef (_0_Fissures.IfParameterMgr.ParameterRef):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ParameterRef:1.0"

_0_Fissures.IfSeismogramDC.ParameterRef = ParameterRef
_0_Fissures.IfSeismogramDC._d_ParameterRef  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterRef:1.0"]
_0_Fissures.IfSeismogramDC._ad_ParameterRef = (omniORB.tcInternal.tv_alias, ParameterRef._NP_RepositoryId, "ParameterRef", omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterRef:1.0"])
_0_Fissures.IfSeismogramDC._tc_ParameterRef = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ParameterRef)
omniORB.registerType(ParameterRef._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ParameterRef, _0_Fissures.IfSeismogramDC._tc_ParameterRef)
del ParameterRef

# interface DataCenterCallBack;
_0_Fissures.IfSeismogramDC._d_DataCenterCallBack = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramDC/DataCenterCallBack:1.0", "DataCenterCallBack")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/DataCenterCallBack:1.0"] = _0_Fissures.IfSeismogramDC._d_DataCenterCallBack

# typedef ... ServerRequestId
class ServerRequestId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.ServerRequestId = ServerRequestId
_0_Fissures.IfSeismogramDC._d_ServerRequestId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfSeismogramDC._ad_ServerRequestId = (omniORB.tcInternal.tv_alias, ServerRequestId._NP_RepositoryId, "ServerRequestId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramDC._tc_ServerRequestId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ServerRequestId)
omniORB.registerType(ServerRequestId._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ServerRequestId, _0_Fissures.IfSeismogramDC._tc_ServerRequestId)
del ServerRequestId

# typedef ... SeismogramId
class SeismogramId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.SeismogramId = SeismogramId
_0_Fissures.IfSeismogramDC._d_SeismogramId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfSeismogramDC._ad_SeismogramId = (omniORB.tcInternal.tv_alias, SeismogramId._NP_RepositoryId, "SeismogramId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramDC._tc_SeismogramId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_SeismogramId)
omniORB.registerType(SeismogramId._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_SeismogramId, _0_Fissures.IfSeismogramDC._tc_SeismogramId)
del SeismogramId

# typedef ... MotionVectorId
class MotionVectorId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.MotionVectorId = MotionVectorId
_0_Fissures.IfSeismogramDC._d_MotionVectorId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfSeismogramDC._ad_MotionVectorId = (omniORB.tcInternal.tv_alias, MotionVectorId._NP_RepositoryId, "MotionVectorId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramDC._tc_MotionVectorId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_MotionVectorId)
omniORB.registerType(MotionVectorId._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_MotionVectorId, _0_Fissures.IfSeismogramDC._tc_MotionVectorId)
del MotionVectorId

# struct Property
_0_Fissures.IfSeismogramDC.Property = omniORB.newEmptyClass()
class Property (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/Property:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_Fissures.IfSeismogramDC.Property = Property
_0_Fissures.IfSeismogramDC._d_Property  = (omniORB.tcInternal.tv_struct, Property, Property._NP_RepositoryId, "Property", "name", (omniORB.tcInternal.tv_string,0), "value", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramDC._tc_Property = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_Property)
omniORB.registerType(Property._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_Property, _0_Fissures.IfSeismogramDC._tc_Property)
del Property

# typedef ... PropertySeq
class PropertySeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/PropertySeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.PropertySeq = PropertySeq
_0_Fissures.IfSeismogramDC._d_PropertySeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/Property:1.0"], 0)
_0_Fissures.IfSeismogramDC._ad_PropertySeq = (omniORB.tcInternal.tv_alias, PropertySeq._NP_RepositoryId, "PropertySeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/Property:1.0"], 0))
_0_Fissures.IfSeismogramDC._tc_PropertySeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_PropertySeq)
omniORB.registerType(PropertySeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_PropertySeq, _0_Fissures.IfSeismogramDC._tc_PropertySeq)
del PropertySeq

# valuetype SeismogramAttr
_0_Fissures.IfSeismogramDC._d_SeismogramAttr = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"] = _0_Fissures.IfSeismogramDC._d_SeismogramAttr
_0_Fissures.IfSeismogramDC.SeismogramAttr = omniORB.newEmptyClass()

class SeismogramAttr (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 10:
                raise TypeError("SeismogramAttr() takes 10 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.properties = args[1]
            self.begin_time = args[2]
            self.num_points = args[3]
            self.sampling_info = args[4]
            self.y_unit = args[5]
            self.channel_id = args[6]
            self.parm_ids = args[7]
            self.time_corrections = args[8]
            self.sample_rate_history = args[9]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(SeismogramAttr._NP_RepositoryId, SeismogramAttr)

_0_Fissures.IfSeismogramDC.SeismogramAttr = SeismogramAttr
_0_Fissures.IfSeismogramDC._d_SeismogramAttr  = (omniORB.tcInternal.tv_value, SeismogramAttr, SeismogramAttr._NP_RepositoryId, "SeismogramAttr", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramId:1.0"], _0_CORBA.PRIVATE_MEMBER, "properties", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/PropertySeq:1.0"], _0_CORBA.PUBLIC_MEMBER, "begin_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], _0_CORBA.PUBLIC_MEMBER, "num_points", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER, "sampling_info", omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], _0_CORBA.PUBLIC_MEMBER, "y_unit", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], _0_CORBA.PUBLIC_MEMBER, "channel_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ChannelId:1.0"], _0_CORBA.PUBLIC_MEMBER, "parm_ids", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ParameterRef:1.0"], 0), _0_CORBA.PUBLIC_MEMBER, "time_corrections", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeIntervalSeq:1.0"], _0_CORBA.PUBLIC_MEMBER, "sample_rate_history", omniORB.typeMapping["IDL:iris.edu/Fissures/SamplingSeq:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfSeismogramDC._tc_SeismogramAttr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_SeismogramAttr)
omniORB.registerType(SeismogramAttr._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_SeismogramAttr, _0_Fissures.IfSeismogramDC._tc_SeismogramAttr)
del SeismogramAttr


# typedef ... SeismogramAttrSeq
class SeismogramAttrSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttrSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.SeismogramAttrSeq = SeismogramAttrSeq
_0_Fissures.IfSeismogramDC._d_SeismogramAttrSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"], 0)
_0_Fissures.IfSeismogramDC._ad_SeismogramAttrSeq = (omniORB.tcInternal.tv_alias, SeismogramAttrSeq._NP_RepositoryId, "SeismogramAttrSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"], 0))
_0_Fissures.IfSeismogramDC._tc_SeismogramAttrSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_SeismogramAttrSeq)
omniORB.registerType(SeismogramAttrSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_SeismogramAttrSeq, _0_Fissures.IfSeismogramDC._tc_SeismogramAttrSeq)
del SeismogramAttrSeq

# valuetype MotionVectorAttr
_0_Fissures.IfSeismogramDC._d_MotionVectorAttr = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorAttr:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorAttr:1.0"] = _0_Fissures.IfSeismogramDC._d_MotionVectorAttr
_0_Fissures.IfSeismogramDC.MotionVectorAttr = omniORB.newEmptyClass()

class MotionVectorAttr (_0_CORBA.ValueBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorAttr:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 10:
                raise TypeError("MotionVectorAttr() takes 10 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.properties = args[1]
            self.begin_time = args[2]
            self.num_points = args[3]
            self.sampling_info = args[4]
            self.y_unit = args[5]
            self.channel_group = args[6]
            self.parm_ids = args[7]
            self.time_corrections = args[8]
            self.sample_rate_history = args[9]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(MotionVectorAttr._NP_RepositoryId, MotionVectorAttr)

_0_Fissures.IfSeismogramDC.MotionVectorAttr = MotionVectorAttr
_0_Fissures.IfSeismogramDC._d_MotionVectorAttr  = (omniORB.tcInternal.tv_value, MotionVectorAttr, MotionVectorAttr._NP_RepositoryId, "MotionVectorAttr", _0_CORBA.VM_NONE, None, _0_CORBA.tcInternal.tv_null, "id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorId:1.0"], _0_CORBA.PRIVATE_MEMBER, "properties", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/PropertySeq:1.0"], _0_CORBA.PUBLIC_MEMBER, "begin_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], _0_CORBA.PUBLIC_MEMBER, "num_points", omniORB.tcInternal.tv_long, _0_CORBA.PUBLIC_MEMBER, "sampling_info", omniORB.typeMapping["IDL:iris.edu/Fissures/Sampling:1.0"], _0_CORBA.PUBLIC_MEMBER, "y_unit", omniORB.typeMapping["IDL:iris.edu/Fissures/Unit:1.0"], _0_CORBA.PUBLIC_MEMBER, "channel_group", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ChannelGroup:1.0"], _0_CORBA.PUBLIC_MEMBER, "parm_ids", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ParameterRef:1.0"], 0), _0_CORBA.PUBLIC_MEMBER, "time_corrections", omniORB.typeMapping["IDL:iris.edu/Fissures/TimeIntervalSeq:1.0"], _0_CORBA.PUBLIC_MEMBER, "sample_rate_history", omniORB.typeMapping["IDL:iris.edu/Fissures/SamplingSeq:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfSeismogramDC._tc_MotionVectorAttr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_MotionVectorAttr)
omniORB.registerType(MotionVectorAttr._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_MotionVectorAttr, _0_Fissures.IfSeismogramDC._tc_MotionVectorAttr)
del MotionVectorAttr


# valuetype LocalSeismogram
_0_Fissures.IfSeismogramDC._d_LocalSeismogram = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogram:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogram:1.0"] = _0_Fissures.IfSeismogramDC._d_LocalSeismogram
_0_Fissures.IfSeismogramDC.LocalSeismogram = omniORB.newEmptyClass()

class LocalSeismogram (_0_Fissures.IfSeismogramDC.SeismogramAttr, _0_Fissures__POA.IfTimeSeries.TimeSeriesAccess, _0_Fissures__POA.IfTimeSeries.TimeSeriesAdmin):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogram:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 11:
                raise TypeError("LocalSeismogram() takes 11 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.properties = args[1]
            self.begin_time = args[2]
            self.num_points = args[3]
            self.sampling_info = args[4]
            self.y_unit = args[5]
            self.channel_id = args[6]
            self.parm_ids = args[7]
            self.time_corrections = args[8]
            self.sample_rate_history = args[9]
            self.data = args[10]
        if kwargs:
            self.__dict__.update(kwargs)


    _omni_op_d = {}
    _omni_op_d.update(_0_Fissures__POA.IfTimeSeries.TimeSeriesAccess._omni_op_d)
    _omni_op_d.update(_0_Fissures__POA.IfTimeSeries.TimeSeriesAdmin._omni_op_d)

LocalSeismogram._omni_skeleton = LocalSeismogram

omniORB.registerValueFactory(LocalSeismogram._NP_RepositoryId, LocalSeismogram)


# LocalSeismogram object reference
class _objref_LocalSeismogram (_0_Fissures.IfTimeSeries._objref_TimeSeriesAccess, _0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin):
    _NP_RepositoryId = LocalSeismogram._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfTimeSeries._objref_TimeSeriesAccess.__init__(self)
        _0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin.__init__(self)

    __methods__ = _0_Fissures.IfTimeSeries._objref_TimeSeriesAccess.__methods__ + _0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin.__methods__

omniORB.registerObjref(LocalSeismogram._NP_RepositoryId, _objref_LocalSeismogram)
_0_Fissures.IfSeismogramDC._objref_LocalSeismogram = _objref_LocalSeismogram
del _objref_LocalSeismogram
_0_Fissures.IfSeismogramDC.LocalSeismogram = LocalSeismogram
_0_Fissures.IfSeismogramDC._d_LocalSeismogram  = (omniORB.tcInternal.tv_value, LocalSeismogram, LocalSeismogram._NP_RepositoryId, "LocalSeismogram", _0_CORBA.VM_NONE, None, _0_Fissures.IfSeismogramDC._d_SeismogramAttr, "data", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/TimeSeriesDataSel:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfSeismogramDC._tc_LocalSeismogram = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_LocalSeismogram)
omniORB.registerType(LocalSeismogram._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_LocalSeismogram, _0_Fissures.IfSeismogramDC._tc_LocalSeismogram)
del LocalSeismogram


# typedef ... LocalSeismogramSeq
class LocalSeismogramSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogramSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.LocalSeismogramSeq = LocalSeismogramSeq
_0_Fissures.IfSeismogramDC._d_LocalSeismogramSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogram:1.0"], 0)
_0_Fissures.IfSeismogramDC._ad_LocalSeismogramSeq = (omniORB.tcInternal.tv_alias, LocalSeismogramSeq._NP_RepositoryId, "LocalSeismogramSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogram:1.0"], 0))
_0_Fissures.IfSeismogramDC._tc_LocalSeismogramSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_LocalSeismogramSeq)
omniORB.registerType(LocalSeismogramSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_LocalSeismogramSeq, _0_Fissures.IfSeismogramDC._tc_LocalSeismogramSeq)
del LocalSeismogramSeq

# struct VectorComponent
_0_Fissures.IfSeismogramDC.VectorComponent = omniORB.newEmptyClass()
class VectorComponent (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/VectorComponent:1.0"

    def __init__(self, channel, data):
        self.channel = channel
        self.data = data

_0_Fissures.IfSeismogramDC.VectorComponent = VectorComponent
_0_Fissures.IfSeismogramDC._d_VectorComponent  = (omniORB.tcInternal.tv_struct, VectorComponent, VectorComponent._NP_RepositoryId, "VectorComponent", "channel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ChannelId:1.0"], "data", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/TimeSeriesDataSel:1.0"])
_0_Fissures.IfSeismogramDC._tc_VectorComponent = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_VectorComponent)
omniORB.registerType(VectorComponent._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_VectorComponent, _0_Fissures.IfSeismogramDC._tc_VectorComponent)
del VectorComponent

# typedef ... VectorComponentSeq
class VectorComponentSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/VectorComponentSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.VectorComponentSeq = VectorComponentSeq
_0_Fissures.IfSeismogramDC._d_VectorComponentSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/VectorComponent:1.0"], 3)
_0_Fissures.IfSeismogramDC._ad_VectorComponentSeq = (omniORB.tcInternal.tv_alias, VectorComponentSeq._NP_RepositoryId, "VectorComponentSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/VectorComponent:1.0"], 3))
_0_Fissures.IfSeismogramDC._tc_VectorComponentSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_VectorComponentSeq)
omniORB.registerType(VectorComponentSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_VectorComponentSeq, _0_Fissures.IfSeismogramDC._tc_VectorComponentSeq)
del VectorComponentSeq

# valuetype LocalMotionVector
_0_Fissures.IfSeismogramDC._d_LocalMotionVector = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVector:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVector:1.0"] = _0_Fissures.IfSeismogramDC._d_LocalMotionVector
_0_Fissures.IfSeismogramDC.LocalMotionVector = omniORB.newEmptyClass()

class LocalMotionVector (_0_Fissures.IfSeismogramDC.MotionVectorAttr):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVector:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 11:
                raise TypeError("LocalMotionVector() takes 11 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.properties = args[1]
            self.begin_time = args[2]
            self.num_points = args[3]
            self.sampling_info = args[4]
            self.y_unit = args[5]
            self.channel_group = args[6]
            self.parm_ids = args[7]
            self.time_corrections = args[8]
            self.sample_rate_history = args[9]
            self.data = args[10]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(LocalMotionVector._NP_RepositoryId, LocalMotionVector)

_0_Fissures.IfSeismogramDC.LocalMotionVector = LocalMotionVector
_0_Fissures.IfSeismogramDC._d_LocalMotionVector  = (omniORB.tcInternal.tv_value, LocalMotionVector, LocalMotionVector._NP_RepositoryId, "LocalMotionVector", _0_CORBA.VM_NONE, None, _0_Fissures.IfSeismogramDC._d_MotionVectorAttr, "data", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/VectorComponentSeq:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfSeismogramDC._tc_LocalMotionVector = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_LocalMotionVector)
omniORB.registerType(LocalMotionVector._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_LocalMotionVector, _0_Fissures.IfSeismogramDC._tc_LocalMotionVector)
del LocalMotionVector


# typedef ... LocalMotionVectorSeq
class LocalMotionVectorSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVectorSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.LocalMotionVectorSeq = LocalMotionVectorSeq
_0_Fissures.IfSeismogramDC._d_LocalMotionVectorSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVector:1.0"], 0)
_0_Fissures.IfSeismogramDC._ad_LocalMotionVectorSeq = (omniORB.tcInternal.tv_alias, LocalMotionVectorSeq._NP_RepositoryId, "LocalMotionVectorSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVector:1.0"], 0))
_0_Fissures.IfSeismogramDC._tc_LocalMotionVectorSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_LocalMotionVectorSeq)
omniORB.registerType(LocalMotionVectorSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_LocalMotionVectorSeq, _0_Fissures.IfSeismogramDC._tc_LocalMotionVectorSeq)
del LocalMotionVectorSeq

# struct RequestFilter
_0_Fissures.IfSeismogramDC.RequestFilter = omniORB.newEmptyClass()
class RequestFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilter:1.0"

    def __init__(self, channel_id, start_time, end_time):
        self.channel_id = channel_id
        self.start_time = start_time
        self.end_time = end_time

_0_Fissures.IfSeismogramDC.RequestFilter = RequestFilter
_0_Fissures.IfSeismogramDC._d_RequestFilter  = (omniORB.tcInternal.tv_struct, RequestFilter, RequestFilter._NP_RepositoryId, "RequestFilter", "channel_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ChannelId:1.0"], "start_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], "end_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures.IfSeismogramDC._tc_RequestFilter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_RequestFilter)
omniORB.registerType(RequestFilter._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_RequestFilter, _0_Fissures.IfSeismogramDC._tc_RequestFilter)
del RequestFilter

# typedef ... RequestFilterSeq
class RequestFilterSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.RequestFilterSeq = RequestFilterSeq
_0_Fissures.IfSeismogramDC._d_RequestFilterSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilter:1.0"], 0)
_0_Fissures.IfSeismogramDC._ad_RequestFilterSeq = (omniORB.tcInternal.tv_alias, RequestFilterSeq._NP_RepositoryId, "RequestFilterSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilter:1.0"], 0))
_0_Fissures.IfSeismogramDC._tc_RequestFilterSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_RequestFilterSeq)
omniORB.registerType(RequestFilterSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_RequestFilterSeq, _0_Fissures.IfSeismogramDC._tc_RequestFilterSeq)
del RequestFilterSeq

# struct GroupRequest
_0_Fissures.IfSeismogramDC.GroupRequest = omniORB.newEmptyClass()
class GroupRequest (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequest:1.0"

    def __init__(self, channels, start_time, end_time):
        self.channels = channels
        self.start_time = start_time
        self.end_time = end_time

_0_Fissures.IfSeismogramDC.GroupRequest = GroupRequest
_0_Fissures.IfSeismogramDC._d_GroupRequest  = (omniORB.tcInternal.tv_struct, GroupRequest, GroupRequest._NP_RepositoryId, "GroupRequest", "channels", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ChannelGroup:1.0"], "start_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"], "end_time", omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"])
_0_Fissures.IfSeismogramDC._tc_GroupRequest = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_GroupRequest)
omniORB.registerType(GroupRequest._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_GroupRequest, _0_Fissures.IfSeismogramDC._tc_GroupRequest)
del GroupRequest

# typedef ... GroupRequestSeq
class GroupRequestSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequestSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.GroupRequestSeq = GroupRequestSeq
_0_Fissures.IfSeismogramDC._d_GroupRequestSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequest:1.0"], 0)
_0_Fissures.IfSeismogramDC._ad_GroupRequestSeq = (omniORB.tcInternal.tv_alias, GroupRequestSeq._NP_RepositoryId, "GroupRequestSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequest:1.0"], 0))
_0_Fissures.IfSeismogramDC._tc_GroupRequestSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_GroupRequestSeq)
omniORB.registerType(GroupRequestSeq._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_GroupRequestSeq, _0_Fissures.IfSeismogramDC._tc_GroupRequestSeq)
del GroupRequestSeq

# typedef ... ErrorCode
class ErrorCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/ErrorCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.ErrorCode = ErrorCode
_0_Fissures.IfSeismogramDC._d_ErrorCode  = omniORB.typeMapping["IDL:iris.edu/Fissures/ErrorCode:1.0"]
_0_Fissures.IfSeismogramDC._ad_ErrorCode = (omniORB.tcInternal.tv_alias, ErrorCode._NP_RepositoryId, "ErrorCode", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/ErrorCode:1.0"]._d)
_0_Fissures.IfSeismogramDC._tc_ErrorCode = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_ErrorCode)
omniORB.registerType(ErrorCode._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_ErrorCode, _0_Fissures.IfSeismogramDC._tc_ErrorCode)
del ErrorCode

# typedef ... Error
class Error (_0_Fissures.Error):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/Error:1.0"

_0_Fissures.IfSeismogramDC.Error = Error
_0_Fissures.IfSeismogramDC._d_Error  = omniORB.typeMapping["IDL:iris.edu/Fissures/Error:1.0"]
_0_Fissures.IfSeismogramDC._ad_Error = (omniORB.tcInternal.tv_alias, Error._NP_RepositoryId, "Error", omniORB.typeMapping["IDL:iris.edu/Fissures/Error:1.0"])
_0_Fissures.IfSeismogramDC._tc_Error = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_Error)
omniORB.registerType(Error._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_Error, _0_Fissures.IfSeismogramDC._tc_Error)
del Error
_0_Fissures.IfSeismogramDC.INVALID_REQUEST = 2
_0_Fissures.IfSeismogramDC.SERVER_BUSY = 3

# typedef ... RequestStatus
class RequestStatus:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramDC/RequestStatus:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramDC.RequestStatus = RequestStatus
_0_Fissures.IfSeismogramDC._d_RequestStatus  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfSeismogramDC._ad_RequestStatus = (omniORB.tcInternal.tv_alias, RequestStatus._NP_RepositoryId, "RequestStatus", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramDC._tc_RequestStatus = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._ad_RequestStatus)
omniORB.registerType(RequestStatus._NP_RepositoryId, _0_Fissures.IfSeismogramDC._ad_RequestStatus, _0_Fissures.IfSeismogramDC._tc_RequestStatus)
del RequestStatus

# interface DataCenter
_0_Fissures.IfSeismogramDC._d_DataCenter = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramDC/DataCenter:1.0", "DataCenter")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/DataCenter:1.0"] = _0_Fissures.IfSeismogramDC._d_DataCenter
_0_Fissures.IfSeismogramDC.DataCenter = omniORB.newEmptyClass()
class DataCenter :
    _NP_RepositoryId = _0_Fissures.IfSeismogramDC._d_DataCenter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramDC.DataCenter = DataCenter
_0_Fissures.IfSeismogramDC._tc_DataCenter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_DataCenter)
omniORB.registerType(DataCenter._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_DataCenter, _0_Fissures.IfSeismogramDC._tc_DataCenter)

# DataCenter operations and attributes
DataCenter._d_available_data = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"], ), None)
DataCenter._d_request_seismograms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/DataCenterCallBack:1.0"], omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/Time:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
DataCenter._d_retrieve_seismograms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogramSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
DataCenter._d_queue_seismograms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
DataCenter._d_retrieve_queue = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogramSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
DataCenter._d_cancel_request = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
DataCenter._d_request_status = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestStatus:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# DataCenter object reference
class _objref_DataCenter (CORBA.Object):
    _NP_RepositoryId = DataCenter._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def available_data(self, *args):
        return _omnipy.invoke(self, "available_data", _0_Fissures.IfSeismogramDC.DataCenter._d_available_data, args)

    def request_seismograms(self, *args):
        return _omnipy.invoke(self, "request_seismograms", _0_Fissures.IfSeismogramDC.DataCenter._d_request_seismograms, args)

    def retrieve_seismograms(self, *args):
        return _omnipy.invoke(self, "retrieve_seismograms", _0_Fissures.IfSeismogramDC.DataCenter._d_retrieve_seismograms, args)

    def queue_seismograms(self, *args):
        return _omnipy.invoke(self, "queue_seismograms", _0_Fissures.IfSeismogramDC.DataCenter._d_queue_seismograms, args)

    def retrieve_queue(self, *args):
        return _omnipy.invoke(self, "retrieve_queue", _0_Fissures.IfSeismogramDC.DataCenter._d_retrieve_queue, args)

    def cancel_request(self, *args):
        return _omnipy.invoke(self, "cancel_request", _0_Fissures.IfSeismogramDC.DataCenter._d_cancel_request, args)

    def request_status(self, *args):
        return _omnipy.invoke(self, "request_status", _0_Fissures.IfSeismogramDC.DataCenter._d_request_status, args)

    __methods__ = ["available_data", "request_seismograms", "retrieve_seismograms", "queue_seismograms", "retrieve_queue", "cancel_request", "request_status"] + CORBA.Object.__methods__

omniORB.registerObjref(DataCenter._NP_RepositoryId, _objref_DataCenter)
_0_Fissures.IfSeismogramDC._objref_DataCenter = _objref_DataCenter
del DataCenter, _objref_DataCenter

# DataCenter skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramDC"
class DataCenter (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramDC.DataCenter._NP_RepositoryId


    _omni_op_d = {"available_data": _0_Fissures.IfSeismogramDC.DataCenter._d_available_data, "request_seismograms": _0_Fissures.IfSeismogramDC.DataCenter._d_request_seismograms, "retrieve_seismograms": _0_Fissures.IfSeismogramDC.DataCenter._d_retrieve_seismograms, "queue_seismograms": _0_Fissures.IfSeismogramDC.DataCenter._d_queue_seismograms, "retrieve_queue": _0_Fissures.IfSeismogramDC.DataCenter._d_retrieve_queue, "cancel_request": _0_Fissures.IfSeismogramDC.DataCenter._d_cancel_request, "request_status": _0_Fissures.IfSeismogramDC.DataCenter._d_request_status}

DataCenter._omni_skeleton = DataCenter
_0_Fissures__POA.IfSeismogramDC.DataCenter = DataCenter
omniORB.registerSkeleton(DataCenter._NP_RepositoryId, DataCenter)
del DataCenter
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramDC"

# interface GroupingDataCenter
_0_Fissures.IfSeismogramDC._d_GroupingDataCenter = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramDC/GroupingDataCenter:1.0", "GroupingDataCenter")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupingDataCenter:1.0"] = _0_Fissures.IfSeismogramDC._d_GroupingDataCenter
_0_Fissures.IfSeismogramDC.GroupingDataCenter = omniORB.newEmptyClass()
class GroupingDataCenter (_0_Fissures.IfSeismogramDC.DataCenter):
    _NP_RepositoryId = _0_Fissures.IfSeismogramDC._d_GroupingDataCenter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramDC.GroupingDataCenter = GroupingDataCenter
_0_Fissures.IfSeismogramDC._tc_GroupingDataCenter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_GroupingDataCenter)
omniORB.registerType(GroupingDataCenter._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_GroupingDataCenter, _0_Fissures.IfSeismogramDC._tc_GroupingDataCenter)

# GroupingDataCenter operations and attributes
GroupingDataCenter._d_request_groups = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequestSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/DataCenterCallBack:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
GroupingDataCenter._d_retrieve_groups = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequestSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVectorSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
GroupingDataCenter._d_queue_groups = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequestSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
GroupingDataCenter._d_retrieve_group_queue = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVectorSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)

# GroupingDataCenter object reference
class _objref_GroupingDataCenter (_0_Fissures.IfSeismogramDC._objref_DataCenter):
    _NP_RepositoryId = GroupingDataCenter._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfSeismogramDC._objref_DataCenter.__init__(self)

    def request_groups(self, *args):
        return _omnipy.invoke(self, "request_groups", _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_request_groups, args)

    def retrieve_groups(self, *args):
        return _omnipy.invoke(self, "retrieve_groups", _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_retrieve_groups, args)

    def queue_groups(self, *args):
        return _omnipy.invoke(self, "queue_groups", _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_queue_groups, args)

    def retrieve_group_queue(self, *args):
        return _omnipy.invoke(self, "retrieve_group_queue", _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_retrieve_group_queue, args)

    __methods__ = ["request_groups", "retrieve_groups", "queue_groups", "retrieve_group_queue"] + _0_Fissures.IfSeismogramDC._objref_DataCenter.__methods__

omniORB.registerObjref(GroupingDataCenter._NP_RepositoryId, _objref_GroupingDataCenter)
_0_Fissures.IfSeismogramDC._objref_GroupingDataCenter = _objref_GroupingDataCenter
del GroupingDataCenter, _objref_GroupingDataCenter

# GroupingDataCenter skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramDC"
class GroupingDataCenter (_0_Fissures__POA.IfSeismogramDC.DataCenter):
    _NP_RepositoryId = _0_Fissures.IfSeismogramDC.GroupingDataCenter._NP_RepositoryId


    _omni_op_d = {"request_groups": _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_request_groups, "retrieve_groups": _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_retrieve_groups, "queue_groups": _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_queue_groups, "retrieve_group_queue": _0_Fissures.IfSeismogramDC.GroupingDataCenter._d_retrieve_group_queue}
    _omni_op_d.update(_0_Fissures__POA.IfSeismogramDC.DataCenter._omni_op_d)

GroupingDataCenter._omni_skeleton = GroupingDataCenter
_0_Fissures__POA.IfSeismogramDC.GroupingDataCenter = GroupingDataCenter
omniORB.registerSkeleton(GroupingDataCenter._NP_RepositoryId, GroupingDataCenter)
del GroupingDataCenter
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramDC"

# interface DataCenterCallBack
_0_Fissures.IfSeismogramDC._d_DataCenterCallBack = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramDC/DataCenterCallBack:1.0", "DataCenterCallBack")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/DataCenterCallBack:1.0"] = _0_Fissures.IfSeismogramDC._d_DataCenterCallBack
_0_Fissures.IfSeismogramDC.DataCenterCallBack = omniORB.newEmptyClass()
class DataCenterCallBack :
    _NP_RepositoryId = _0_Fissures.IfSeismogramDC._d_DataCenterCallBack[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramDC.DataCenterCallBack = DataCenterCallBack
_0_Fissures.IfSeismogramDC._tc_DataCenterCallBack = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramDC._d_DataCenterCallBack)
omniORB.registerType(DataCenterCallBack._NP_RepositoryId, _0_Fissures.IfSeismogramDC._d_DataCenterCallBack, _0_Fissures.IfSeismogramDC._tc_DataCenterCallBack)

# DataCenterCallBack operations and attributes
DataCenterCallBack._d_return_seismograms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogramSeq:1.0"]), (), None, None, 1)
DataCenterCallBack._d_return_group = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVectorSeq:1.0"]), (), None, None, 1)
DataCenterCallBack._d_return_error = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/Error:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"]), (), None)
DataCenterCallBack._d_finished = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), (), None)
DataCenterCallBack._d_canceled = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/ServerRequestId:1.0"], ), (), None)

# DataCenterCallBack object reference
class _objref_DataCenterCallBack (CORBA.Object):
    _NP_RepositoryId = DataCenterCallBack._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def return_seismograms(self, *args):
        return _omnipy.invoke(self, "return_seismograms", _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_return_seismograms, args)

    def return_group(self, *args):
        return _omnipy.invoke(self, "return_group", _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_return_group, args)

    def return_error(self, *args):
        return _omnipy.invoke(self, "return_error", _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_return_error, args)

    def finished(self, *args):
        return _omnipy.invoke(self, "finished", _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_finished, args)

    def canceled(self, *args):
        return _omnipy.invoke(self, "canceled", _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_canceled, args)

    __methods__ = ["return_seismograms", "return_group", "return_error", "finished", "canceled"] + CORBA.Object.__methods__

omniORB.registerObjref(DataCenterCallBack._NP_RepositoryId, _objref_DataCenterCallBack)
_0_Fissures.IfSeismogramDC._objref_DataCenterCallBack = _objref_DataCenterCallBack
del DataCenterCallBack, _objref_DataCenterCallBack

# DataCenterCallBack skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramDC"
class DataCenterCallBack (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramDC.DataCenterCallBack._NP_RepositoryId


    _omni_op_d = {"return_seismograms": _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_return_seismograms, "return_group": _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_return_group, "return_error": _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_return_error, "finished": _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_finished, "canceled": _0_Fissures.IfSeismogramDC.DataCenterCallBack._d_canceled}

DataCenterCallBack._omni_skeleton = DataCenterCallBack
_0_Fissures__POA.IfSeismogramDC.DataCenterCallBack = DataCenterCallBack
omniORB.registerSkeleton(DataCenterCallBack._NP_RepositoryId, DataCenterCallBack)
del DataCenterCallBack
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramDC"

#
# End of module "Fissures.IfSeismogramDC"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"IfSeismogramMgr.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"IfSeismogramMgr.idl")


#
# Start of module "Fissures.IfSeismogramMgr"
#
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"
_0_Fissures.IfSeismogramMgr = omniORB.openModule("obspy.fissures.idl.Fissures.IfSeismogramMgr", r"IfSeismogramMgr.idl")
_0_Fissures__POA.IfSeismogramMgr = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfSeismogramMgr", r"IfSeismogramMgr.idl")

_0_Fissures.IfSeismogramMgr.VERSION = "1.0"

# typedef ... TimeSeriesAccess
class TimeSeriesAccess:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/TimeSeriesAccess:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.TimeSeriesAccess = TimeSeriesAccess
_0_Fissures.IfSeismogramMgr._d_TimeSeriesAccess  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAccess:1.0"]
_0_Fissures.IfSeismogramMgr._ad_TimeSeriesAccess = (omniORB.tcInternal.tv_alias, TimeSeriesAccess._NP_RepositoryId, "TimeSeriesAccess", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAccess:1.0"])
_0_Fissures.IfSeismogramMgr._tc_TimeSeriesAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_TimeSeriesAccess)
omniORB.registerType(TimeSeriesAccess._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_TimeSeriesAccess, _0_Fissures.IfSeismogramMgr._tc_TimeSeriesAccess)
del TimeSeriesAccess

# typedef ... TimeSeriesAdmin
class TimeSeriesAdmin:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/TimeSeriesAdmin:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.TimeSeriesAdmin = TimeSeriesAdmin
_0_Fissures.IfSeismogramMgr._d_TimeSeriesAdmin  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAdmin:1.0"]
_0_Fissures.IfSeismogramMgr._ad_TimeSeriesAdmin = (omniORB.tcInternal.tv_alias, TimeSeriesAdmin._NP_RepositoryId, "TimeSeriesAdmin", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAdmin:1.0"])
_0_Fissures.IfSeismogramMgr._tc_TimeSeriesAdmin = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_TimeSeriesAdmin)
omniORB.registerType(TimeSeriesAdmin._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_TimeSeriesAdmin, _0_Fissures.IfSeismogramMgr._tc_TimeSeriesAdmin)
del TimeSeriesAdmin

# typedef ... TimeSeriesDataSel
class TimeSeriesDataSel (_0_Fissures.IfTimeSeries.TimeSeriesDataSel):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/TimeSeriesDataSel:1.0"

_0_Fissures.IfSeismogramMgr.TimeSeriesDataSel = TimeSeriesDataSel
_0_Fissures.IfSeismogramMgr._d_TimeSeriesDataSel  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"]
_0_Fissures.IfSeismogramMgr._ad_TimeSeriesDataSel = (omniORB.tcInternal.tv_alias, TimeSeriesDataSel._NP_RepositoryId, "TimeSeriesDataSel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"])
_0_Fissures.IfSeismogramMgr._tc_TimeSeriesDataSel = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_TimeSeriesDataSel)
omniORB.registerType(TimeSeriesDataSel._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_TimeSeriesDataSel, _0_Fissures.IfSeismogramMgr._tc_TimeSeriesDataSel)
del TimeSeriesDataSel

# typedef ... LongSeq
class LongSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/LongSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.LongSeq = LongSeq
_0_Fissures.IfSeismogramMgr._d_LongSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"]
_0_Fissures.IfSeismogramMgr._ad_LongSeq = (omniORB.tcInternal.tv_alias, LongSeq._NP_RepositoryId, "LongSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"]._d)
_0_Fissures.IfSeismogramMgr._tc_LongSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_LongSeq)
omniORB.registerType(LongSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_LongSeq, _0_Fissures.IfSeismogramMgr._tc_LongSeq)
del LongSeq

# typedef ... ShortSeq
class ShortSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/ShortSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.ShortSeq = ShortSeq
_0_Fissures.IfSeismogramMgr._d_ShortSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"]
_0_Fissures.IfSeismogramMgr._ad_ShortSeq = (omniORB.tcInternal.tv_alias, ShortSeq._NP_RepositoryId, "ShortSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"]._d)
_0_Fissures.IfSeismogramMgr._tc_ShortSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_ShortSeq)
omniORB.registerType(ShortSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_ShortSeq, _0_Fissures.IfSeismogramMgr._tc_ShortSeq)
del ShortSeq

# typedef ... FloatSeq
class FloatSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/FloatSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.FloatSeq = FloatSeq
_0_Fissures.IfSeismogramMgr._d_FloatSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"]
_0_Fissures.IfSeismogramMgr._ad_FloatSeq = (omniORB.tcInternal.tv_alias, FloatSeq._NP_RepositoryId, "FloatSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"]._d)
_0_Fissures.IfSeismogramMgr._tc_FloatSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_FloatSeq)
omniORB.registerType(FloatSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_FloatSeq, _0_Fissures.IfSeismogramMgr._tc_FloatSeq)
del FloatSeq

# typedef ... DoubleSeq
class DoubleSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/DoubleSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.DoubleSeq = DoubleSeq
_0_Fissures.IfSeismogramMgr._d_DoubleSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"]
_0_Fissures.IfSeismogramMgr._ad_DoubleSeq = (omniORB.tcInternal.tv_alias, DoubleSeq._NP_RepositoryId, "DoubleSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"]._d)
_0_Fissures.IfSeismogramMgr._tc_DoubleSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_DoubleSeq)
omniORB.registerType(DoubleSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_DoubleSeq, _0_Fissures.IfSeismogramMgr._tc_DoubleSeq)
del DoubleSeq

# typedef ... EncodedData
class EncodedData (_0_Fissures.IfTimeSeries.EncodedData):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/EncodedData:1.0"

_0_Fissures.IfSeismogramMgr.EncodedData = EncodedData
_0_Fissures.IfSeismogramMgr._d_EncodedData  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"]
_0_Fissures.IfSeismogramMgr._ad_EncodedData = (omniORB.tcInternal.tv_alias, EncodedData._NP_RepositoryId, "EncodedData", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"])
_0_Fissures.IfSeismogramMgr._tc_EncodedData = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_EncodedData)
omniORB.registerType(EncodedData._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_EncodedData, _0_Fissures.IfSeismogramMgr._tc_EncodedData)
del EncodedData

# typedef ... EncodedDataSeq
class EncodedDataSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/EncodedDataSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.EncodedDataSeq = EncodedDataSeq
_0_Fissures.IfSeismogramMgr._d_EncodedDataSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/EncodedData:1.0"], 0)
_0_Fissures.IfSeismogramMgr._ad_EncodedDataSeq = (omniORB.tcInternal.tv_alias, EncodedDataSeq._NP_RepositoryId, "EncodedDataSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/EncodedData:1.0"], 0))
_0_Fissures.IfSeismogramMgr._tc_EncodedDataSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_EncodedDataSeq)
omniORB.registerType(EncodedDataSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_EncodedDataSeq, _0_Fissures.IfSeismogramMgr._tc_EncodedDataSeq)
del EncodedDataSeq

# typedef ... MotionVectorAttr
class MotionVectorAttr:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/MotionVectorAttr:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.MotionVectorAttr = MotionVectorAttr
_0_Fissures.IfSeismogramMgr._d_MotionVectorAttr  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorAttr:1.0"]
_0_Fissures.IfSeismogramMgr._ad_MotionVectorAttr = (omniORB.tcInternal.tv_alias, MotionVectorAttr._NP_RepositoryId, "MotionVectorAttr", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/MotionVectorAttr:1.0"])
_0_Fissures.IfSeismogramMgr._tc_MotionVectorAttr = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_MotionVectorAttr)
omniORB.registerType(MotionVectorAttr._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_MotionVectorAttr, _0_Fissures.IfSeismogramMgr._tc_MotionVectorAttr)
del MotionVectorAttr

# typedef ... ChannelIdSeq
class ChannelIdSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.ChannelIdSeq = ChannelIdSeq
_0_Fissures.IfSeismogramMgr._d_ChannelIdSeq  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"]
_0_Fissures.IfSeismogramMgr._ad_ChannelIdSeq = (omniORB.tcInternal.tv_alias, ChannelIdSeq._NP_RepositoryId, "ChannelIdSeq", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfNetwork/ChannelIdSeq:1.0"]._d)
_0_Fissures.IfSeismogramMgr._tc_ChannelIdSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_ChannelIdSeq)
omniORB.registerType(ChannelIdSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_ChannelIdSeq, _0_Fissures.IfSeismogramMgr._tc_ChannelIdSeq)
del ChannelIdSeq

# interface SeismogramFactory;
_0_Fissures.IfSeismogramMgr._d_SeismogramFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0", "SeismogramFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramFactory

# interface SeismogramFinder;
_0_Fissures.IfSeismogramMgr._d_SeismogramFinder = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFinder:1.0", "SeismogramFinder")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFinder:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramFinder

# interface SeismogramAccess;
_0_Fissures.IfSeismogramMgr._d_SeismogramAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccess:1.0", "SeismogramAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccess:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramAccess

# interface Seismogram;
_0_Fissures.IfSeismogramMgr._d_Seismogram = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0", "Seismogram")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"] = _0_Fissures.IfSeismogramMgr._d_Seismogram

# typedef ... SeismogramFactorySeq
class SeismogramFactorySeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactorySeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.SeismogramFactorySeq = SeismogramFactorySeq
_0_Fissures.IfSeismogramMgr._d_SeismogramFactorySeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0"], 0)
_0_Fissures.IfSeismogramMgr._ad_SeismogramFactorySeq = (omniORB.tcInternal.tv_alias, SeismogramFactorySeq._NP_RepositoryId, "SeismogramFactorySeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0"], 0))
_0_Fissures.IfSeismogramMgr._tc_SeismogramFactorySeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_SeismogramFactorySeq)
omniORB.registerType(SeismogramFactorySeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_SeismogramFactorySeq, _0_Fissures.IfSeismogramMgr._tc_SeismogramFactorySeq)
del SeismogramFactorySeq

# typedef ... SeismogramAccessSeq
class SeismogramAccessSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccessSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.SeismogramAccessSeq = SeismogramAccessSeq
_0_Fissures.IfSeismogramMgr._d_SeismogramAccessSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccess:1.0"], 0)
_0_Fissures.IfSeismogramMgr._ad_SeismogramAccessSeq = (omniORB.tcInternal.tv_alias, SeismogramAccessSeq._NP_RepositoryId, "SeismogramAccessSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccess:1.0"], 0))
_0_Fissures.IfSeismogramMgr._tc_SeismogramAccessSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_SeismogramAccessSeq)
omniORB.registerType(SeismogramAccessSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_SeismogramAccessSeq, _0_Fissures.IfSeismogramMgr._tc_SeismogramAccessSeq)
del SeismogramAccessSeq

# typedef ... SeismogramSeq
class SeismogramSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.SeismogramSeq = SeismogramSeq
_0_Fissures.IfSeismogramMgr._d_SeismogramSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"], 0)
_0_Fissures.IfSeismogramMgr._ad_SeismogramSeq = (omniORB.tcInternal.tv_alias, SeismogramSeq._NP_RepositoryId, "SeismogramSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"], 0))
_0_Fissures.IfSeismogramMgr._tc_SeismogramSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_SeismogramSeq)
omniORB.registerType(SeismogramSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_SeismogramSeq, _0_Fissures.IfSeismogramMgr._tc_SeismogramSeq)
del SeismogramSeq

# typedef ... MirrorId
class MirrorId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.MirrorId = MirrorId
_0_Fissures.IfSeismogramMgr._d_MirrorId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfSeismogramMgr._ad_MirrorId = (omniORB.tcInternal.tv_alias, MirrorId._NP_RepositoryId, "MirrorId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramMgr._tc_MirrorId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_MirrorId)
omniORB.registerType(MirrorId._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_MirrorId, _0_Fissures.IfSeismogramMgr._tc_MirrorId)
del MirrorId

# struct MirrorFilter
_0_Fissures.IfSeismogramMgr.MirrorFilter = omniORB.newEmptyClass()
class MirrorFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFilter:1.0"

    def __init__(self, network_name, station_name, site_id, channel_code):
        self.network_name = network_name
        self.station_name = station_name
        self.site_id = site_id
        self.channel_code = channel_code

_0_Fissures.IfSeismogramMgr.MirrorFilter = MirrorFilter
_0_Fissures.IfSeismogramMgr._d_MirrorFilter  = (omniORB.tcInternal.tv_struct, MirrorFilter, MirrorFilter._NP_RepositoryId, "MirrorFilter", "network_name", (omniORB.tcInternal.tv_string,0), "station_name", (omniORB.tcInternal.tv_string,0), "site_id", (omniORB.tcInternal.tv_string,0), "channel_code", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfSeismogramMgr._tc_MirrorFilter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_MirrorFilter)
omniORB.registerType(MirrorFilter._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_MirrorFilter, _0_Fissures.IfSeismogramMgr._tc_MirrorFilter)
del MirrorFilter

# typedef ... MirrorFilterSeq
class MirrorFilterSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFilterSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.MirrorFilterSeq = MirrorFilterSeq
_0_Fissures.IfSeismogramMgr._d_MirrorFilterSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFilter:1.0"], 0)
_0_Fissures.IfSeismogramMgr._ad_MirrorFilterSeq = (omniORB.tcInternal.tv_alias, MirrorFilterSeq._NP_RepositoryId, "MirrorFilterSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFilter:1.0"], 0))
_0_Fissures.IfSeismogramMgr._tc_MirrorFilterSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_MirrorFilterSeq)
omniORB.registerType(MirrorFilterSeq._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_MirrorFilterSeq, _0_Fissures.IfSeismogramMgr._tc_MirrorFilterSeq)
del MirrorFilterSeq

# typedef ... ErrorCode
class ErrorCode:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/ErrorCode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfSeismogramMgr.ErrorCode = ErrorCode
_0_Fissures.IfSeismogramMgr._d_ErrorCode  = omniORB.typeMapping["IDL:iris.edu/Fissures/ErrorCode:1.0"]
_0_Fissures.IfSeismogramMgr._ad_ErrorCode = (omniORB.tcInternal.tv_alias, ErrorCode._NP_RepositoryId, "ErrorCode", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/ErrorCode:1.0"]._d)
_0_Fissures.IfSeismogramMgr._tc_ErrorCode = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._ad_ErrorCode)
omniORB.registerType(ErrorCode._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._ad_ErrorCode, _0_Fissures.IfSeismogramMgr._tc_ErrorCode)
del ErrorCode
_0_Fissures.IfSeismogramMgr.NOT_FOUND = 2
_0_Fissures.IfSeismogramMgr.ILLEGAL_ATTRIBUTE = 3
_0_Fissures.IfSeismogramMgr.WRONG_DATA_TYPE = 4

# valuetype RemoteMotionVector
_0_Fissures.IfSeismogramMgr._d_RemoteMotionVector = (omniORB.tcInternal.tv__indirect, ["IDL:iris.edu/Fissures/IfSeismogramMgr/RemoteMotionVector:1.0"])
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/RemoteMotionVector:1.0"] = _0_Fissures.IfSeismogramMgr._d_RemoteMotionVector
_0_Fissures.IfSeismogramMgr.RemoteMotionVector = omniORB.newEmptyClass()

class RemoteMotionVector (_0_Fissures.IfSeismogramDC.MotionVectorAttr):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/RemoteMotionVector:1.0"

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) != 11:
                raise TypeError("RemoteMotionVector() takes 11 arguments "
                                "(%d given)" % len(args))
            self.id = args[0]
            self.properties = args[1]
            self.begin_time = args[2]
            self.num_points = args[3]
            self.sampling_info = args[4]
            self.y_unit = args[5]
            self.channel_group = args[6]
            self.parm_ids = args[7]
            self.time_corrections = args[8]
            self.sample_rate_history = args[9]
            self.seismograms = args[10]
        if kwargs:
            self.__dict__.update(kwargs)

omniORB.registerValueFactory(RemoteMotionVector._NP_RepositoryId, RemoteMotionVector)

_0_Fissures.IfSeismogramMgr.RemoteMotionVector = RemoteMotionVector
_0_Fissures.IfSeismogramMgr._d_RemoteMotionVector  = (omniORB.tcInternal.tv_value, RemoteMotionVector, RemoteMotionVector._NP_RepositoryId, "RemoteMotionVector", _0_CORBA.VM_NONE, None, _0_Fissures.IfSeismogramDC._d_MotionVectorAttr, "seismograms", omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramSeq:1.0"], _0_CORBA.PUBLIC_MEMBER)
_0_Fissures.IfSeismogramMgr._tc_RemoteMotionVector = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_RemoteMotionVector)
omniORB.registerType(RemoteMotionVector._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_RemoteMotionVector, _0_Fissures.IfSeismogramMgr._tc_RemoteMotionVector)
del RemoteMotionVector


# exception NotMirroring
_0_Fissures.IfSeismogramMgr.NotMirroring = omniORB.newEmptyClass()
class NotMirroring (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/NotMirroring:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_Fissures.IfSeismogramMgr.NotMirroring = NotMirroring
_0_Fissures.IfSeismogramMgr._d_NotMirroring  = (omniORB.tcInternal.tv_except, NotMirroring, NotMirroring._NP_RepositoryId, "NotMirroring")
_0_Fissures.IfSeismogramMgr._tc_NotMirroring = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_NotMirroring)
omniORB.registerType(NotMirroring._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_NotMirroring, _0_Fissures.IfSeismogramMgr._tc_NotMirroring)
del NotMirroring

# exception UnknownChannel
_0_Fissures.IfSeismogramMgr.UnknownChannel = omniORB.newEmptyClass()
class UnknownChannel (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/UnknownChannel:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_Fissures.IfSeismogramMgr.UnknownChannel = UnknownChannel
_0_Fissures.IfSeismogramMgr._d_UnknownChannel  = (omniORB.tcInternal.tv_except, UnknownChannel, UnknownChannel._NP_RepositoryId, "UnknownChannel")
_0_Fissures.IfSeismogramMgr._tc_UnknownChannel = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_UnknownChannel)
omniORB.registerType(UnknownChannel._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_UnknownChannel, _0_Fissures.IfSeismogramMgr._tc_UnknownChannel)
del UnknownChannel

# exception UnknownMirrorId
_0_Fissures.IfSeismogramMgr.UnknownMirrorId = omniORB.newEmptyClass()
class UnknownMirrorId (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfSeismogramMgr/UnknownMirrorId:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_Fissures.IfSeismogramMgr.UnknownMirrorId = UnknownMirrorId
_0_Fissures.IfSeismogramMgr._d_UnknownMirrorId  = (omniORB.tcInternal.tv_except, UnknownMirrorId, UnknownMirrorId._NP_RepositoryId, "UnknownMirrorId")
_0_Fissures.IfSeismogramMgr._tc_UnknownMirrorId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_UnknownMirrorId)
omniORB.registerType(UnknownMirrorId._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_UnknownMirrorId, _0_Fissures.IfSeismogramMgr._tc_UnknownMirrorId)
del UnknownMirrorId

# interface SeismogramComponent
_0_Fissures.IfSeismogramMgr._d_SeismogramComponent = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramComponent:1.0", "SeismogramComponent")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramComponent:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramComponent
_0_Fissures.IfSeismogramMgr.SeismogramComponent = omniORB.newEmptyClass()
class SeismogramComponent :
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_SeismogramComponent[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.SeismogramComponent = SeismogramComponent
_0_Fissures.IfSeismogramMgr._tc_SeismogramComponent = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_SeismogramComponent)
omniORB.registerType(SeismogramComponent._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_SeismogramComponent, _0_Fissures.IfSeismogramMgr._tc_SeismogramComponent)

# SeismogramComponent operations and attributes
SeismogramComponent._d__get_a_finder = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFinder:1.0"],),None)
SeismogramComponent._d__get_a_factory = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0"],),None)

# SeismogramComponent object reference
class _objref_SeismogramComponent (CORBA.Object):
    _NP_RepositoryId = SeismogramComponent._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_a_finder(self, *args):
        return _omnipy.invoke(self, "_get_a_finder", _0_Fissures.IfSeismogramMgr.SeismogramComponent._d__get_a_finder, args)

    def _get_a_factory(self, *args):
        return _omnipy.invoke(self, "_get_a_factory", _0_Fissures.IfSeismogramMgr.SeismogramComponent._d__get_a_factory, args)

    __methods__ = ["_get_a_finder", "_get_a_factory"] + CORBA.Object.__methods__

omniORB.registerObjref(SeismogramComponent._NP_RepositoryId, _objref_SeismogramComponent)
_0_Fissures.IfSeismogramMgr._objref_SeismogramComponent = _objref_SeismogramComponent
del SeismogramComponent, _objref_SeismogramComponent

# SeismogramComponent skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class SeismogramComponent (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.SeismogramComponent._NP_RepositoryId


    _omni_op_d = {"_get_a_finder": _0_Fissures.IfSeismogramMgr.SeismogramComponent._d__get_a_finder, "_get_a_factory": _0_Fissures.IfSeismogramMgr.SeismogramComponent._d__get_a_factory}

SeismogramComponent._omni_skeleton = SeismogramComponent
_0_Fissures__POA.IfSeismogramMgr.SeismogramComponent = SeismogramComponent
omniORB.registerSkeleton(SeismogramComponent._NP_RepositoryId, SeismogramComponent)
del SeismogramComponent
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface SeismogramFinder
_0_Fissures.IfSeismogramMgr._d_SeismogramFinder = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFinder:1.0", "SeismogramFinder")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFinder:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramFinder
_0_Fissures.IfSeismogramMgr.SeismogramFinder = omniORB.newEmptyClass()
class SeismogramFinder (_0_Fissures.IfSeismogramMgr.SeismogramComponent):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_SeismogramFinder[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.SeismogramFinder = SeismogramFinder
_0_Fissures.IfSeismogramMgr._tc_SeismogramFinder = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_SeismogramFinder)
omniORB.registerType(SeismogramFinder._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_SeismogramFinder, _0_Fissures.IfSeismogramMgr._tc_SeismogramFinder)

# SeismogramFinder operations and attributes
SeismogramFinder._d_find_seismograms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/RequestFilterSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccessSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
SeismogramFinder._d_find_group = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/GroupRequestSeq:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/RemoteMotionVector:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)

# SeismogramFinder object reference
class _objref_SeismogramFinder (_0_Fissures.IfSeismogramMgr._objref_SeismogramComponent):
    _NP_RepositoryId = SeismogramFinder._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfSeismogramMgr._objref_SeismogramComponent.__init__(self)

    def find_seismograms(self, *args):
        return _omnipy.invoke(self, "find_seismograms", _0_Fissures.IfSeismogramMgr.SeismogramFinder._d_find_seismograms, args)

    def find_group(self, *args):
        return _omnipy.invoke(self, "find_group", _0_Fissures.IfSeismogramMgr.SeismogramFinder._d_find_group, args)

    __methods__ = ["find_seismograms", "find_group"] + _0_Fissures.IfSeismogramMgr._objref_SeismogramComponent.__methods__

omniORB.registerObjref(SeismogramFinder._NP_RepositoryId, _objref_SeismogramFinder)
_0_Fissures.IfSeismogramMgr._objref_SeismogramFinder = _objref_SeismogramFinder
del SeismogramFinder, _objref_SeismogramFinder

# SeismogramFinder skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class SeismogramFinder (_0_Fissures__POA.IfSeismogramMgr.SeismogramComponent):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.SeismogramFinder._NP_RepositoryId


    _omni_op_d = {"find_seismograms": _0_Fissures.IfSeismogramMgr.SeismogramFinder._d_find_seismograms, "find_group": _0_Fissures.IfSeismogramMgr.SeismogramFinder._d_find_group}
    _omni_op_d.update(_0_Fissures__POA.IfSeismogramMgr.SeismogramComponent._omni_op_d)

SeismogramFinder._omni_skeleton = SeismogramFinder
_0_Fissures__POA.IfSeismogramMgr.SeismogramFinder = SeismogramFinder
omniORB.registerSkeleton(SeismogramFinder._NP_RepositoryId, SeismogramFinder)
del SeismogramFinder
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface SeismogramFactory
_0_Fissures.IfSeismogramMgr._d_SeismogramFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0", "SeismogramFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramFactory
_0_Fissures.IfSeismogramMgr.SeismogramFactory = omniORB.newEmptyClass()
class SeismogramFactory :
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_SeismogramFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.SeismogramFactory = SeismogramFactory
_0_Fissures.IfSeismogramMgr._tc_SeismogramFactory = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_SeismogramFactory)
omniORB.registerType(SeismogramFactory._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_SeismogramFactory, _0_Fissures.IfSeismogramMgr._tc_SeismogramFactory)

# SeismogramFactory operations and attributes
SeismogramFactory._d_active_seismogram_count = ((), (omniORB.tcInternal.tv_long, ), None)
SeismogramFactory._d_create = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramFactory._d_create_from_value = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalSeismogram:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramFactory._d_create_from_values = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/LocalMotionVector:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramFactory._d_create_from_ref = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# SeismogramFactory object reference
class _objref_SeismogramFactory (CORBA.Object):
    _NP_RepositoryId = SeismogramFactory._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def active_seismogram_count(self, *args):
        return _omnipy.invoke(self, "active_seismogram_count", _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_active_seismogram_count, args)

    def create(self, *args):
        return _omnipy.invoke(self, "create", _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create, args)

    def create_from_value(self, *args):
        return _omnipy.invoke(self, "create_from_value", _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create_from_value, args)

    def create_from_values(self, *args):
        return _omnipy.invoke(self, "create_from_values", _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create_from_values, args)

    def create_from_ref(self, *args):
        return _omnipy.invoke(self, "create_from_ref", _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create_from_ref, args)

    __methods__ = ["active_seismogram_count", "create", "create_from_value", "create_from_values", "create_from_ref"] + CORBA.Object.__methods__

omniORB.registerObjref(SeismogramFactory._NP_RepositoryId, _objref_SeismogramFactory)
_0_Fissures.IfSeismogramMgr._objref_SeismogramFactory = _objref_SeismogramFactory
del SeismogramFactory, _objref_SeismogramFactory

# SeismogramFactory skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class SeismogramFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.SeismogramFactory._NP_RepositoryId


    _omni_op_d = {"active_seismogram_count": _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_active_seismogram_count, "create": _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create, "create_from_value": _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create_from_value, "create_from_values": _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create_from_values, "create_from_ref": _0_Fissures.IfSeismogramMgr.SeismogramFactory._d_create_from_ref}

SeismogramFactory._omni_skeleton = SeismogramFactory
_0_Fissures__POA.IfSeismogramMgr.SeismogramFactory = SeismogramFactory
omniORB.registerSkeleton(SeismogramFactory._NP_RepositoryId, SeismogramFactory)
del SeismogramFactory
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface SeismogramAccess
_0_Fissures.IfSeismogramMgr._d_SeismogramAccess = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccess:1.0", "SeismogramAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramAccess:1.0"] = _0_Fissures.IfSeismogramMgr._d_SeismogramAccess
_0_Fissures.IfSeismogramMgr.SeismogramAccess = omniORB.newEmptyClass()
class SeismogramAccess (_0_Fissures.IfSeismogramMgr.SeismogramComponent, _0_Fissures.IfTimeSeries.TimeSeriesAccess):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_SeismogramAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.SeismogramAccess = SeismogramAccess
_0_Fissures.IfSeismogramMgr._tc_SeismogramAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_SeismogramAccess)
omniORB.registerType(SeismogramAccess._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_SeismogramAccess, _0_Fissures.IfSeismogramMgr._tc_SeismogramAccess)

# SeismogramAccess operations and attributes
SeismogramAccess._d__get_a_writeable = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"],),None)
SeismogramAccess._d__get_parm_svc = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfParameterMgr/ParameterComponent:1.0"],),None)
SeismogramAccess._d_get_attributes = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"], ), None, None, 1)
SeismogramAccess._d_get_range_as_longs = ((omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/LongSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramAccess._d_get_range_as_shorts = ((omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/ShortSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramAccess._d_get_range_as_floats = ((omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/FloatSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramAccess._d_get_range_as_doubles = ((omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/DoubleSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
SeismogramAccess._d_get_range_as_encoded = ((omniORB.typeMapping["IDL:iris.edu/Fissures/TimeInterval:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/EncodedDataSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)

# SeismogramAccess object reference
class _objref_SeismogramAccess (_0_Fissures.IfSeismogramMgr._objref_SeismogramComponent, _0_Fissures.IfTimeSeries._objref_TimeSeriesAccess):
    _NP_RepositoryId = SeismogramAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfSeismogramMgr._objref_SeismogramComponent.__init__(self)
        _0_Fissures.IfTimeSeries._objref_TimeSeriesAccess.__init__(self)

    def _get_a_writeable(self, *args):
        return _omnipy.invoke(self, "_get_a_writeable", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d__get_a_writeable, args)

    def _get_parm_svc(self, *args):
        return _omnipy.invoke(self, "_get_parm_svc", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d__get_parm_svc, args)

    def get_attributes(self, *args):
        return _omnipy.invoke(self, "get_attributes", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_attributes, args)

    def get_range_as_longs(self, *args):
        return _omnipy.invoke(self, "get_range_as_longs", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_longs, args)

    def get_range_as_shorts(self, *args):
        return _omnipy.invoke(self, "get_range_as_shorts", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_shorts, args)

    def get_range_as_floats(self, *args):
        return _omnipy.invoke(self, "get_range_as_floats", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_floats, args)

    def get_range_as_doubles(self, *args):
        return _omnipy.invoke(self, "get_range_as_doubles", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_doubles, args)

    def get_range_as_encoded(self, *args):
        return _omnipy.invoke(self, "get_range_as_encoded", _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_encoded, args)

    __methods__ = ["_get_a_writeable", "_get_parm_svc", "get_attributes", "get_range_as_longs", "get_range_as_shorts", "get_range_as_floats", "get_range_as_doubles", "get_range_as_encoded"] + _0_Fissures.IfSeismogramMgr._objref_SeismogramComponent.__methods__ + _0_Fissures.IfTimeSeries._objref_TimeSeriesAccess.__methods__

omniORB.registerObjref(SeismogramAccess._NP_RepositoryId, _objref_SeismogramAccess)
_0_Fissures.IfSeismogramMgr._objref_SeismogramAccess = _objref_SeismogramAccess
del SeismogramAccess, _objref_SeismogramAccess

# SeismogramAccess skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class SeismogramAccess (_0_Fissures__POA.IfSeismogramMgr.SeismogramComponent, _0_Fissures__POA.IfTimeSeries.TimeSeriesAccess):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.SeismogramAccess._NP_RepositoryId


    _omni_op_d = {"_get_a_writeable": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d__get_a_writeable, "_get_parm_svc": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d__get_parm_svc, "get_attributes": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_attributes, "get_range_as_longs": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_longs, "get_range_as_shorts": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_shorts, "get_range_as_floats": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_floats, "get_range_as_doubles": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_doubles, "get_range_as_encoded": _0_Fissures.IfSeismogramMgr.SeismogramAccess._d_get_range_as_encoded}
    _omni_op_d.update(_0_Fissures__POA.IfSeismogramMgr.SeismogramComponent._omni_op_d)
    _omni_op_d.update(_0_Fissures__POA.IfTimeSeries.TimeSeriesAccess._omni_op_d)

SeismogramAccess._omni_skeleton = SeismogramAccess
_0_Fissures__POA.IfSeismogramMgr.SeismogramAccess = SeismogramAccess
omniORB.registerSkeleton(SeismogramAccess._NP_RepositoryId, SeismogramAccess)
del SeismogramAccess
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface Seismogram
_0_Fissures.IfSeismogramMgr._d_Seismogram = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0", "Seismogram")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/Seismogram:1.0"] = _0_Fissures.IfSeismogramMgr._d_Seismogram
_0_Fissures.IfSeismogramMgr.Seismogram = omniORB.newEmptyClass()
class Seismogram (_0_Fissures.IfSeismogramMgr.SeismogramAccess, _0_Fissures.IfTimeSeries.TimeSeriesAdmin):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_Seismogram[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.Seismogram = Seismogram
_0_Fissures.IfSeismogramMgr._tc_Seismogram = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_Seismogram)
omniORB.registerType(Seismogram._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_Seismogram, _0_Fissures.IfSeismogramMgr._tc_Seismogram)

# Seismogram operations and attributes
Seismogram._d_process_time_corrections = ((omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"], ), (), {_0_Fissures.NotImplemented._NP_RepositoryId: _0_Fissures._d_NotImplemented})
Seismogram._d_set_attributes = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramDC/SeismogramAttr:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException}, None, 1)
Seismogram._d_destroy = ((), (), None)

# Seismogram object reference
class _objref_Seismogram (_0_Fissures.IfSeismogramMgr._objref_SeismogramAccess, _0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin):
    _NP_RepositoryId = Seismogram._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfSeismogramMgr._objref_SeismogramAccess.__init__(self)
        _0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin.__init__(self)

    def process_time_corrections(self, *args):
        return _omnipy.invoke(self, "process_time_corrections", _0_Fissures.IfSeismogramMgr.Seismogram._d_process_time_corrections, args)

    def set_attributes(self, *args):
        return _omnipy.invoke(self, "set_attributes", _0_Fissures.IfSeismogramMgr.Seismogram._d_set_attributes, args)

    def destroy(self, *args):
        return _omnipy.invoke(self, "destroy", _0_Fissures.IfSeismogramMgr.Seismogram._d_destroy, args)

    __methods__ = ["process_time_corrections", "set_attributes", "destroy"] + _0_Fissures.IfSeismogramMgr._objref_SeismogramAccess.__methods__ + _0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin.__methods__

omniORB.registerObjref(Seismogram._NP_RepositoryId, _objref_Seismogram)
_0_Fissures.IfSeismogramMgr._objref_Seismogram = _objref_Seismogram
del Seismogram, _objref_Seismogram

# Seismogram skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class Seismogram (_0_Fissures__POA.IfSeismogramMgr.SeismogramAccess, _0_Fissures__POA.IfTimeSeries.TimeSeriesAdmin):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.Seismogram._NP_RepositoryId


    _omni_op_d = {"process_time_corrections": _0_Fissures.IfSeismogramMgr.Seismogram._d_process_time_corrections, "set_attributes": _0_Fissures.IfSeismogramMgr.Seismogram._d_set_attributes, "destroy": _0_Fissures.IfSeismogramMgr.Seismogram._d_destroy}
    _omni_op_d.update(_0_Fissures__POA.IfSeismogramMgr.SeismogramAccess._omni_op_d)
    _omni_op_d.update(_0_Fissures__POA.IfTimeSeries.TimeSeriesAdmin._omni_op_d)

Seismogram._omni_skeleton = Seismogram
_0_Fissures__POA.IfSeismogramMgr.Seismogram = Seismogram
omniORB.registerSkeleton(Seismogram._NP_RepositoryId, Seismogram)
del Seismogram
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface ChannelMirrorAdmin
_0_Fissures.IfSeismogramMgr._d_ChannelMirrorAdmin = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelMirrorAdmin:1.0", "ChannelMirrorAdmin")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelMirrorAdmin:1.0"] = _0_Fissures.IfSeismogramMgr._d_ChannelMirrorAdmin
_0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin = omniORB.newEmptyClass()
class ChannelMirrorAdmin :
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_ChannelMirrorAdmin[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin = ChannelMirrorAdmin
_0_Fissures.IfSeismogramMgr._tc_ChannelMirrorAdmin = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_ChannelMirrorAdmin)
omniORB.registerType(ChannelMirrorAdmin._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_ChannelMirrorAdmin, _0_Fissures.IfSeismogramMgr._tc_ChannelMirrorAdmin)

# ChannelMirrorAdmin operations and attributes
ChannelMirrorAdmin._d_active_seismogram_mirrors = ((), (omniORB.tcInternal.tv_long, ), None)
ChannelMirrorAdmin._d_get_mirrored_seismograms = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramSeq:1.0"], ), None)
ChannelMirrorAdmin._d_get_factory_mirrors = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactorySeq:1.0"], ), None)
ChannelMirrorAdmin._d_stop_mirrors = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactorySeq:1.0"], ), (), None)
ChannelMirrorAdmin._d_stop_mirroring = ((), (), None)
ChannelMirrorAdmin._d_resume_mirroring = ((), (), None)
ChannelMirrorAdmin._d_is_mirroring = ((), (omniORB.tcInternal.tv_boolean, ), None)

# ChannelMirrorAdmin object reference
class _objref_ChannelMirrorAdmin (CORBA.Object):
    _NP_RepositoryId = ChannelMirrorAdmin._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def active_seismogram_mirrors(self, *args):
        return _omnipy.invoke(self, "active_seismogram_mirrors", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_active_seismogram_mirrors, args)

    def get_mirrored_seismograms(self, *args):
        return _omnipy.invoke(self, "get_mirrored_seismograms", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_get_mirrored_seismograms, args)

    def get_factory_mirrors(self, *args):
        return _omnipy.invoke(self, "get_factory_mirrors", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_get_factory_mirrors, args)

    def stop_mirrors(self, *args):
        return _omnipy.invoke(self, "stop_mirrors", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_stop_mirrors, args)

    def stop_mirroring(self, *args):
        return _omnipy.invoke(self, "stop_mirroring", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_stop_mirroring, args)

    def resume_mirroring(self, *args):
        return _omnipy.invoke(self, "resume_mirroring", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_resume_mirroring, args)

    def is_mirroring(self, *args):
        return _omnipy.invoke(self, "is_mirroring", _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_is_mirroring, args)

    __methods__ = ["active_seismogram_mirrors", "get_mirrored_seismograms", "get_factory_mirrors", "stop_mirrors", "stop_mirroring", "resume_mirroring", "is_mirroring"] + CORBA.Object.__methods__

omniORB.registerObjref(ChannelMirrorAdmin._NP_RepositoryId, _objref_ChannelMirrorAdmin)
_0_Fissures.IfSeismogramMgr._objref_ChannelMirrorAdmin = _objref_ChannelMirrorAdmin
del ChannelMirrorAdmin, _objref_ChannelMirrorAdmin

# ChannelMirrorAdmin skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class ChannelMirrorAdmin (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._NP_RepositoryId


    _omni_op_d = {"active_seismogram_mirrors": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_active_seismogram_mirrors, "get_mirrored_seismograms": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_get_mirrored_seismograms, "get_factory_mirrors": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_get_factory_mirrors, "stop_mirrors": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_stop_mirrors, "stop_mirroring": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_stop_mirroring, "resume_mirroring": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_resume_mirroring, "is_mirroring": _0_Fissures.IfSeismogramMgr.ChannelMirrorAdmin._d_is_mirroring}

ChannelMirrorAdmin._omni_skeleton = ChannelMirrorAdmin
_0_Fissures__POA.IfSeismogramMgr.ChannelMirrorAdmin = ChannelMirrorAdmin
omniORB.registerSkeleton(ChannelMirrorAdmin._NP_RepositoryId, ChannelMirrorAdmin)
del ChannelMirrorAdmin
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface MirrorFactory
_0_Fissures.IfSeismogramMgr._d_MirrorFactory = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFactory:1.0", "MirrorFactory")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFactory:1.0"] = _0_Fissures.IfSeismogramMgr._d_MirrorFactory
_0_Fissures.IfSeismogramMgr.MirrorFactory = omniORB.newEmptyClass()
class MirrorFactory :
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_MirrorFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.MirrorFactory = MirrorFactory
_0_Fissures.IfSeismogramMgr._tc_MirrorFactory = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_MirrorFactory)
omniORB.registerType(MirrorFactory._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_MirrorFactory, _0_Fissures.IfSeismogramMgr._tc_MirrorFactory)

# MirrorFactory operations and attributes
MirrorFactory._d__get_a_factory = ((),(omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramFactory:1.0"],),None)
MirrorFactory._d_mirroring_stopped = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorId:1.0"], omniORB.tcInternal.tv_boolean), (), None)

# MirrorFactory object reference
class _objref_MirrorFactory (CORBA.Object):
    _NP_RepositoryId = MirrorFactory._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_a_factory(self, *args):
        return _omnipy.invoke(self, "_get_a_factory", _0_Fissures.IfSeismogramMgr.MirrorFactory._d__get_a_factory, args)

    def mirroring_stopped(self, *args):
        return _omnipy.invoke(self, "mirroring_stopped", _0_Fissures.IfSeismogramMgr.MirrorFactory._d_mirroring_stopped, args)

    __methods__ = ["_get_a_factory", "mirroring_stopped"] + CORBA.Object.__methods__

omniORB.registerObjref(MirrorFactory._NP_RepositoryId, _objref_MirrorFactory)
_0_Fissures.IfSeismogramMgr._objref_MirrorFactory = _objref_MirrorFactory
del MirrorFactory, _objref_MirrorFactory

# MirrorFactory skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class MirrorFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.MirrorFactory._NP_RepositoryId


    _omni_op_d = {"_get_a_factory": _0_Fissures.IfSeismogramMgr.MirrorFactory._d__get_a_factory, "mirroring_stopped": _0_Fissures.IfSeismogramMgr.MirrorFactory._d_mirroring_stopped}

MirrorFactory._omni_skeleton = MirrorFactory
_0_Fissures__POA.IfSeismogramMgr.MirrorFactory = MirrorFactory
omniORB.registerSkeleton(MirrorFactory._NP_RepositoryId, MirrorFactory)
del MirrorFactory
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

# interface ChannelMirrorRegistry
_0_Fissures.IfSeismogramMgr._d_ChannelMirrorRegistry = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelMirrorRegistry:1.0", "ChannelMirrorRegistry")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelMirrorRegistry:1.0"] = _0_Fissures.IfSeismogramMgr._d_ChannelMirrorRegistry
_0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry = omniORB.newEmptyClass()
class ChannelMirrorRegistry :
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr._d_ChannelMirrorRegistry[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry = ChannelMirrorRegistry
_0_Fissures.IfSeismogramMgr._tc_ChannelMirrorRegistry = omniORB.tcInternal.createTypeCode(_0_Fissures.IfSeismogramMgr._d_ChannelMirrorRegistry)
omniORB.registerType(ChannelMirrorRegistry._NP_RepositoryId, _0_Fissures.IfSeismogramMgr._d_ChannelMirrorRegistry, _0_Fissures.IfSeismogramMgr._tc_ChannelMirrorRegistry)

# ChannelMirrorRegistry operations and attributes
ChannelMirrorRegistry._d_register = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorFactory:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelIdSeq:1.0"]), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorId:1.0"], ), {_0_Fissures.IfSeismogramMgr.UnknownChannel._NP_RepositoryId: _0_Fissures.IfSeismogramMgr._d_UnknownChannel, _0_Fissures.IfSeismogramMgr.NotMirroring._NP_RepositoryId: _0_Fissures.IfSeismogramMgr._d_NotMirroring})
ChannelMirrorRegistry._d_unregister = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/MirrorId:1.0"], ), (), {_0_Fissures.IfSeismogramMgr.UnknownMirrorId._NP_RepositoryId: _0_Fissures.IfSeismogramMgr._d_UnknownMirrorId})
ChannelMirrorRegistry._d_get_mirrorable_channels = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/ChannelIdSeq:1.0"], ), None)

# ChannelMirrorRegistry object reference
class _objref_ChannelMirrorRegistry (CORBA.Object):
    _NP_RepositoryId = ChannelMirrorRegistry._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def register(self, *args):
        return _omnipy.invoke(self, "register", _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._d_register, args)

    def unregister(self, *args):
        return _omnipy.invoke(self, "unregister", _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._d_unregister, args)

    def get_mirrorable_channels(self, *args):
        return _omnipy.invoke(self, "get_mirrorable_channels", _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._d_get_mirrorable_channels, args)

    __methods__ = ["register", "unregister", "get_mirrorable_channels"] + CORBA.Object.__methods__

omniORB.registerObjref(ChannelMirrorRegistry._NP_RepositoryId, _objref_ChannelMirrorRegistry)
_0_Fissures.IfSeismogramMgr._objref_ChannelMirrorRegistry = _objref_ChannelMirrorRegistry
del ChannelMirrorRegistry, _objref_ChannelMirrorRegistry

# ChannelMirrorRegistry skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfSeismogramMgr"
class ChannelMirrorRegistry (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._NP_RepositoryId


    _omni_op_d = {"register": _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._d_register, "unregister": _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._d_unregister, "get_mirrorable_channels": _0_Fissures.IfSeismogramMgr.ChannelMirrorRegistry._d_get_mirrorable_channels}

ChannelMirrorRegistry._omni_skeleton = ChannelMirrorRegistry
_0_Fissures__POA.IfSeismogramMgr.ChannelMirrorRegistry = ChannelMirrorRegistry
omniORB.registerSkeleton(ChannelMirrorRegistry._NP_RepositoryId, ChannelMirrorRegistry)
del ChannelMirrorRegistry
__name__ = "obspy.fissures.idl.Fissures.IfSeismogramMgr"

#
# End of module "Fissures.IfSeismogramMgr"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"IfService.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"IfService.idl")


#
# Start of module "Fissures.IfService"
#
__name__ = "obspy.fissures.idl.Fissures.IfService"
_0_Fissures.IfService = omniORB.openModule("obspy.fissures.idl.Fissures.IfService", r"IfService.idl")
_0_Fissures__POA.IfService = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfService", r"IfService.idl")

_0_Fissures.IfService.VERSION = "1.0"

# struct ServiceOption
_0_Fissures.IfService.ServiceOption = omniORB.newEmptyClass()
class ServiceOption (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/ServiceOption:1.0"

    def __init__(self, name, description, type, allowed_values):
        self.name = name
        self.description = description
        self.type = type
        self.allowed_values = allowed_values

_0_Fissures.IfService.ServiceOption = ServiceOption
_0_Fissures.IfService._d_ServiceOption  = (omniORB.tcInternal.tv_struct, ServiceOption, ServiceOption._NP_RepositoryId, "ServiceOption", "name", (omniORB.tcInternal.tv_string,0), "description", (omniORB.tcInternal.tv_string,0), "type", (omniORB.tcInternal.tv_string,0), "allowed_values", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_Fissures.IfService._tc_ServiceOption = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._d_ServiceOption)
omniORB.registerType(ServiceOption._NP_RepositoryId, _0_Fissures.IfService._d_ServiceOption, _0_Fissures.IfService._tc_ServiceOption)
del ServiceOption

# typedef ... ServiceOptionSeq
class ServiceOptionSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/ServiceOptionSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfService.ServiceOptionSeq = ServiceOptionSeq
_0_Fissures.IfService._d_ServiceOptionSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceOption:1.0"], 0)
_0_Fissures.IfService._ad_ServiceOptionSeq = (omniORB.tcInternal.tv_alias, ServiceOptionSeq._NP_RepositoryId, "ServiceOptionSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceOption:1.0"], 0))
_0_Fissures.IfService._tc_ServiceOptionSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._ad_ServiceOptionSeq)
omniORB.registerType(ServiceOptionSeq._NP_RepositoryId, _0_Fissures.IfService._ad_ServiceOptionSeq, _0_Fissures.IfService._tc_ServiceOptionSeq)
del ServiceOptionSeq

# struct ServiceSetting
_0_Fissures.IfService.ServiceSetting = omniORB.newEmptyClass()
class ServiceSetting (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/ServiceSetting:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_Fissures.IfService.ServiceSetting = ServiceSetting
_0_Fissures.IfService._d_ServiceSetting  = (omniORB.tcInternal.tv_struct, ServiceSetting, ServiceSetting._NP_RepositoryId, "ServiceSetting", "name", (omniORB.tcInternal.tv_string,0), "value", omniORB.tcInternal.tv_any)
_0_Fissures.IfService._tc_ServiceSetting = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._d_ServiceSetting)
omniORB.registerType(ServiceSetting._NP_RepositoryId, _0_Fissures.IfService._d_ServiceSetting, _0_Fissures.IfService._tc_ServiceSetting)
del ServiceSetting

# typedef ... ServiceConfiguration
class ServiceConfiguration:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/ServiceConfiguration:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfService.ServiceConfiguration = ServiceConfiguration
_0_Fissures.IfService._d_ServiceConfiguration  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceSetting:1.0"], 0)
_0_Fissures.IfService._ad_ServiceConfiguration = (omniORB.tcInternal.tv_alias, ServiceConfiguration._NP_RepositoryId, "ServiceConfiguration", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceSetting:1.0"], 0))
_0_Fissures.IfService._tc_ServiceConfiguration = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._ad_ServiceConfiguration)
omniORB.registerType(ServiceConfiguration._NP_RepositoryId, _0_Fissures.IfService._ad_ServiceConfiguration, _0_Fissures.IfService._tc_ServiceConfiguration)
del ServiceConfiguration

# typedef ... ConfigurationId
class ConfigurationId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfService.ConfigurationId = ConfigurationId
_0_Fissures.IfService._d_ConfigurationId  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfService._ad_ConfigurationId = (omniORB.tcInternal.tv_alias, ConfigurationId._NP_RepositoryId, "ConfigurationId", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfService._tc_ConfigurationId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._ad_ConfigurationId)
omniORB.registerType(ConfigurationId._NP_RepositoryId, _0_Fissures.IfService._ad_ConfigurationId, _0_Fissures.IfService._tc_ConfigurationId)
del ConfigurationId
_0_Fissures.IfService.DEFAULT_CONFIG = "DEFAULT"

# exception UnknownOption
_0_Fissures.IfService.UnknownOption = omniORB.newEmptyClass()
class UnknownOption (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/UnknownOption:1.0"

    def __init__(self, option_name):
        CORBA.UserException.__init__(self, option_name)
        self.option_name = option_name

_0_Fissures.IfService.UnknownOption = UnknownOption
_0_Fissures.IfService._d_UnknownOption  = (omniORB.tcInternal.tv_except, UnknownOption, UnknownOption._NP_RepositoryId, "UnknownOption", "option_name", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_Fissures.IfService._tc_UnknownOption = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._d_UnknownOption)
omniORB.registerType(UnknownOption._NP_RepositoryId, _0_Fissures.IfService._d_UnknownOption, _0_Fissures.IfService._tc_UnknownOption)
del UnknownOption

# exception InvalidValue
_0_Fissures.IfService.InvalidValue = omniORB.newEmptyClass()
class InvalidValue (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/InvalidValue:1.0"

    def __init__(self, bad_values):
        CORBA.UserException.__init__(self, bad_values)
        self.bad_values = bad_values

_0_Fissures.IfService.InvalidValue = InvalidValue
_0_Fissures.IfService._d_InvalidValue  = (omniORB.tcInternal.tv_except, InvalidValue, InvalidValue._NP_RepositoryId, "InvalidValue", "bad_values", omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceConfiguration:1.0"])
_0_Fissures.IfService._tc_InvalidValue = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._d_InvalidValue)
omniORB.registerType(InvalidValue._NP_RepositoryId, _0_Fissures.IfService._d_InvalidValue, _0_Fissures.IfService._tc_InvalidValue)
del InvalidValue

# exception UnknownConfiguration
_0_Fissures.IfService.UnknownConfiguration = omniORB.newEmptyClass()
class UnknownConfiguration (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfService/UnknownConfiguration:1.0"

    def __init__(self, config_id):
        CORBA.UserException.__init__(self, config_id)
        self.config_id = config_id

_0_Fissures.IfService.UnknownConfiguration = UnknownConfiguration
_0_Fissures.IfService._d_UnknownConfiguration  = (omniORB.tcInternal.tv_except, UnknownConfiguration, UnknownConfiguration._NP_RepositoryId, "UnknownConfiguration", "config_id", omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"])
_0_Fissures.IfService._tc_UnknownConfiguration = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._d_UnknownConfiguration)
omniORB.registerType(UnknownConfiguration._NP_RepositoryId, _0_Fissures.IfService._d_UnknownConfiguration, _0_Fissures.IfService._tc_UnknownConfiguration)
del UnknownConfiguration

# abstract interface Service
_0_Fissures.IfService._d_Service = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfService/Service:1.0", "Service")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/Service:1.0"] = _0_Fissures.IfService._d_Service
_0_Fissures.IfService.Service = omniORB.newEmptyClass()
class Service :
    _NP_RepositoryId = _0_Fissures.IfService._d_Service[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfService.Service = Service
_0_Fissures.IfService._tc_Service = omniORB.tcInternal.createTypeCode(_0_Fissures.IfService._d_Service)
omniORB.registerType(Service._NP_RepositoryId, _0_Fissures.IfService._d_Service, _0_Fissures.IfService._tc_Service)

# Service operations and attributes
Service._d_get_configuration_options = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceOptionSeq:1.0"], ), None)
Service._d_get_default_configuration = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceConfiguration:1.0"], ), None)
Service._d_get_configuration = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceConfiguration:1.0"], ), {_0_Fissures.IfService.UnknownConfiguration._NP_RepositoryId: _0_Fissures.IfService._d_UnknownConfiguration})
Service._d_get_setting_for = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceSetting:1.0"], ), {_0_Fissures.IfService.UnknownOption._NP_RepositoryId: _0_Fissures.IfService._d_UnknownOption})
Service._d_set_configuration = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ServiceConfiguration:1.0"], ), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"], ), {_0_Fissures.IfService.UnknownOption._NP_RepositoryId: _0_Fissures.IfService._d_UnknownOption, _0_Fissures.IfService.InvalidValue._NP_RepositoryId: _0_Fissures.IfService._d_InvalidValue})
Service._d_reset_to_default = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"], ), None)

# Service object reference
class _objref_Service (CORBA.Object):
    _NP_RepositoryId = Service._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def get_configuration_options(self, *args):
        return _omnipy.invoke(self, "get_configuration_options", _0_Fissures.IfService.Service._d_get_configuration_options, args)

    def get_default_configuration(self, *args):
        return _omnipy.invoke(self, "get_default_configuration", _0_Fissures.IfService.Service._d_get_default_configuration, args)

    def get_configuration(self, *args):
        return _omnipy.invoke(self, "get_configuration", _0_Fissures.IfService.Service._d_get_configuration, args)

    def get_setting_for(self, *args):
        return _omnipy.invoke(self, "get_setting_for", _0_Fissures.IfService.Service._d_get_setting_for, args)

    def set_configuration(self, *args):
        return _omnipy.invoke(self, "set_configuration", _0_Fissures.IfService.Service._d_set_configuration, args)

    def reset_to_default(self, *args):
        return _omnipy.invoke(self, "reset_to_default", _0_Fissures.IfService.Service._d_reset_to_default, args)

    __methods__ = ["get_configuration_options", "get_default_configuration", "get_configuration", "get_setting_for", "set_configuration", "reset_to_default"] + CORBA.Object.__methods__

omniORB.registerObjref(Service._NP_RepositoryId, _objref_Service)
_0_Fissures.IfService._objref_Service = _objref_Service
del Service, _objref_Service

# Service skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfService"
class Service (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfService.Service._NP_RepositoryId


    _omni_op_d = {"get_configuration_options": _0_Fissures.IfService.Service._d_get_configuration_options, "get_default_configuration": _0_Fissures.IfService.Service._d_get_default_configuration, "get_configuration": _0_Fissures.IfService.Service._d_get_configuration, "get_setting_for": _0_Fissures.IfService.Service._d_get_setting_for, "set_configuration": _0_Fissures.IfService.Service._d_set_configuration, "reset_to_default": _0_Fissures.IfService.Service._d_reset_to_default}

Service._omni_skeleton = Service
_0_Fissures__POA.IfService.Service = Service
omniORB.registerSkeleton(Service._NP_RepositoryId, Service)
del Service
__name__ = "obspy.fissures.idl.Fissures.IfService"

#
# End of module "Fissures.IfService"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"


#
# Start of module "Fissures"
#
__name__ = "obspy.fissures.idl.Fissures"
_0_Fissures = omniORB.openModule("obspy.fissures.idl.Fissures", r"../src/IfFilter.idl")
_0_Fissures__POA = omniORB.openModule("obspy.fissures.idl.Fissures__POA", r"../src/IfFilter.idl")


#
# Start of module "Fissures.IfFilter"
#
__name__ = "obspy.fissures.idl.Fissures.IfFilter"
_0_Fissures.IfFilter = omniORB.openModule("obspy.fissures.idl.Fissures.IfFilter", r"../src/IfFilter.idl")
_0_Fissures__POA.IfFilter = omniORB.openModule("obspy.fissures.idl.Fissures__POA.IfFilter", r"../src/IfFilter.idl")

_0_Fissures.IfFilter.VERSION = "1.0"

# typedef ... ConfigurationId
class ConfigurationId:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/ConfigurationId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.ConfigurationId = ConfigurationId
_0_Fissures.IfFilter._d_ConfigurationId  = omniORB.typeMapping["IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"]
_0_Fissures.IfFilter._ad_ConfigurationId = (omniORB.tcInternal.tv_alias, ConfigurationId._NP_RepositoryId, "ConfigurationId", omniORB.typeCodeMapping["IDL:iris.edu/Fissures/IfService/ConfigurationId:1.0"]._d)
_0_Fissures.IfFilter._tc_ConfigurationId = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_ConfigurationId)
omniORB.registerType(ConfigurationId._NP_RepositoryId, _0_Fissures.IfFilter._ad_ConfigurationId, _0_Fissures.IfFilter._tc_ConfigurationId)
del ConfigurationId

# enum Cropping
_0_Fissures.IfFilter.HIGH_PASS = omniORB.EnumItem("HIGH_PASS", 0)
_0_Fissures.IfFilter.LOW_PASS = omniORB.EnumItem("LOW_PASS", 1)
_0_Fissures.IfFilter.BAND_PASS = omniORB.EnumItem("BAND_PASS", 2)
_0_Fissures.IfFilter.BAND_STOP = omniORB.EnumItem("BAND_STOP", 3)
_0_Fissures.IfFilter.Cropping = omniORB.Enum("IDL:iris.edu/Fissures/IfFilter/Cropping:1.0", (_0_Fissures.IfFilter.HIGH_PASS, _0_Fissures.IfFilter.LOW_PASS, _0_Fissures.IfFilter.BAND_PASS, _0_Fissures.IfFilter.BAND_STOP,))

_0_Fissures.IfFilter._d_Cropping  = (omniORB.tcInternal.tv_enum, _0_Fissures.IfFilter.Cropping._NP_RepositoryId, "Cropping", _0_Fissures.IfFilter.Cropping._items)
_0_Fissures.IfFilter._tc_Cropping = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._d_Cropping)
omniORB.registerType(_0_Fissures.IfFilter.Cropping._NP_RepositoryId, _0_Fissures.IfFilter._d_Cropping, _0_Fissures.IfFilter._tc_Cropping)

# typedef ... CroppingSeq
class CroppingSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/CroppingSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.CroppingSeq = CroppingSeq
_0_Fissures.IfFilter._d_CroppingSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Cropping:1.0"], 0)
_0_Fissures.IfFilter._ad_CroppingSeq = (omniORB.tcInternal.tv_alias, CroppingSeq._NP_RepositoryId, "CroppingSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Cropping:1.0"], 0))
_0_Fissures.IfFilter._tc_CroppingSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_CroppingSeq)
omniORB.registerType(CroppingSeq._NP_RepositoryId, _0_Fissures.IfFilter._ad_CroppingSeq, _0_Fissures.IfFilter._tc_CroppingSeq)
del CroppingSeq

# typedef ... Algorithm
class Algorithm:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/Algorithm:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.Algorithm = Algorithm
_0_Fissures.IfFilter._d_Algorithm  = (omniORB.tcInternal.tv_string,0)
_0_Fissures.IfFilter._ad_Algorithm = (omniORB.tcInternal.tv_alias, Algorithm._NP_RepositoryId, "Algorithm", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfFilter._tc_Algorithm = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_Algorithm)
omniORB.registerType(Algorithm._NP_RepositoryId, _0_Fissures.IfFilter._ad_Algorithm, _0_Fissures.IfFilter._tc_Algorithm)
del Algorithm

# typedef ... AlgorithmSeq
class AlgorithmSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/AlgorithmSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.AlgorithmSeq = AlgorithmSeq
_0_Fissures.IfFilter._d_AlgorithmSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Algorithm:1.0"], 0)
_0_Fissures.IfFilter._ad_AlgorithmSeq = (omniORB.tcInternal.tv_alias, AlgorithmSeq._NP_RepositoryId, "AlgorithmSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Algorithm:1.0"], 0))
_0_Fissures.IfFilter._tc_AlgorithmSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_AlgorithmSeq)
omniORB.registerType(AlgorithmSeq._NP_RepositoryId, _0_Fissures.IfFilter._ad_AlgorithmSeq, _0_Fissures.IfFilter._tc_AlgorithmSeq)
del AlgorithmSeq

# struct FilterInfo
_0_Fissures.IfFilter.FilterInfo = omniORB.newEmptyClass()
class FilterInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/FilterInfo:1.0"

    def __init__(self, supported_algorithms, supported_croppings, supports_two_way):
        self.supported_algorithms = supported_algorithms
        self.supported_croppings = supported_croppings
        self.supports_two_way = supports_two_way

_0_Fissures.IfFilter.FilterInfo = FilterInfo
_0_Fissures.IfFilter._d_FilterInfo  = (omniORB.tcInternal.tv_struct, FilterInfo, FilterInfo._NP_RepositoryId, "FilterInfo", "supported_algorithms", omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/AlgorithmSeq:1.0"], "supported_croppings", omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/CroppingSeq:1.0"], "supports_two_way", omniORB.tcInternal.tv_boolean)
_0_Fissures.IfFilter._tc_FilterInfo = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._d_FilterInfo)
omniORB.registerType(FilterInfo._NP_RepositoryId, _0_Fissures.IfFilter._d_FilterInfo, _0_Fissures.IfFilter._tc_FilterInfo)
del FilterInfo

# typedef ... FloatSeq
class FloatSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/FloatSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.FloatSeq = FloatSeq
_0_Fissures.IfFilter._d_FloatSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0)
_0_Fissures.IfFilter._ad_FloatSeq = (omniORB.tcInternal.tv_alias, FloatSeq._NP_RepositoryId, "FloatSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0_Fissures.IfFilter._tc_FloatSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_FloatSeq)
omniORB.registerType(FloatSeq._NP_RepositoryId, _0_Fissures.IfFilter._ad_FloatSeq, _0_Fissures.IfFilter._tc_FloatSeq)
del FloatSeq

# typedef ... ShortSeq
class ShortSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/ShortSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.ShortSeq = ShortSeq
_0_Fissures.IfFilter._d_ShortSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0)
_0_Fissures.IfFilter._ad_ShortSeq = (omniORB.tcInternal.tv_alias, ShortSeq._NP_RepositoryId, "ShortSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0))
_0_Fissures.IfFilter._tc_ShortSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_ShortSeq)
omniORB.registerType(ShortSeq._NP_RepositoryId, _0_Fissures.IfFilter._ad_ShortSeq, _0_Fissures.IfFilter._tc_ShortSeq)
del ShortSeq

# struct FilterStyle
_0_Fissures.IfFilter.FilterStyle = omniORB.newEmptyClass()
class FilterStyle (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/FilterStyle:1.0"

    def __init__(self, selection, formula, two_way, corner_freqs, nPoles):
        self.selection = selection
        self.formula = formula
        self.two_way = two_way
        self.corner_freqs = corner_freqs
        self.nPoles = nPoles

_0_Fissures.IfFilter.FilterStyle = FilterStyle
_0_Fissures.IfFilter._d_FilterStyle  = (omniORB.tcInternal.tv_struct, FilterStyle, FilterStyle._NP_RepositoryId, "FilterStyle", "selection", omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Cropping:1.0"], "formula", omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Algorithm:1.0"], "two_way", omniORB.tcInternal.tv_boolean, "corner_freqs", omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/FloatSeq:1.0"], "nPoles", omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/ShortSeq:1.0"])
_0_Fissures.IfFilter._tc_FilterStyle = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._d_FilterStyle)
omniORB.registerType(FilterStyle._NP_RepositoryId, _0_Fissures.IfFilter._d_FilterStyle, _0_Fissures.IfFilter._tc_FilterStyle)
del FilterStyle

# struct FilterError
_0_Fissures.IfFilter.FilterError = omniORB.newEmptyClass()
class FilterError (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/FilterError:1.0"

    def __init__(self, index, error_msg):
        self.index = index
        self.error_msg = error_msg

_0_Fissures.IfFilter.FilterError = FilterError
_0_Fissures.IfFilter._d_FilterError  = (omniORB.tcInternal.tv_struct, FilterError, FilterError._NP_RepositoryId, "FilterError", "index", omniORB.tcInternal.tv_long, "error_msg", (omniORB.tcInternal.tv_string,0))
_0_Fissures.IfFilter._tc_FilterError = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._d_FilterError)
omniORB.registerType(FilterError._NP_RepositoryId, _0_Fissures.IfFilter._d_FilterError, _0_Fissures.IfFilter._tc_FilterError)
del FilterError

# typedef ... FilterErrorSeq
class FilterErrorSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfFilter/FilterErrorSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfFilter.FilterErrorSeq = FilterErrorSeq
_0_Fissures.IfFilter._d_FilterErrorSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/FilterError:1.0"], 0)
_0_Fissures.IfFilter._ad_FilterErrorSeq = (omniORB.tcInternal.tv_alias, FilterErrorSeq._NP_RepositoryId, "FilterErrorSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/FilterError:1.0"], 0))
_0_Fissures.IfFilter._tc_FilterErrorSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._ad_FilterErrorSeq)
omniORB.registerType(FilterErrorSeq._NP_RepositoryId, _0_Fissures.IfFilter._ad_FilterErrorSeq, _0_Fissures.IfFilter._tc_FilterErrorSeq)
del FilterErrorSeq

# interface Filter
_0_Fissures.IfFilter._d_Filter = (omniORB.tcInternal.tv_objref, "IDL:iris.edu/Fissures/IfFilter/Filter:1.0", "Filter")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/Filter:1.0"] = _0_Fissures.IfFilter._d_Filter
_0_Fissures.IfFilter.Filter = omniORB.newEmptyClass()
class Filter (_0_Fissures.IfService.Service):
    _NP_RepositoryId = _0_Fissures.IfFilter._d_Filter[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfFilter.Filter = Filter
_0_Fissures.IfFilter._tc_Filter = omniORB.tcInternal.createTypeCode(_0_Fissures.IfFilter._d_Filter)
omniORB.registerType(Filter._NP_RepositoryId, _0_Fissures.IfFilter._d_Filter, _0_Fissures.IfFilter._tc_Filter)

# Filter operations and attributes
Filter._d_possible_options = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/FilterInfo:1.0"], ), None)
Filter._d_filter_seismograms = ((omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/ConfigurationId:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/FilterStyle:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/IfSeismogramMgr/SeismogramSeq:1.0"]), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:iris.edu/Fissures/IfFilter/FilterErrorSeq:1.0"]), {_0_Fissures.IfService.UnknownConfiguration._NP_RepositoryId: _0_Fissures.IfService._d_UnknownConfiguration})

# Filter object reference
class _objref_Filter (_0_Fissures.IfService._objref_Service):
    _NP_RepositoryId = Filter._NP_RepositoryId

    def __init__(self):
        _0_Fissures.IfService._objref_Service.__init__(self)

    def possible_options(self, *args):
        return _omnipy.invoke(self, "possible_options", _0_Fissures.IfFilter.Filter._d_possible_options, args)

    def filter_seismograms(self, *args):
        return _omnipy.invoke(self, "filter_seismograms", _0_Fissures.IfFilter.Filter._d_filter_seismograms, args)

    __methods__ = ["possible_options", "filter_seismograms"] + _0_Fissures.IfService._objref_Service.__methods__

omniORB.registerObjref(Filter._NP_RepositoryId, _objref_Filter)
_0_Fissures.IfFilter._objref_Filter = _objref_Filter
del Filter, _objref_Filter

# Filter skeleton
__name__ = "obspy.fissures.idl.Fissures__POA.IfFilter"
class Filter (_0_Fissures__POA.IfService.Service):
    _NP_RepositoryId = _0_Fissures.IfFilter.Filter._NP_RepositoryId


    _omni_op_d = {"possible_options": _0_Fissures.IfFilter.Filter._d_possible_options, "filter_seismograms": _0_Fissures.IfFilter.Filter._d_filter_seismograms}
    _omni_op_d.update(_0_Fissures__POA.IfService.Service._omni_op_d)

Filter._omni_skeleton = Filter
_0_Fissures__POA.IfFilter.Filter = Filter
omniORB.registerSkeleton(Filter._NP_RepositoryId, Filter)
del Filter
__name__ = "obspy.fissures.idl.Fissures.IfFilter"

#
# End of module "Fissures.IfFilter"
#
__name__ = "obspy.fissures.idl.Fissures"


#
# End of module "Fissures"
#
__name__ = "obspy.fissures.idl.obspy.fissures.idl.IfFilter_idl"

_exported_modules = ( "obspy.fissures.idl.Fissures", "obspy.fissures.idl.Fissures.IfFilter", "obspy.fissures.idl.Fissures.IfNetwork", "obspy.fissures.idl.Fissures.IfParameterMgr", "obspy.fissures.idl.Fissures.IfSeismogramDC", "obspy.fissures.idl.Fissures.IfSeismogramMgr", "obspy.fissures.idl.Fissures.IfService", "obspy.fissures.idl.Fissures.IfTimeSeries")

# The end.
