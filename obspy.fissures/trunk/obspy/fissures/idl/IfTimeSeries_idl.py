# Python stubs generated by omniidl from IfTimeSeries.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "Fissures.idl"
import Fissures_idl
_0_Fissures = omniORB.openModule("Fissures")
_0_Fissures__POA = omniORB.openModule("Fissures__POA")

#
# Start of module "Fissures"
#
__name__ = "Fissures"
_0_Fissures = omniORB.openModule("Fissures", r"IfTimeSeries.idl")
_0_Fissures__POA = omniORB.openModule("Fissures__POA", r"IfTimeSeries.idl")


#
# Start of module "Fissures.IfTimeSeries"
#
__name__ = "Fissures.IfTimeSeries"
_0_Fissures.IfTimeSeries = omniORB.openModule("Fissures.IfTimeSeries", r"IfTimeSeries.idl")
_0_Fissures__POA.IfTimeSeries = omniORB.openModule("Fissures__POA.IfTimeSeries", r"IfTimeSeries.idl")

_0_Fissures.IfTimeSeries.VERSION = "1.0"
_0_Fissures.IfTimeSeries.ILLEGAL_CONVERSION = 7

# struct EncodedData
_0_Fissures.IfTimeSeries.EncodedData = omniORB.newEmptyClass()
class EncodedData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"

    def __init__(self, compression, values, num_points, byte_order):
        self.compression = compression
        self.values = values
        self.num_points = num_points
        self.byte_order = byte_order

_0_Fissures.IfTimeSeries.EncodedData = EncodedData
_0_Fissures.IfTimeSeries._d_EncodedData  = (omniORB.tcInternal.tv_struct, EncodedData, EncodedData._NP_RepositoryId, "EncodedData", "compression", omniORB.tcInternal.tv_short, "values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0), "num_points", omniORB.tcInternal.tv_long, "byte_order", omniORB.tcInternal.tv_boolean)
_0_Fissures.IfTimeSeries._tc_EncodedData = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_EncodedData)
omniORB.registerType(EncodedData._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_EncodedData, _0_Fissures.IfTimeSeries._tc_EncodedData)
del EncodedData

# struct ComplexNumber
_0_Fissures.IfTimeSeries.ComplexNumber = omniORB.newEmptyClass()
class ComplexNumber (omniORB.StructBase):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumber:1.0"

    def __init__(self, real_part, imaginary_part):
        self.real_part = real_part
        self.imaginary_part = imaginary_part

_0_Fissures.IfTimeSeries.ComplexNumber = ComplexNumber
_0_Fissures.IfTimeSeries._d_ComplexNumber  = (omniORB.tcInternal.tv_struct, ComplexNumber, ComplexNumber._NP_RepositoryId, "ComplexNumber", "real_part", omniORB.tcInternal.tv_float, "imaginary_part", omniORB.tcInternal.tv_float)
_0_Fissures.IfTimeSeries._tc_ComplexNumber = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_ComplexNumber)
omniORB.registerType(ComplexNumber._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_ComplexNumber, _0_Fissures.IfTimeSeries._tc_ComplexNumber)
del ComplexNumber

# typedef ... ComplexNumberSeq
class ComplexNumberSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumberSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.ComplexNumberSeq = ComplexNumberSeq
_0_Fissures.IfTimeSeries._d_ComplexNumberSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumber:1.0"], 0)
_0_Fissures.IfTimeSeries._ad_ComplexNumberSeq = (omniORB.tcInternal.tv_alias, ComplexNumberSeq._NP_RepositoryId, "ComplexNumberSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ComplexNumber:1.0"], 0))
_0_Fissures.IfTimeSeries._tc_ComplexNumberSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_ComplexNumberSeq)
omniORB.registerType(ComplexNumberSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_ComplexNumberSeq, _0_Fissures.IfTimeSeries._tc_ComplexNumberSeq)
del ComplexNumberSeq

# enum TimeSeriesType
_0_Fissures.IfTimeSeries.TYPE_SHORT = omniORB.EnumItem("TYPE_SHORT", 0)
_0_Fissures.IfTimeSeries.TYPE_LONG = omniORB.EnumItem("TYPE_LONG", 1)
_0_Fissures.IfTimeSeries.TYPE_FLOAT = omniORB.EnumItem("TYPE_FLOAT", 2)
_0_Fissures.IfTimeSeries.TYPE_DOUBLE = omniORB.EnumItem("TYPE_DOUBLE", 3)
_0_Fissures.IfTimeSeries.TYPE_ENCODED = omniORB.EnumItem("TYPE_ENCODED", 4)
_0_Fissures.IfTimeSeries.TimeSeriesType = omniORB.Enum("IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesType:1.0", (_0_Fissures.IfTimeSeries.TYPE_SHORT, _0_Fissures.IfTimeSeries.TYPE_LONG, _0_Fissures.IfTimeSeries.TYPE_FLOAT, _0_Fissures.IfTimeSeries.TYPE_DOUBLE, _0_Fissures.IfTimeSeries.TYPE_ENCODED,))

_0_Fissures.IfTimeSeries._d_TimeSeriesType  = (omniORB.tcInternal.tv_enum, _0_Fissures.IfTimeSeries.TimeSeriesType._NP_RepositoryId, "TimeSeriesType", _0_Fissures.IfTimeSeries.TimeSeriesType._items)
_0_Fissures.IfTimeSeries._tc_TimeSeriesType = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesType)
omniORB.registerType(_0_Fissures.IfTimeSeries.TimeSeriesType._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesType, _0_Fissures.IfTimeSeries._tc_TimeSeriesType)

# union TimeSeriesDataSel
_0_Fissures.IfTimeSeries.TimeSeriesDataSel = omniORB.newEmptyClass()
class TimeSeriesDataSel (omniORB.Union):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"

_0_Fissures.IfTimeSeries.TimeSeriesDataSel = TimeSeriesDataSel

TimeSeriesDataSel._m_to_d = {"sht_values": _0_Fissures.IfTimeSeries.TYPE_SHORT, "int_values": _0_Fissures.IfTimeSeries.TYPE_LONG, "flt_values": _0_Fissures.IfTimeSeries.TYPE_FLOAT, "dbl_values": _0_Fissures.IfTimeSeries.TYPE_DOUBLE, "encoded_values": _0_Fissures.IfTimeSeries.TYPE_ENCODED}
TimeSeriesDataSel._d_to_m = {_0_Fissures.IfTimeSeries.TYPE_SHORT: "sht_values", _0_Fissures.IfTimeSeries.TYPE_LONG: "int_values", _0_Fissures.IfTimeSeries.TYPE_FLOAT: "flt_values", _0_Fissures.IfTimeSeries.TYPE_DOUBLE: "dbl_values", _0_Fissures.IfTimeSeries.TYPE_ENCODED: "encoded_values"}
TimeSeriesDataSel._def_m  = None
TimeSeriesDataSel._def_d  = None

_0_Fissures.IfTimeSeries._m_TimeSeriesDataSel  = ((_0_Fissures.IfTimeSeries.TYPE_SHORT, "sht_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0)), (_0_Fissures.IfTimeSeries.TYPE_LONG, "int_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)), (_0_Fissures.IfTimeSeries.TYPE_FLOAT, "flt_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0)), (_0_Fissures.IfTimeSeries.TYPE_DOUBLE, "dbl_values", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)), (_0_Fissures.IfTimeSeries.TYPE_ENCODED, "encoded_values", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], 0)),)
_0_Fissures.IfTimeSeries._d_TimeSeriesDataSel  = (omniORB.tcInternal.tv_union, TimeSeriesDataSel, TimeSeriesDataSel._NP_RepositoryId, "TimeSeriesDataSel", omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesType:1.0"], -1, _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel, None, {_0_Fissures.IfTimeSeries.TYPE_SHORT: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[0], _0_Fissures.IfTimeSeries.TYPE_LONG: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[1], _0_Fissures.IfTimeSeries.TYPE_FLOAT: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[2], _0_Fissures.IfTimeSeries.TYPE_DOUBLE: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[3], _0_Fissures.IfTimeSeries.TYPE_ENCODED: _0_Fissures.IfTimeSeries._m_TimeSeriesDataSel[4]})
_0_Fissures.IfTimeSeries._tc_TimeSeriesDataSel = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesDataSel)
omniORB.registerType(TimeSeriesDataSel._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesDataSel, _0_Fissures.IfTimeSeries._tc_TimeSeriesDataSel)
del TimeSeriesDataSel

# typedef ... TimeSeriesDataSelSeq
class TimeSeriesDataSelSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSelSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.TimeSeriesDataSelSeq = TimeSeriesDataSelSeq
_0_Fissures.IfTimeSeries._d_TimeSeriesDataSelSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"], 0)
_0_Fissures.IfTimeSeries._ad_TimeSeriesDataSelSeq = (omniORB.tcInternal.tv_alias, TimeSeriesDataSelSeq._NP_RepositoryId, "TimeSeriesDataSelSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesDataSel:1.0"], 0))
_0_Fissures.IfTimeSeries._tc_TimeSeriesDataSelSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_TimeSeriesDataSelSeq)
omniORB.registerType(TimeSeriesDataSelSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_TimeSeriesDataSelSeq, _0_Fissures.IfTimeSeries._tc_TimeSeriesDataSelSeq)
del TimeSeriesDataSelSeq

# typedef ... ShortSeq
class ShortSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.ShortSeq = ShortSeq
_0_Fissures.IfTimeSeries._d_ShortSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0)
_0_Fissures.IfTimeSeries._ad_ShortSeq = (omniORB.tcInternal.tv_alias, ShortSeq._NP_RepositoryId, "ShortSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_short, 0))
_0_Fissures.IfTimeSeries._tc_ShortSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_ShortSeq)
omniORB.registerType(ShortSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_ShortSeq, _0_Fissures.IfTimeSeries._tc_ShortSeq)
del ShortSeq

# typedef ... LongSeq
class LongSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.LongSeq = LongSeq
_0_Fissures.IfTimeSeries._d_LongSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)
_0_Fissures.IfTimeSeries._ad_LongSeq = (omniORB.tcInternal.tv_alias, LongSeq._NP_RepositoryId, "LongSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_Fissures.IfTimeSeries._tc_LongSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_LongSeq)
omniORB.registerType(LongSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_LongSeq, _0_Fissures.IfTimeSeries._tc_LongSeq)
del LongSeq

# typedef ... FloatSeq
class FloatSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.FloatSeq = FloatSeq
_0_Fissures.IfTimeSeries._d_FloatSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0)
_0_Fissures.IfTimeSeries._ad_FloatSeq = (omniORB.tcInternal.tv_alias, FloatSeq._NP_RepositoryId, "FloatSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0_Fissures.IfTimeSeries._tc_FloatSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_FloatSeq)
omniORB.registerType(FloatSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_FloatSeq, _0_Fissures.IfTimeSeries._tc_FloatSeq)
del FloatSeq

# typedef ... DoubleSeq
class DoubleSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.DoubleSeq = DoubleSeq
_0_Fissures.IfTimeSeries._d_DoubleSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0_Fissures.IfTimeSeries._ad_DoubleSeq = (omniORB.tcInternal.tv_alias, DoubleSeq._NP_RepositoryId, "DoubleSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0_Fissures.IfTimeSeries._tc_DoubleSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_DoubleSeq)
omniORB.registerType(DoubleSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_DoubleSeq, _0_Fissures.IfTimeSeries._tc_DoubleSeq)
del DoubleSeq

# typedef ... EncodedSeq
class EncodedSeq:
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_Fissures.IfTimeSeries.EncodedSeq = EncodedSeq
_0_Fissures.IfTimeSeries._d_EncodedSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], 0)
_0_Fissures.IfTimeSeries._ad_EncodedSeq = (omniORB.tcInternal.tv_alias, EncodedSeq._NP_RepositoryId, "EncodedSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], 0))
_0_Fissures.IfTimeSeries._tc_EncodedSeq = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._ad_EncodedSeq)
omniORB.registerType(EncodedSeq._NP_RepositoryId, _0_Fissures.IfTimeSeries._ad_EncodedSeq, _0_Fissures.IfTimeSeries._tc_EncodedSeq)
del EncodedSeq

# exception SequenceOutOfOrder
_0_Fissures.IfTimeSeries.SequenceOutOfOrder = omniORB.newEmptyClass()
class SequenceOutOfOrder (CORBA.UserException):
    _NP_RepositoryId = "IDL:iris.edu/Fissures/IfTimeSeries/SequenceOutOfOrder:1.0"

    def __init__(self, last_valid_seq_num):
        CORBA.UserException.__init__(self, last_valid_seq_num)
        self.last_valid_seq_num = last_valid_seq_num

_0_Fissures.IfTimeSeries.SequenceOutOfOrder = SequenceOutOfOrder
_0_Fissures.IfTimeSeries._d_SequenceOutOfOrder  = (omniORB.tcInternal.tv_except, SequenceOutOfOrder, SequenceOutOfOrder._NP_RepositoryId, "SequenceOutOfOrder", "last_valid_seq_num", omniORB.tcInternal.tv_long)
_0_Fissures.IfTimeSeries._tc_SequenceOutOfOrder = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_SequenceOutOfOrder)
omniORB.registerType(SequenceOutOfOrder._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder, _0_Fissures.IfTimeSeries._tc_SequenceOutOfOrder)
del SequenceOutOfOrder

# abstract interface TimeSeriesAccess
_0_Fissures.IfTimeSeries._d_TimeSeriesAccess = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAccess:1.0", "TimeSeriesAccess")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAccess:1.0"] = _0_Fissures.IfTimeSeries._d_TimeSeriesAccess
_0_Fissures.IfTimeSeries.TimeSeriesAccess = omniORB.newEmptyClass()
class TimeSeriesAccess (_0_Fissures.AuditSystemAccess):
    _NP_RepositoryId = _0_Fissures.IfTimeSeries._d_TimeSeriesAccess[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfTimeSeries.TimeSeriesAccess = TimeSeriesAccess
_0_Fissures.IfTimeSeries._tc_TimeSeriesAccess = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesAccess)
omniORB.registerType(TimeSeriesAccess._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesAccess, _0_Fissures.IfTimeSeries._tc_TimeSeriesAccess)

# TimeSeriesAccess operations and attributes
TimeSeriesAccess._d_is_closed = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_long = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_float = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_double = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_short = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_is_encoded = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_long = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_float = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_double = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_can_convert_to_short = ((), (omniORB.tcInternal.tv_boolean, ), None)
TimeSeriesAccess._d_get_as_longs = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_shorts = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_floats = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_doubles = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})
TimeSeriesAccess._d_get_as_encoded = ((), (omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"], ), {_0_Fissures.FissuresException._NP_RepositoryId: _0_Fissures._d_FissuresException})

# TimeSeriesAccess object reference
class _objref_TimeSeriesAccess (_0_Fissures._objref_AuditSystemAccess):
    _NP_RepositoryId = TimeSeriesAccess._NP_RepositoryId

    def __init__(self):
        _0_Fissures._objref_AuditSystemAccess.__init__(self)

    def is_closed(self, *args):
        return _omnipy.invoke(self, "is_closed", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_closed, args)

    def is_long(self, *args):
        return _omnipy.invoke(self, "is_long", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_long, args)

    def is_float(self, *args):
        return _omnipy.invoke(self, "is_float", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_float, args)

    def is_double(self, *args):
        return _omnipy.invoke(self, "is_double", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_double, args)

    def is_short(self, *args):
        return _omnipy.invoke(self, "is_short", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_short, args)

    def is_encoded(self, *args):
        return _omnipy.invoke(self, "is_encoded", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_encoded, args)

    def can_convert_to_long(self, *args):
        return _omnipy.invoke(self, "can_convert_to_long", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_long, args)

    def can_convert_to_float(self, *args):
        return _omnipy.invoke(self, "can_convert_to_float", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_float, args)

    def can_convert_to_double(self, *args):
        return _omnipy.invoke(self, "can_convert_to_double", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_double, args)

    def can_convert_to_short(self, *args):
        return _omnipy.invoke(self, "can_convert_to_short", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_short, args)

    def get_as_longs(self, *args):
        return _omnipy.invoke(self, "get_as_longs", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_longs, args)

    def get_as_shorts(self, *args):
        return _omnipy.invoke(self, "get_as_shorts", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_shorts, args)

    def get_as_floats(self, *args):
        return _omnipy.invoke(self, "get_as_floats", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_floats, args)

    def get_as_doubles(self, *args):
        return _omnipy.invoke(self, "get_as_doubles", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_doubles, args)

    def get_as_encoded(self, *args):
        return _omnipy.invoke(self, "get_as_encoded", _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_encoded, args)

    __methods__ = ["is_closed", "is_long", "is_float", "is_double", "is_short", "is_encoded", "can_convert_to_long", "can_convert_to_float", "can_convert_to_double", "can_convert_to_short", "get_as_longs", "get_as_shorts", "get_as_floats", "get_as_doubles", "get_as_encoded"] + _0_Fissures._objref_AuditSystemAccess.__methods__

omniORB.registerObjref(TimeSeriesAccess._NP_RepositoryId, _objref_TimeSeriesAccess)
_0_Fissures.IfTimeSeries._objref_TimeSeriesAccess = _objref_TimeSeriesAccess
del TimeSeriesAccess, _objref_TimeSeriesAccess

# TimeSeriesAccess skeleton
__name__ = "Fissures__POA.IfTimeSeries"
class TimeSeriesAccess (_0_Fissures__POA.AuditSystemAccess):
    _NP_RepositoryId = _0_Fissures.IfTimeSeries.TimeSeriesAccess._NP_RepositoryId


    _omni_op_d = {"is_closed": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_closed, "is_long": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_long, "is_float": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_float, "is_double": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_double, "is_short": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_short, "is_encoded": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_is_encoded, "can_convert_to_long": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_long, "can_convert_to_float": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_float, "can_convert_to_double": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_double, "can_convert_to_short": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_can_convert_to_short, "get_as_longs": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_longs, "get_as_shorts": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_shorts, "get_as_floats": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_floats, "get_as_doubles": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_doubles, "get_as_encoded": _0_Fissures.IfTimeSeries.TimeSeriesAccess._d_get_as_encoded}
    _omni_op_d.update(_0_Fissures__POA.AuditSystemAccess._omni_op_d)

TimeSeriesAccess._omni_skeleton = TimeSeriesAccess
_0_Fissures__POA.IfTimeSeries.TimeSeriesAccess = TimeSeriesAccess
omniORB.registerSkeleton(TimeSeriesAccess._NP_RepositoryId, TimeSeriesAccess)
del TimeSeriesAccess
__name__ = "Fissures.IfTimeSeries"

# abstract interface TimeSeriesAdmin
_0_Fissures.IfTimeSeries._d_TimeSeriesAdmin = (omniORB.tcInternal.tv_abstract_interface, "IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAdmin:1.0", "TimeSeriesAdmin")
omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/TimeSeriesAdmin:1.0"] = _0_Fissures.IfTimeSeries._d_TimeSeriesAdmin
_0_Fissures.IfTimeSeries.TimeSeriesAdmin = omniORB.newEmptyClass()
class TimeSeriesAdmin :
    _NP_RepositoryId = _0_Fissures.IfTimeSeries._d_TimeSeriesAdmin[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Fissures.IfTimeSeries.TimeSeriesAdmin = TimeSeriesAdmin
_0_Fissures.IfTimeSeries._tc_TimeSeriesAdmin = omniORB.tcInternal.createTypeCode(_0_Fissures.IfTimeSeries._d_TimeSeriesAdmin)
omniORB.registerType(TimeSeriesAdmin._NP_RepositoryId, _0_Fissures.IfTimeSeries._d_TimeSeriesAdmin, _0_Fissures.IfTimeSeries._tc_TimeSeriesAdmin)

# TimeSeriesAdmin operations and attributes
TimeSeriesAdmin._d_close = ((), (), None)
TimeSeriesAdmin._d_append_longs = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/LongSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_shorts = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/ShortSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_floats = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/FloatSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_doubles = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/DoubleSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_encoded_seq = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedSeq:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})
TimeSeriesAdmin._d_append_encoded = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:iris.edu/Fissures/IfTimeSeries/EncodedData:1.0"], omniORB.typeMapping["IDL:iris.edu/Fissures/AuditInfoOpt:1.0"]), (), {_0_Fissures.IfTimeSeries.SequenceOutOfOrder._NP_RepositoryId: _0_Fissures.IfTimeSeries._d_SequenceOutOfOrder})

# TimeSeriesAdmin object reference
class _objref_TimeSeriesAdmin (CORBA.Object):
    _NP_RepositoryId = TimeSeriesAdmin._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def close(self, *args):
        return _omnipy.invoke(self, "close", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_close, args)

    def append_longs(self, *args):
        return _omnipy.invoke(self, "append_longs", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_longs, args)

    def append_shorts(self, *args):
        return _omnipy.invoke(self, "append_shorts", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_shorts, args)

    def append_floats(self, *args):
        return _omnipy.invoke(self, "append_floats", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_floats, args)

    def append_doubles(self, *args):
        return _omnipy.invoke(self, "append_doubles", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_doubles, args)

    def append_encoded_seq(self, *args):
        return _omnipy.invoke(self, "append_encoded_seq", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded_seq, args)

    def append_encoded(self, *args):
        return _omnipy.invoke(self, "append_encoded", _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded, args)

    __methods__ = ["close", "append_longs", "append_shorts", "append_floats", "append_doubles", "append_encoded_seq", "append_encoded"] + CORBA.Object.__methods__

omniORB.registerObjref(TimeSeriesAdmin._NP_RepositoryId, _objref_TimeSeriesAdmin)
_0_Fissures.IfTimeSeries._objref_TimeSeriesAdmin = _objref_TimeSeriesAdmin
del TimeSeriesAdmin, _objref_TimeSeriesAdmin

# TimeSeriesAdmin skeleton
__name__ = "Fissures__POA.IfTimeSeries"
class TimeSeriesAdmin (PortableServer.Servant):
    _NP_RepositoryId = _0_Fissures.IfTimeSeries.TimeSeriesAdmin._NP_RepositoryId


    _omni_op_d = {"close": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_close, "append_longs": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_longs, "append_shorts": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_shorts, "append_floats": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_floats, "append_doubles": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_doubles, "append_encoded_seq": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded_seq, "append_encoded": _0_Fissures.IfTimeSeries.TimeSeriesAdmin._d_append_encoded}

TimeSeriesAdmin._omni_skeleton = TimeSeriesAdmin
_0_Fissures__POA.IfTimeSeries.TimeSeriesAdmin = TimeSeriesAdmin
omniORB.registerSkeleton(TimeSeriesAdmin._NP_RepositoryId, TimeSeriesAdmin)
del TimeSeriesAdmin
__name__ = "Fissures.IfTimeSeries"

#
# End of module "Fissures.IfTimeSeries"
#
__name__ = "Fissures"


#
# End of module "Fissures"
#
__name__ = "IfTimeSeries_idl"

_exported_modules = ( "Fissures", "Fissures.IfTimeSeries")

# The end.
