#!/usr/bin/env python
""" generated source for module TauP """
# package: edu.sc.seis.TauP
import javax.swing.DefaultListModel

import javax.swing.JTable

import javax.swing.event.ListSelectionEvent

import javax.swing.event.ListSelectionListener

# 
#  * The TauP Toolkit: Flexible Seismic Travel-Time and Raypath Utilities.
#  * Copyright (C) 1998-2000 University of South Carolina
#  * 
#  * This program is free software; you can redistribute it and/or modify it under
#  * the terms of the GNU General Public License as published by the Free Software
#  * Foundation; either version 2 of the License, or (at your option) any later
#  * version.
#  * 
#  * This program is distributed in the hope that it will be useful, but WITHOUT
#  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#  * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  * details.
#  * 
#  * You should have received a copy of the GNU General Public License along with
#  * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
#  * Place - Suite 330, Boston, MA 02111-1307, USA.
#  * 
#  * The current version can be found at <A
#  * HREF="www.seis.sc.edu">http://www.seis.sc.edu</A>
#  * 
#  * Bug reports and comments should be directed to H. Philip Crotwell,
#  * crotwell@seis.sc.edu or Tom Owens, owens@seis.sc.edu
#  * 
#  
# 
#  * 
#  * @author H. Philip Crotwell
#  * @version 1.1.3 Wed Jul 18 15:00:35 GMT 2001
#  * 
#  * 
#  * 
#  
class TauP(javax, swing, JFrame):
    """ generated source for class TauP """
    #  Initializes the Form 
    distance = 0
    timeTable = javax.swing.JTable()
    pierceTable = javax.swing.JTable()
    arrivalTM = ArrivalTableModel()
    pierceTableModel = PierceTableModel()
    pathPlotArea = PathPlot()

    def __init__(self):
        """ generated source for method __init__ """
        super(TauP, self).__init__("The TauP Toolkit")
        initComponents()
        pack()
        try:
            timeTool = TauP_Time("iasp91")
            timeTool.init()
            pierceTool = TauP_Pierce(timeTool.getTauModel())
            pierceTool.init()
            pathTool = TauP_Path(timeTool.getTauModel())
            pathTool.init()
            phaseDialog = PhaseDialog(self, False)
            phaseDialog.setPhases(timeTool.getPhaseNames())
            self.pathPlotArea = PathPlot()
            self.pathPlotArea.setPreferredSize(java.awt.Dimension(500, 300))
            self.pathPlotArea.setMinimumSize(java.awt.Dimension(500, 200))
            pathPanel.add(self.pathPlotArea, java.awt.BorderLayout.CENTER)
        except TauModelException as e:
            print e
        except java.io.IOException as e:
            print e
        self.arrivalTM = ArrivalTableModel()
        self.timeTable = javax.swing.JTable(self.arrivalTM)
        timeTableScrollPane = javax.swing.JScrollPane(self.timeTable)
        timeTableScrollPane.setPreferredSize(java.awt.Dimension(500, 300))
        timeTableScrollPane.setMinimumSize(java.awt.Dimension(500, 200))
        timePanel.add(timeTableScrollPane, java.awt.BorderLayout.CENTER)
        modelComboBox.addItem("iasp91")
        modelComboBox.addItem("prem")
        modelComboBox.addItem("ak135")
        modelComboBox.addItem("qdt")
        setSize(java.awt.Dimension(500, 300))
        self.pierceTableModel = PierceTableModel()
        self.pierceTable = JTable(self.pierceTableModel)
        pierceArrivalList.addListSelectionListener(ListSelectionListener())
        jScrollPane2.setViewportView(self.pierceTable)
        pierceModel = DefaultListModel()
        pierceArrivalList.setModel(pierceModel)
        #  path list
        jList1.setModel(pierceModel)
        jList1.setSelectionModel(pierceArrivalList.getSelectionModel())
        validate()

    # 
    #      * This method is called from within the constructor to initialize the form.
    #      * WARNING: Do NOT modify this code. The content of this method is always
    #      * regenerated by the FormEditor.
    #      
    def initComponents(self):
        """ generated source for method initComponents """
        #  GEN-BEGIN:initComponents
        #  This code was developed using a non-commercially licensed version of
        #  NetBeans Developer 2.x.
        #  For details, see http://www.netbeans.com/non_commercial.html
        addWindowListener(java.awt.event.WindowAdapter())
        getContentPane().setLayout(java.awt.BorderLayout())
        jTabbedPane1 = javax.swing.JTabbedPane()
        jTabbedPane1.setMinimumSize(java.awt.Dimension(200, 200))
        timePanel = javax.swing.JPanel()
        timePanel.setToolTipText("travel times")
        timePanel.setName("Time")
        timePanel.setLayout(java.awt.BorderLayout())
        jTabbedPane1.addTab("Time", None, timePanel, "travel times")
        piercePanel = javax.swing.JPanel()
        piercePanel.setToolTipText("pierce points")
        piercePanel.setName("Pierce")
        piercePanel.setLayout(java.awt.BorderLayout())
        jScrollPane1 = javax.swing.JScrollPane()
        pierceArrivalList = javax.swing.JList()
        pierceArrivalList.setPreferredSize(java.awt.Dimension(60, 60))
        pierceArrivalList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION)
        pierceArrivalList.setMinimumSize(java.awt.Dimension(60, 60))
        jScrollPane1.add(pierceArrivalList)
        jScrollPane1.setViewportView(pierceArrivalList)
        piercePanel.add(jScrollPane1, "West")
        jScrollPane2 = javax.swing.JScrollPane()
        piercePanel.add(jScrollPane2, "Center")
        jTabbedPane1.addTab("Pierce", piercePanel)
        pathPanel = javax.swing.JPanel()
        pathPanel.setToolTipText("path points")
        pathPanel.setName("Path Points")
        pathPanel.setLayout(java.awt.BorderLayout())
        jScrollPane3 = javax.swing.JScrollPane()
        jList1 = javax.swing.JList()
        jList1.setPreferredSize(java.awt.Dimension(60, 60))
        jList1.setMinimumSize(java.awt.Dimension(60, 60))
        jScrollPane3.setViewportView(jList1)
        pathPanel.add(jScrollPane3, "West")
        jTabbedPane1.addTab("Path", pathPanel)
        getContentPane().add(jTabbedPane1, "Center")
        jPanel1 = javax.swing.JPanel()
        jPanel1.setLayout(java.awt.GridBagLayout())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        jLabel1 = javax.swing.JLabel()
        jLabel1.setText("Model")
        jLabel1.setName("modelLabel")
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 0
        gridBagConstraints1.gridy = 0
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        jPanel1.add(jLabel1, gridBagConstraints1)
        modelComboBox = javax.swing.JComboBox()
        modelComboBox.setToolTipText("choose a model")
        modelComboBox.setActionCommand("modelChanged")
        modelComboBox.setName("modelMenu")
        modelComboBox.addActionListener(java.awt.event.ActionListener())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 1
        gridBagConstraints1.gridy = 0
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        jPanel1.add(modelComboBox, gridBagConstraints1)
        jLabel2 = javax.swing.JLabel()
        jLabel2.setText("Distance (deg)")
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 2
        gridBagConstraints1.gridy = 0
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        gridBagConstraints1.insets = java.awt.Insets(0, 10, 0, 0)
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST
        jPanel1.add(jLabel2, gridBagConstraints1)
        distanceTextField = javax.swing.JTextField()
        distanceTextField.setToolTipText("distance in degrees")
        distanceTextField.setPreferredSize(java.awt.Dimension(100, 21))
        distanceTextField.setMinimumSize(java.awt.Dimension(100, 21))
        distanceTextField.setText("50.0")
        distanceTextField.addActionListener(java.awt.event.ActionListener())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 3
        gridBagConstraints1.gridy = 0
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        jPanel1.add(distanceTextField, gridBagConstraints1)
        jLabel3 = javax.swing.JLabel()
        jLabel3.setText("Depth")
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT)
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 2
        gridBagConstraints1.gridy = 1
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        gridBagConstraints1.insets = java.awt.Insets(0, 10, 0, 0)
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST
        jPanel1.add(jLabel3, gridBagConstraints1)
        depthTextField = javax.swing.JTextField()
        depthTextField.setToolTipText("source depth in km")
        depthTextField.setPreferredSize(java.awt.Dimension(100, 21))
        depthTextField.setMinimumSize(java.awt.Dimension(100, 21))
        depthTextField.setText("0.0")
        depthTextField.setName("depthTextField")
        depthTextField.addActionListener(java.awt.event.ActionListener())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 3
        gridBagConstraints1.gridy = 1
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        jPanel1.add(depthTextField, gridBagConstraints1)
        phaseChooserButton = javax.swing.JButton()
        phaseChooserButton.setToolTipText("show phase chooser")
        phaseChooserButton.setText("Phases")
        phaseChooserButton.setActionCommand("showPhases")
        phaseChooserButton.setLabel("Phases")
        phaseChooserButton.setName("phaseButton")
        phaseChooserButton.addActionListener(java.awt.event.ActionListener())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 1
        gridBagConstraints1.gridy = 1
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        jPanel1.add(phaseChooserButton, gridBagConstraints1)
        calculateButton = javax.swing.JButton()
        calculateButton.setToolTipText("calculate times")
        calculateButton.setText("Calculate")
        calculateButton.addActionListener(java.awt.event.ActionListener())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 4
        gridBagConstraints1.gridy = 0
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        gridBagConstraints1.insets = java.awt.Insets(0, 20, 0, 0)
        jPanel1.add(calculateButton, gridBagConstraints1)
        jButton1 = javax.swing.JButton()
        jButton1.setText("Quit")
        jButton1.setActionCommand("quit")
        jButton1.setLabel("Quit")
        jButton1.addActionListener(java.awt.event.ActionListener())
        gridBagConstraints1 = java.awt.GridBagConstraints()
        gridBagConstraints1.gridx = 4
        gridBagConstraints1.gridy = 1
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL
        gridBagConstraints1.insets = java.awt.Insets(0, 20, 0, 0)
        jPanel1.add(jButton1, gridBagConstraints1)
        getContentPane().add(jPanel1, "South")

    #  GEN-END:initComponents
    quitExits = False

    # 
    #      * Get the value of quitExits.
    #      * 
    #      * @return Value of quitExits.
    #      
    def getQuitExits(self):
        """ generated source for method getQuitExits """
        return self.quitExits

    # 
    #      * Set the value of quitExits.
    #      * 
    #      * @param v
    #      *            Value to assign to quitExits.
    #      
    def setQuitExits(self, v):
        """ generated source for method setQuitExits """
        self.quitExits = v

    def phaseChooserActionPerformed(self, evt):
        """ generated source for method phaseChooserActionPerformed """
        #  GEN-FIRST:event_phaseChooserActionPerformed
        #  Add your handling code here:
        phaseDialog.setVisible(True)

    #  GEN-LAST:event_phaseChooserActionPerformed
    def quitActionPerformed(self, evt):
        """ generated source for method quitActionPerformed """
        #  GEN-FIRST:event_quitActionPerformed
        #  Add your handling code here:
        if self.getQuitExits():
            System.exit(0)
        else:
            dispose()

    #  GEN-LAST:event_quitActionPerformed
    def calculateActionPerformed(self, evt):
        """ generated source for method calculateActionPerformed """
        #  GEN-FIRST:event_calculateActionPerformed
        #  Add your handling code here:
        try:
            timeTool.setSourceDepth(Double.valueOf(depthTextField.getText()).doubleValue())
            timeTool.clearPhaseNames()
            timeTool.setPhaseNames(phaseDialog.getPhases())
            setDistance(Double.valueOf(distanceTextField.getText()).doubleValue())
            timeTool.calculate(self.distance)
            #  System.out.println("Done calculating time"+distance+"
            #  "+timeTool.getNumArrivals()
            #  +" "+timeTool.getPhaseNameString()+" "+timeTool.getTauModelName()
            #  );
            pierceTool.setSourceDepth(Double.valueOf(depthTextField.getText()).doubleValue())
            pierceTool.clearPhaseNames()
            pierceTool.setPhaseNames(phaseDialog.getPhases())
            pierceTool.calculate(self.distance)
            pathTool.setSourceDepth(Double.valueOf(depthTextField.getText()).doubleValue())
            pathTool.clearPhaseNames()
            pathTool.setPhaseNames(phaseDialog.getPhases())
            pathTool.calculate(self.distance)
            showResults()
        except Exception as e:
            print "exception in calculate " + e
            e.printStackTrace()

    #  GEN-LAST:event_calculateActionPerformed
    def distanceActionPerformed(self, evt):
        """ generated source for method distanceActionPerformed """
        #  GEN-FIRST:event_distanceActionPerformed
        #  Add your handling code here:
        setDistance(Double.valueOf(evt.getActionCommand()).doubleValue())
        self.calculateActionPerformed(evt)

    #  GEN-LAST:event_distanceActionPerformed
    def depthActionPerformed(self, evt):
        """ generated source for method depthActionPerformed """
        #  GEN-FIRST:event_distanceActionPerformed
        #  Add your handling code here:
        setDepth(Double.valueOf(evt.getActionCommand()).doubleValue())
        self.calculateActionPerformed(evt)

    #  GEN-LAST:event_distanceActionPerformed
    def chooseModelActionPerformed(self, evt):
        """ generated source for method chooseModelActionPerformed """
        #  GEN-FIRST:event_chooseModelActionPerformed
        #  Add your handling code here:
        setModel(str((modelComboBox.getSelectedItem())))

    #  GEN-LAST:event_chooseModelActionPerformed
    def pierceListValueChanged(self, e):
        """ generated source for method pierceListValueChanged """
        self.pierceTableModel.setSelectedIndex(pierceArrivalList.getSelectedIndex())
        self.pathPlotArea.setSelectedIndex(pierceArrivalList.getSelectedIndex())

    #  Exit the Application 
    def exitForm(self, evt):
        """ generated source for method exitForm """
        #  GEN-FIRST:event_exitForm
        if self.getQuitExits():
            System.exit(0)
        else:
            dispose()

    #  GEN-LAST:event_exitForm
    #  Variables declaration - do not modify//GEN-BEGIN:variables
    jTabbedPane1 = javax.swing.JTabbedPane()
    jPanel1 = javax.swing.JPanel()
    timePanel = javax.swing.JPanel()
    piercePanel = javax.swing.JPanel()
    pathPanel = javax.swing.JPanel()
    jScrollPane1 = javax.swing.JScrollPane()
    jScrollPane2 = javax.swing.JScrollPane()
    pierceArrivalList = javax.swing.JList()
    jLabel1 = javax.swing.JLabel()
    modelComboBox = javax.swing.JComboBox()
    jLabel2 = javax.swing.JLabel()
    distanceTextField = javax.swing.JTextField()
    jLabel3 = javax.swing.JLabel()
    depthTextField = javax.swing.JTextField()
    phaseChooserButton = javax.swing.JButton()
    calculateButton = javax.swing.JButton()
    jButton1 = javax.swing.JButton()
    jScrollPane3 = javax.swing.JScrollPane()
    jList1 = javax.swing.JList()

    #  End of variables declaration//GEN-END:variables
    timeTool = TauP_Time()
    pierceTool = TauP_Pierce()
    pathTool = TauP_Path()
    phaseDialog = PhaseDialog()
    pierceModel = DefaultListModel()

    def setModel(self, modelName):
        """ generated source for method setModel """
        try:
            self.timeTool.loadTauModel(modelName)
            self.pierceTool.setTauModel(self.timeTool.getTauModel())
            self.pathTool.setTauModel(self.timeTool.getTauModel())
        except Exception as e:
            print e

    def setDepth(self, depth):
        """ generated source for method setDepth """
        self.timeTool.setSourceDepth(depth)

    def setDistance(self, distance):
        """ generated source for method setDistance """
        self.distance = distance

    def showResults(self):
        """ generated source for method showResults """
        self.arrivalTM.setArrivals(self.timeTool.getArrivals())
        self.pierceTableModel.setArrivals(self.pierceTool.getArrivals())
        self.pierceModel.removeAllElements()
        i = 0
        while i < self.pierceTool.getNumArrivals():
            self.pierceModel.addElement(self.pierceTool.getArrival(i).__name__)
            i += 1
        self.pierceArrivalList.setSelectedIndex(0)
        self.pathPlotArea.setTauModel(self.pathTool.getTauModel())
        self.pathPlotArea.removeAllElements()
        i = 0
        while i < self.pathTool.getNumArrivals():
            self.pathPlotArea.addElement(self.pathTool.getArrival(i))
            i += 1
        self.pathPlotArea.repaint()

    @classmethod
    def main(cls, args):
        """ generated source for method main """
        t = TauP()
        t.setQuitExits(True)
        t.show()


if __name__ == '__main__':
    import sys
    TauP.main(sys.argv)

